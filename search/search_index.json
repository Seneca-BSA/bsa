{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lab Manuals SES250 Elecromagnetics Lab Manual SEH500 Microprocessors and Computer Architecture Lab Manual SEP600 Embedded Systems","title":"Lab Manuals"},{"location":"#lab-manuals","text":"SES250 Elecromagnetics Lab Manual SEH500 Microprocessors and Computer Architecture Lab Manual SEP600 Embedded Systems","title":"Lab Manuals"},{"location":"seh500/","text":"SEH500 Lab Manual Lab 1 : Setup Lab 2 : Writing in Assembly Lab 3 : Branching in Assembly Lab 4 : More Branching, Array and String in Assembly Lab 5 : More Branching, Subroutine, and Stack Lab 6 : Timer Interrupt and C Code Lab 7 : GPIO and Interrupt Lab 8 : Sensors","title":"SEH500 Microprocessors"},{"location":"seh500/#seh500-lab-manual","text":"Lab 1 : Setup Lab 2 : Writing in Assembly Lab 3 : Branching in Assembly Lab 4 : More Branching, Array and String in Assembly Lab 5 : More Branching, Subroutine, and Stack Lab 6 : Timer Interrupt and C Code Lab 7 : GPIO and Interrupt Lab 8 : Sensors","title":"SEH500 Lab Manual"},{"location":"seh500/lab1/","text":"Lab 1 : Setup Seneca College SEH500 Microprocessors and Computer Architecture Introduction The Freedom-K64F and Freedom-K66F are both low-cost development platforms using the NXP Kinetis series of microcontrollers that is based on the ARM Cortex-M4 processor. Features K64F K66F Microcontroller MK64FN1M0VLL12 MK66FN2M0VMD18 Speed 120 MHz 180 MHz RAM 256 kB 256 kB External Memory N/A microSD socket Connectivity USB, Ethernet, Add-on Bluetooth USB, Ethernet, Add-on Bluetooth Audio N/A Audio codec and Jacks Sensors Accelerometer and Magnetometer (FXOS8700CQ) Accelerometer and Magnetometer (FXOS8700CQ) Gyroscope (FXAS21002) Debug OpenSDAv2 Virtual Serial Port OpenSDAv2 Virtual Serial Port User Components RGB LED RGB LED Two user push buttons Preparation Read over the lab manual for this lab. Acquire the Freedom microcontroller board and install the necessary IDE as described in the lab manual. Be familiar with the following resources: FRDMK64FUG, FRDM-K64F Freedom Module User's Guide The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors by Joseph Yiu Cortex-M4 Technical Reference Manual Lab Preparation Question Answer the following questions on Blackboard once the pre-load quiz becomes available 24 hours before the lab session. Referring to the Memory map shown in class or from Figure 4.18 of Yiu, what is the starting address and ending address of the instruction code region? Referring to the Memory map shown in class or from Figure 4.18 of Yiu, what is the starting address and ending address of the general purpose data memory region? How many bytes (exact whole number) of memory are available for each of the regions above? Referring to Yiu or the Cortex-M4 Technical Reference, what is the instruction for loading data from memory into a register? Referring to Yiu or the Cortex-M4 Technical Reference, what is the instruction for storing data from a register in memory? Procedures Firmware Update If you are using the Freedom-K64F, you might need to update its firmware before using it with Windows 10. Even if you are not using Windows 10, updating the firmware might be a good idea. Unplug the Freedom board then hold down the \"RESET SW1\" button as you plug the board into your computer to enter bootloader mode. Figure 1.1 Start in Bootloader Mode Once plugged in, if you see anything else but \"MAINTENANCE\" (such as seeing \"BOOTLOADER\"), then we need to update the firmware. Follow only step 1-10 on the Getting Started with the FRDM-K64F BUT USE THE FILES BELOW. For K64F: here are the files: 0244_k20dx_bootloader_update_0x5000.bin for updating the OpenSDA bootloader (Reference: DAPLink bootloader update ) k20dx_frdmk64f_if_crc_legacy_0x5000 for loading the CMSIS-DAP application back onto the board (Reference: OpenSDA Serial and Debug Adapter ) For K66F: here are the files: 0244_k20dx_bootloader_update_0x8000.bin for updating the OpenSDA bootloader (Reference: DAPLink bootloader update ) k20dx_frdmk66f_if_crc for loading the CMSIS-DAP application back onto the board (Reference: OpenSDA Serial and Debug Adapter ) If the bootloader drive is not showing, try updating the bootloader using non-Windows 10 computer. If it is still not showing up, the board might be in a bricked state. In this case, an external device must be used to flash a new bootloader. Follow the instruction here . Install IDE Install the MCUXpresso IDE from NXP (account creation required) or using Seneca MyApps . NOTE: If the board is not recognized by Windows, download latest driver for Windows. Links to other drivers such as P&E Micro and Segger Jlink can be found here: OpenSDA Serial and Debug Adapter . Figure 1.2 Seneca MyApps Select an appropriate location to save your workspace. It must be a directory to which you have write permission. Figure 1.3 Select Workspace Directory Install SDK Once MCUXpresso opens, click \"Download and Install SDK\" from the quick-start menu. Figure 1.4 Download and Install SDK Filter for \"K64\" or \"K66\" depending on the version of the board you are using then install the SDK. Figure 1.5 Filter SDK Figure 1.6 Select SDK Figure 1.7 Install SDK Import SDK Example After downloading and installing the SDK, close the welcome screen. At the bottom left Quickstart Panel, click \"Import SDK example(s)...\". Figure 1.8 Install SDK Select the appropriate example library. Figure 1.9 Select Example Library Find the \"hello_world\" example from \"demo_apps\". Figure 1.10 Select Hello World Demo Ensure \"SDK Debug Console\" under Project Options is selected as UART then click \"Next\". Figure 1.11 SDK Debug Console UART In the project Advanced Settings page, ensure to CLEAR the \"Redirect SDK PRINTF to C library printf\" option then click \"Finish\". Figure 1.12 Clear Redirect SDK PRINTF to C library printf Code, Build and Debug Project By now, you should be able to see a familiar interface with a project tree on the left and a code in the middle. Take a look at the code and get an idea of what it is performing. Afterward, click \"Build\" at the lower left Quickstart Panel to compile the code. Figure 1.13 Demo Project Code Figure 1.14 Build Project Once the project is built, click \"Debug\" to run the project in debug mode. Figure 1.15 Run in Debug Mode The IDE should automatically probe for and connect to the target microcontroller board. Click \"OK\". Figure 1.16 Connect to target Serial Terminal Open a Serial terminal in the IDE by clicking on the \"Terminal\" tab beside the \"Console\" tab at the bottom of the screen. Select the appropriate COM port that the microcontroller board is connected to (check the device manager of your computer). Ensure the settings are 115200 baud rate with 8-bit data size, no parity bit, and 1 stop bit. Figure 1.17 Start a Serial Terminal Once the terminal is connected, press \"Resume\" from the debug menu and you should see \"Hello World\" in the serial terminal. Figure 1.18 Press Resume Figure 1.19 Hello World in Serial Terminal View Assembly Code Lastly, let's take a look at the assembly language code. From the project tree on the left, find the \"Debug\" directory. Within the directory, right-click on the .axf file then click Binary Utilities > Disassemble. Figure 1.20 View Disassembled Code A new .dis file should be created. Open the file to see the disassembled code. Figure 1.21 Disassembled Code View the Registers Value and Memory Data during Debug This step can only be done with a microcontroller board running during debugging. To view the register values during debugging, select the \"Registers\" tab beside the Project Explorer tab on the left-hand side. You should now see the register from r0-r12, sp, lr, pc, ... To view memory data, at the bottom right, select the \"Memory\" tab. Click the plus (+) symbol then type in the memory address you want to view. Usually, the memory area you want to view will be somewhere between 0x20000000 to 0x3FFFFFFF. Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. In the hello_world.c example, what is the first line of code that it halts on once you start debugging? Both line numbers in the C-code and instruction address. Note: The instruction is at a hex address within the instruction region. You can find it in the disabled code or the Disassembly view during debug. Hint: The main function starts at address 0x00000924. Look at the register map, what is the value of the Program Counter (PC) when you first start debugging? What do you notice with respect to the question above and the memory region you found during pre-lab? What is the value of the Stack Pointer (SP)? Does it correspond to the memory region you found during pre-lab? Find an example of the load instruction within the main function. What is its address and explain the instruction? Find an example of the store instruction within the main function. What is its address and explain the instruction? Change the C-code to also display your name and student number within the print statement. Copy your main function onto Blackboard. Run the code and view the result using a serial terminal. Place a screenshot of the printout onto Blackboard.","title":"Lab 1 : Setup"},{"location":"seh500/lab1/#lab-1-setup","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 1 : Setup"},{"location":"seh500/lab1/#introduction","text":"The Freedom-K64F and Freedom-K66F are both low-cost development platforms using the NXP Kinetis series of microcontrollers that is based on the ARM Cortex-M4 processor. Features K64F K66F Microcontroller MK64FN1M0VLL12 MK66FN2M0VMD18 Speed 120 MHz 180 MHz RAM 256 kB 256 kB External Memory N/A microSD socket Connectivity USB, Ethernet, Add-on Bluetooth USB, Ethernet, Add-on Bluetooth Audio N/A Audio codec and Jacks Sensors Accelerometer and Magnetometer (FXOS8700CQ) Accelerometer and Magnetometer (FXOS8700CQ) Gyroscope (FXAS21002) Debug OpenSDAv2 Virtual Serial Port OpenSDAv2 Virtual Serial Port User Components RGB LED RGB LED Two user push buttons","title":"Introduction"},{"location":"seh500/lab1/#preparation","text":"Read over the lab manual for this lab. Acquire the Freedom microcontroller board and install the necessary IDE as described in the lab manual. Be familiar with the following resources: FRDMK64FUG, FRDM-K64F Freedom Module User's Guide The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors by Joseph Yiu Cortex-M4 Technical Reference Manual","title":"Preparation"},{"location":"seh500/lab1/#lab-preparation-question","text":"Answer the following questions on Blackboard once the pre-load quiz becomes available 24 hours before the lab session. Referring to the Memory map shown in class or from Figure 4.18 of Yiu, what is the starting address and ending address of the instruction code region? Referring to the Memory map shown in class or from Figure 4.18 of Yiu, what is the starting address and ending address of the general purpose data memory region? How many bytes (exact whole number) of memory are available for each of the regions above? Referring to Yiu or the Cortex-M4 Technical Reference, what is the instruction for loading data from memory into a register? Referring to Yiu or the Cortex-M4 Technical Reference, what is the instruction for storing data from a register in memory?","title":"Lab Preparation Question"},{"location":"seh500/lab1/#procedures","text":"","title":"Procedures"},{"location":"seh500/lab1/#firmware-update","text":"If you are using the Freedom-K64F, you might need to update its firmware before using it with Windows 10. Even if you are not using Windows 10, updating the firmware might be a good idea. Unplug the Freedom board then hold down the \"RESET SW1\" button as you plug the board into your computer to enter bootloader mode. Figure 1.1 Start in Bootloader Mode Once plugged in, if you see anything else but \"MAINTENANCE\" (such as seeing \"BOOTLOADER\"), then we need to update the firmware. Follow only step 1-10 on the Getting Started with the FRDM-K64F BUT USE THE FILES BELOW. For K64F: here are the files: 0244_k20dx_bootloader_update_0x5000.bin for updating the OpenSDA bootloader (Reference: DAPLink bootloader update ) k20dx_frdmk64f_if_crc_legacy_0x5000 for loading the CMSIS-DAP application back onto the board (Reference: OpenSDA Serial and Debug Adapter ) For K66F: here are the files: 0244_k20dx_bootloader_update_0x8000.bin for updating the OpenSDA bootloader (Reference: DAPLink bootloader update ) k20dx_frdmk66f_if_crc for loading the CMSIS-DAP application back onto the board (Reference: OpenSDA Serial and Debug Adapter ) If the bootloader drive is not showing, try updating the bootloader using non-Windows 10 computer. If it is still not showing up, the board might be in a bricked state. In this case, an external device must be used to flash a new bootloader. Follow the instruction here .","title":"Firmware Update"},{"location":"seh500/lab1/#install-ide","text":"Install the MCUXpresso IDE from NXP (account creation required) or using Seneca MyApps . NOTE: If the board is not recognized by Windows, download latest driver for Windows. Links to other drivers such as P&E Micro and Segger Jlink can be found here: OpenSDA Serial and Debug Adapter . Figure 1.2 Seneca MyApps Select an appropriate location to save your workspace. It must be a directory to which you have write permission. Figure 1.3 Select Workspace Directory","title":"Install IDE"},{"location":"seh500/lab1/#install-sdk","text":"Once MCUXpresso opens, click \"Download and Install SDK\" from the quick-start menu. Figure 1.4 Download and Install SDK Filter for \"K64\" or \"K66\" depending on the version of the board you are using then install the SDK. Figure 1.5 Filter SDK Figure 1.6 Select SDK Figure 1.7 Install SDK","title":"Install SDK"},{"location":"seh500/lab1/#import-sdk-example","text":"After downloading and installing the SDK, close the welcome screen. At the bottom left Quickstart Panel, click \"Import SDK example(s)...\". Figure 1.8 Install SDK Select the appropriate example library. Figure 1.9 Select Example Library Find the \"hello_world\" example from \"demo_apps\". Figure 1.10 Select Hello World Demo Ensure \"SDK Debug Console\" under Project Options is selected as UART then click \"Next\". Figure 1.11 SDK Debug Console UART In the project Advanced Settings page, ensure to CLEAR the \"Redirect SDK PRINTF to C library printf\" option then click \"Finish\". Figure 1.12 Clear Redirect SDK PRINTF to C library printf","title":"Import SDK Example"},{"location":"seh500/lab1/#code-build-and-debug-project","text":"By now, you should be able to see a familiar interface with a project tree on the left and a code in the middle. Take a look at the code and get an idea of what it is performing. Afterward, click \"Build\" at the lower left Quickstart Panel to compile the code. Figure 1.13 Demo Project Code Figure 1.14 Build Project Once the project is built, click \"Debug\" to run the project in debug mode. Figure 1.15 Run in Debug Mode The IDE should automatically probe for and connect to the target microcontroller board. Click \"OK\". Figure 1.16 Connect to target","title":"Code, Build and Debug Project"},{"location":"seh500/lab1/#serial-terminal","text":"Open a Serial terminal in the IDE by clicking on the \"Terminal\" tab beside the \"Console\" tab at the bottom of the screen. Select the appropriate COM port that the microcontroller board is connected to (check the device manager of your computer). Ensure the settings are 115200 baud rate with 8-bit data size, no parity bit, and 1 stop bit. Figure 1.17 Start a Serial Terminal Once the terminal is connected, press \"Resume\" from the debug menu and you should see \"Hello World\" in the serial terminal. Figure 1.18 Press Resume Figure 1.19 Hello World in Serial Terminal","title":"Serial Terminal"},{"location":"seh500/lab1/#view-assembly-code","text":"Lastly, let's take a look at the assembly language code. From the project tree on the left, find the \"Debug\" directory. Within the directory, right-click on the .axf file then click Binary Utilities > Disassemble. Figure 1.20 View Disassembled Code A new .dis file should be created. Open the file to see the disassembled code. Figure 1.21 Disassembled Code","title":"View Assembly Code"},{"location":"seh500/lab1/#view-the-registers-value-and-memory-data-during-debug","text":"This step can only be done with a microcontroller board running during debugging. To view the register values during debugging, select the \"Registers\" tab beside the Project Explorer tab on the left-hand side. You should now see the register from r0-r12, sp, lr, pc, ... To view memory data, at the bottom right, select the \"Memory\" tab. Click the plus (+) symbol then type in the memory address you want to view. Usually, the memory area you want to view will be somewhere between 0x20000000 to 0x3FFFFFFF.","title":"View the Registers Value and Memory Data during Debug"},{"location":"seh500/lab1/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. In the hello_world.c example, what is the first line of code that it halts on once you start debugging? Both line numbers in the C-code and instruction address. Note: The instruction is at a hex address within the instruction region. You can find it in the disabled code or the Disassembly view during debug. Hint: The main function starts at address 0x00000924. Look at the register map, what is the value of the Program Counter (PC) when you first start debugging? What do you notice with respect to the question above and the memory region you found during pre-lab? What is the value of the Stack Pointer (SP)? Does it correspond to the memory region you found during pre-lab? Find an example of the load instruction within the main function. What is its address and explain the instruction? Find an example of the store instruction within the main function. What is its address and explain the instruction? Change the C-code to also display your name and student number within the print statement. Copy your main function onto Blackboard. Run the code and view the result using a serial terminal. Place a screenshot of the printout onto Blackboard.","title":"Post-Lab Questions"},{"location":"seh500/lab2/","text":"Lab 2 : Writing in Assembly Seneca College SEH500 Microprocessors and Computer Architecture Introduction Cortex-M4 Memory Map The 4GB address space of the Cortex\u00ae-M processors is partitioned into a number of memory regions (Figure 2.1). The partitioning is based on typical usages so that different areas are designed to be used primarily for: Program code accesses (e.g., CODE region) Data accesses (e.g., SRAM region) Peripherals (e.g., Peripheral region) Processor\u2019s internal control and debug components (e.g., Private Peripheral Bus) The architecture also allows high flexibility to allow memory regions to be used for other purposes. For example, programs can be executed from the CODE as well as the SRAM region, and a microcontroller can also integrate SRAM blocks in CODE region. Figure 2.1 Memory map In practice, many microcontroller devices only use a small portion of each region for program flash, SRAM, and peripherals. Some of the regions can be unused. Different microcontrollers have different memory sizes and peripheral address locations. This information is usually outlined in user manuals or datasheets from microcontroller vendors. Cortex-M4 Registers The register bank in the Cortex-M3 and Cortex-M4 processors has 16 registers. Thirteen of them are general-purpose 32-bit registers, and the other three have special uses, as can be seen in Figure 2.2. Figure 2.2 Registers in the register bank R0 \u2013 R12 Registers R0 to R12 are general-purpose registers. The first eight (R0 \u2013 R7) are also called low registers. Due to the limited available space in the instruction set, many 16-bit instructions can only access the low registers. The high registers (R8 \u2013 R12) can be used with 32-bit instructions, and a few with 16-bit instructions, like MOV (move). The initial values of R0 to R12 are undefined. R13, stack pointer (SP) R13 is the Stack Pointer. It is used for accessing the stack memory via PUSH and POP operations. R14, link register (LR) R14 is also called the Link Register (LR). This is used for holding the return address when calling a function or subroutine. At the end of the function or subroutine, the program control can return to the calling program and resume by loading the value of LR into the Program Counter (PC). When a function or subroutine call is made, the value of LR is updated automatically. If a function needs to call another function or subroutine, it needs to save the value of LR in the stack first. Otherwise, the current value in LR will be lost when the function call is made. R15, program counter (PC) R15 is the Program Counter (PC). It is readable and writeable: a read returns the current instruction address plus 4 (this is due to the pipeline nature of the design, and compatibility requirement with the ARM7TDMI\u2122 processor). Writing to PC (e.g., using data transfer/processing instructions) causes a branch operation. Program status registers The Program Status Register is composed of three status registers: Application PSR (APSR) Execution PSR (EPSR) Interrupt PSR (IPSR) These three registers can be accessed as one combined register, referred to as xPSR in some documentation. In ARM\u00ae assembler, when accessing xPSR (Figure 2.3), the symbol PSR is used. Figure 2.3 Combined xPSR The main 4 status bits of interest are: N : Negative flag Z : Zero flag C : Carry (or NOT borrow) flag V : Overflow flag Reference: Yiu, Ch 4 Assembly Instruction Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual Preparation Lab Preparation Question Answer the following questions on Blackboard once the pre-load quiz becomes available 24 hours before the lab session. Referring to the Cortex-M4 technical manual, how many \"Add\" instructions are there and what are they? Write the instruction that loads the address 0x20000010 into register R0. What is the difference between mov, movw, and movt? Refer to the Cortex-M4 manual, define the following four flags of the Program Status Register and how they will be triggered. N: Negative flag Z: Zero flag C: Carry (or NOT borrow) flag V: Overflow flag Procedures Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. Figure 2.3 New Project In the new project configuration, rename the project then leave all other settings as default. Even though we will be programming in assembly language, we'll still like the IDE to use the SDK template to set up the Freedom board so we don't have to bother with the startup configuration (ie. vector table, ISR, stack address, heap address, etc.) Figure 2.4 New Project Name and Settings Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". Figure 2.5 Rename File Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .global main @ declare main as a global variable .type main, %function @ set main to function type main: @ start of main code with an label ldr r0, =0x20000000 @ load 0x20000000 to R0 mov r1, #8 @ move #8 to R1 add r1, r1, #4 @ add #4 to R1 and write to R1 str r1, [r0] @ store value of R1 to address of R0 stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Your code should now look like this. Figure 2.6 Assembly Code Build and run the code using the debug option. Open both the register view and the memory view to address 0x20000000. Figure 2.7 Register and Memory View Step through the code and pay attention to the changes in the registers and memory. Step until you reach the stop label. Your code should not go any further as it will loop between the nop and b instructions. You can also see the program counter jumping back and forward. Answer question 1 of the post-lab. Next, re-run the code but this time, expand the program status register and notice the flags that change especially after an arithmetics instruction. Figure 2.8 Program Status Register Flags Now, to test your skills, write an assembly code that performs Exercise #2 from the module 3 lecture: Perform the calculation: A + B \u2013 C = D. Use 0x20000010 for variable A = first 2 digits of your student # Use 0x20000014 for variable B = next 2 digits of your student # Use 0x20000018 for variable C = next 2 digits of your student # Use 0x2000001C for variable D = 0 Is your answer correct? Copy your code into the post-lab assignment on Blackboard. Complete Question 3 of the post-lab. Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. In step 6 of the first program example, what value got saved to which address at the end of the str instruction? Paste your assembly code in step 8 here. Fill in the blank as necessary and run the following code. Comment out with \"@\" any line that becomes invalid and explain why. Put your answer into your code and copy it into Blackboard for submission. mov R2, # @ use the first 2 digits of your student ID mov R3, # @ use the last 2 digits of your student ID @Other examples to move immediate values mov R5, #0x1234 @ R5 = ? movt R5, #0x8765 @ R5 = ? movt R5, #0x5678 @ R5 = ? movw R6, #0x12345678 @ R6 = ? movw R5, #0x5678 @ R6 = ? ldr R7, =0x87654321 @ R7 = ? add R1, R2, R3 @ R1 = ? movt R3, #0xFFFF @ R3 = ? adds R1, R2, R3 @ R1 = ? @ What are the PSR (N, Z, C, V) flags now? subs R1, R2, R3 @ R1 = ? @ How are the PSR flags affected? mov R4, #0xFFFFFFFF @ R4 = ? add R1, R2, R4 @ R1 = ? @ How are the PSR flags affected? adds R1, R2, R4 @ R1 = ? @ What happened to the PSR flags now? mov R2, #0x00000002 @ R2 = ? adds R1, R2, R4 @ R1 = ? @ again, what happened to the PSR flags? mov R2, #0x00000001 @ R2 = ? mov R3, #0x00000002 @ R3 = ? adds R1, R2, R3 @ R1 = ? @ Add some small numbers again @ and check the PSR flags again, what happened? @ Add numbers that will create an overflow mov R2, #0x7FFFFFFF @ R2 = ? mov R3, #0x7FFFFFFF @ R3 = ? adds R1, R2, R3 @ R1 = ? @ Check and see what happened to the PSR flags? Reference [1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Lab 2 : Writing in Assembly"},{"location":"seh500/lab2/#lab-2-writing-in-assembly","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 2 : Writing in Assembly"},{"location":"seh500/lab2/#introduction","text":"","title":"Introduction"},{"location":"seh500/lab2/#cortex-m4-memory-map","text":"The 4GB address space of the Cortex\u00ae-M processors is partitioned into a number of memory regions (Figure 2.1). The partitioning is based on typical usages so that different areas are designed to be used primarily for: Program code accesses (e.g., CODE region) Data accesses (e.g., SRAM region) Peripherals (e.g., Peripheral region) Processor\u2019s internal control and debug components (e.g., Private Peripheral Bus) The architecture also allows high flexibility to allow memory regions to be used for other purposes. For example, programs can be executed from the CODE as well as the SRAM region, and a microcontroller can also integrate SRAM blocks in CODE region. Figure 2.1 Memory map In practice, many microcontroller devices only use a small portion of each region for program flash, SRAM, and peripherals. Some of the regions can be unused. Different microcontrollers have different memory sizes and peripheral address locations. This information is usually outlined in user manuals or datasheets from microcontroller vendors.","title":"Cortex-M4 Memory Map"},{"location":"seh500/lab2/#cortex-m4-registers","text":"The register bank in the Cortex-M3 and Cortex-M4 processors has 16 registers. Thirteen of them are general-purpose 32-bit registers, and the other three have special uses, as can be seen in Figure 2.2. Figure 2.2 Registers in the register bank","title":"Cortex-M4 Registers"},{"location":"seh500/lab2/#r0-r12","text":"Registers R0 to R12 are general-purpose registers. The first eight (R0 \u2013 R7) are also called low registers. Due to the limited available space in the instruction set, many 16-bit instructions can only access the low registers. The high registers (R8 \u2013 R12) can be used with 32-bit instructions, and a few with 16-bit instructions, like MOV (move). The initial values of R0 to R12 are undefined.","title":"R0 \u2013 R12"},{"location":"seh500/lab2/#r13-stack-pointer-sp","text":"R13 is the Stack Pointer. It is used for accessing the stack memory via PUSH and POP operations.","title":"R13, stack pointer (SP)"},{"location":"seh500/lab2/#r14-link-register-lr","text":"R14 is also called the Link Register (LR). This is used for holding the return address when calling a function or subroutine. At the end of the function or subroutine, the program control can return to the calling program and resume by loading the value of LR into the Program Counter (PC). When a function or subroutine call is made, the value of LR is updated automatically. If a function needs to call another function or subroutine, it needs to save the value of LR in the stack first. Otherwise, the current value in LR will be lost when the function call is made.","title":"R14, link register (LR)"},{"location":"seh500/lab2/#r15-program-counter-pc","text":"R15 is the Program Counter (PC). It is readable and writeable: a read returns the current instruction address plus 4 (this is due to the pipeline nature of the design, and compatibility requirement with the ARM7TDMI\u2122 processor). Writing to PC (e.g., using data transfer/processing instructions) causes a branch operation.","title":"R15, program counter (PC)"},{"location":"seh500/lab2/#program-status-registers","text":"The Program Status Register is composed of three status registers: Application PSR (APSR) Execution PSR (EPSR) Interrupt PSR (IPSR) These three registers can be accessed as one combined register, referred to as xPSR in some documentation. In ARM\u00ae assembler, when accessing xPSR (Figure 2.3), the symbol PSR is used. Figure 2.3 Combined xPSR The main 4 status bits of interest are: N : Negative flag Z : Zero flag C : Carry (or NOT borrow) flag V : Overflow flag Reference: Yiu, Ch 4","title":"Program status registers"},{"location":"seh500/lab2/#assembly-instruction","text":"Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual","title":"Assembly Instruction"},{"location":"seh500/lab2/#preparation","text":"","title":"Preparation"},{"location":"seh500/lab2/#lab-preparation-question","text":"Answer the following questions on Blackboard once the pre-load quiz becomes available 24 hours before the lab session. Referring to the Cortex-M4 technical manual, how many \"Add\" instructions are there and what are they? Write the instruction that loads the address 0x20000010 into register R0. What is the difference between mov, movw, and movt? Refer to the Cortex-M4 manual, define the following four flags of the Program Status Register and how they will be triggered. N: Negative flag Z: Zero flag C: Carry (or NOT borrow) flag V: Overflow flag","title":"Lab Preparation Question"},{"location":"seh500/lab2/#procedures","text":"Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. Figure 2.3 New Project In the new project configuration, rename the project then leave all other settings as default. Even though we will be programming in assembly language, we'll still like the IDE to use the SDK template to set up the Freedom board so we don't have to bother with the startup configuration (ie. vector table, ISR, stack address, heap address, etc.) Figure 2.4 New Project Name and Settings Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". Figure 2.5 Rename File Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .global main @ declare main as a global variable .type main, %function @ set main to function type main: @ start of main code with an label ldr r0, =0x20000000 @ load 0x20000000 to R0 mov r1, #8 @ move #8 to R1 add r1, r1, #4 @ add #4 to R1 and write to R1 str r1, [r0] @ store value of R1 to address of R0 stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Your code should now look like this. Figure 2.6 Assembly Code Build and run the code using the debug option. Open both the register view and the memory view to address 0x20000000. Figure 2.7 Register and Memory View Step through the code and pay attention to the changes in the registers and memory. Step until you reach the stop label. Your code should not go any further as it will loop between the nop and b instructions. You can also see the program counter jumping back and forward. Answer question 1 of the post-lab. Next, re-run the code but this time, expand the program status register and notice the flags that change especially after an arithmetics instruction. Figure 2.8 Program Status Register Flags Now, to test your skills, write an assembly code that performs Exercise #2 from the module 3 lecture: Perform the calculation: A + B \u2013 C = D. Use 0x20000010 for variable A = first 2 digits of your student # Use 0x20000014 for variable B = next 2 digits of your student # Use 0x20000018 for variable C = next 2 digits of your student # Use 0x2000001C for variable D = 0 Is your answer correct? Copy your code into the post-lab assignment on Blackboard. Complete Question 3 of the post-lab.","title":"Procedures"},{"location":"seh500/lab2/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. In step 6 of the first program example, what value got saved to which address at the end of the str instruction? Paste your assembly code in step 8 here. Fill in the blank as necessary and run the following code. Comment out with \"@\" any line that becomes invalid and explain why. Put your answer into your code and copy it into Blackboard for submission. mov R2, # @ use the first 2 digits of your student ID mov R3, # @ use the last 2 digits of your student ID @Other examples to move immediate values mov R5, #0x1234 @ R5 = ? movt R5, #0x8765 @ R5 = ? movt R5, #0x5678 @ R5 = ? movw R6, #0x12345678 @ R6 = ? movw R5, #0x5678 @ R6 = ? ldr R7, =0x87654321 @ R7 = ? add R1, R2, R3 @ R1 = ? movt R3, #0xFFFF @ R3 = ? adds R1, R2, R3 @ R1 = ? @ What are the PSR (N, Z, C, V) flags now? subs R1, R2, R3 @ R1 = ? @ How are the PSR flags affected? mov R4, #0xFFFFFFFF @ R4 = ? add R1, R2, R4 @ R1 = ? @ How are the PSR flags affected? adds R1, R2, R4 @ R1 = ? @ What happened to the PSR flags now? mov R2, #0x00000002 @ R2 = ? adds R1, R2, R4 @ R1 = ? @ again, what happened to the PSR flags? mov R2, #0x00000001 @ R2 = ? mov R3, #0x00000002 @ R3 = ? adds R1, R2, R3 @ R1 = ? @ Add some small numbers again @ and check the PSR flags again, what happened? @ Add numbers that will create an overflow mov R2, #0x7FFFFFFF @ R2 = ? mov R3, #0x7FFFFFFF @ R3 = ? adds R1, R2, R3 @ R1 = ? @ Check and see what happened to the PSR flags?","title":"Post-Lab Questions"},{"location":"seh500/lab2/#reference","text":"[1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Reference"},{"location":"seh500/lab3/","text":"Lab 3 : Branching in Assembly Seneca College SEH500 Microprocessors and Computer Architecture Introduction Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual As you've seen in the previous lab, the ARM processor has a Program Status Register with 4 flags that might get set or clear depending on the previous ALU operation. N = 1, if the result was negative Z = 1, if the result was zero C = 1, if the result had a carry-out V = 1, if the result was an overflow These flags can then be used for decision-making within the program. Below are instructions that might set or clear the status flag. Arithmetic Instructions Instruction Mnemonic Meaning Addition ADD R0, R1, R2 R0 = R1 + R2 Addition ADDS R0, R1, R2 R0 = R1 + R2, and FLAGs are updated Subtraction SUB R1, R2, R3 R1 = R2 - R3 Subtraction SUBS R1, R2, R3 R1 = R2 - R3, and FLAGs are updated Subtraction SUBS R7, R6, #20 R7 = R6 - 20, Sets the flags on the result Reverse Subtraction RSB R4, R4, #120 R4 = 120 - R4 Multiply MUL R0, R1, R2 R0 = R1 * R2 Division SDIV R0, R2, R4 Signed divide, R0 = R2/R4 Dividion UDIV R8, R8, R1 Unsigned divide, R8 = R8/R1 Examples of Move Instructions Mnemonic Meaning MOV R1, #0xFA05 Write value of 0xFA05 to R1, flags are not updated MOVS R11, #0x000B Write value of 0x000B to R11, flags get updated MOVS R10, R12 Write value in R12 to R10, flags get updated MOV R3, #23 Write value of 23 to R3 MOV R8, SP Write value of stack pointer to R8 MVNS R2, #0xF Write value of 0xFFFFFFF0 (bitwise inverse of 0xF), to the R2 and update flags. Logical Operation Instructions Mnemonic Meaning AND R9, R2, R1 R9 = R2 AND R1 AND R9, R2, #0xFF00 R9 = R2 AND #0xFF00 ORR R9, R2, R1 R9 = R2 OR R1 ORR R9, R2, #0xFF00 ORREQ R2, R0, R5 ANDS R9, R8, #0x19 EOR R7, R11, R10 R7 = R11 XOR R10 EORS R7, R11, #0x18181818 BIC R0, R1, #0xab R0 = R1 AND (NOT(#0xab)) ORN R7, R11, R14, ROR #4 R7 = R11 OR (NOT(R14 ROR #4)) ORNS R7, R11, R14, ROR #2 update the flags Shift Instructions Mnemonic Meaning LSL R4, R5, #2 Logical shift left by 2 bits LSR R4, R5, #6 Logical shift right by 6 bits LSLS R1, R2, #3 Logical shift left by 3 bits with flag update ROR R4, R5, R6 Rotate right by the value in the bottom byte of R6 RRX R4, R5 Rotate right with extend (one bit only). Branching Instructions Mnemonic Meaning B label Branch B{cond} label Branch with condition BL label Branch with Link BL{cond} label Branch with Link with condition BX Rm Branch to register value BX{cond} Rm Branch to register value with condition BLX Rm Branch with Link to register value BLX{cond} Rm Branch with Link to register value with condition See below for conditions that are set by a compare, usually CMP, instruction. The CMP Rm, Rn instruction operates Rm-Rn for the sole purpose of setting the condition flags. Branching Conditions The APSR contains the following condition flags: N : Set to 1 when the result of the operation was negative, cleared to 0 otherwise. Z : Set to 1 when the result of the operation was zero, cleared to 0 otherwise. C : Set to 1 when the operation resulted in a carry, cleared to 0 otherwise. V : Set to 1 when the operation caused overflow, cleared to 0 otherwise. Suffix Flags Meaning EQ Z = 1 Equal NE Z = 0 Not equal CS or HS C = 1 Higher or same, unsigned CC or LO C = 0 Lower, unsigned MI N = 1 Negative PL N = 0 Positive or zero VS V = 1 Overflow VC V = 0 No overflow HI C = 1 and Z = 0 Higher, unsigned LS C = 0 or Z = 1 Lower or same, unsigned GE N = V Greater than or equal, signed LT N != V Less than, signed GT Z = 0 and N = V Greater than, signed LE Z = 1 and N != V Less than or equal, signed AL Can have any value Always. This is the default when no suffix is specified. Preparation Lab Preparation Question Read over the lab and write a pseudocode for the post-lab exercise 3. Copy your pseudocode into Blackboard. Procedures Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, rename the project then leave all other settings as default. Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .global main @ declare main as a global variable .type main, %function @ set main to function type main: @ start of main code with a label mov r0, #7 @ x = 7 mul r1, r0, r0 @ r1 = x^2 @ record register value mov r4, #5 mul r1, r1, r4 @ r1 = 5x^2 @ record register value mov r5, #6 mul r2, r0, r5 @ r2 = 6x @ record register value sub r3, r1, r2 @ r3 = 5x^2 - 6x @ record register value add r3, r3, #8 @ r3 = 5x^2 - 6x + 8 @ record register value stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register then record the PSR flags after each arithmetic instruction and submit it as part of the post lab. Another example with variables and shifting. Although variables cannot be declared in the high-level way of programming, it is possible to tell the assembler to automatically assign an address with a label and always reference it using the same label. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sum: .word 0 @ declare a label for data of word size num: .word 5 @ sum and num with value of 0 and 5 .text @ put code in the text section .global main @ declare main as a global variable .type main, %function @ set main to function type main: @ start of main code with a label ldr r1, =num @ Load count into R1 ldr r1, [r1] @ Load count into R1 mov r0, #0 @ Clear accumulator R0 loop: add r0, r0, r1 @ Add number into R0 subs r1, r1, #1 @ Decrement loop counter R1 bgt loop @ Branch back if not done ldr r3, =sum @ Load address of SUM to R3 str r0, [r3] @ Store SUM ldr r4, [r3] stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention the what is happening in each register then record the PSR flags after each arthemetic instruction and submit it as part of the post lab. Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Execute the code from step 4 then record the PSR flags. Copy and paste your code with PSR flags into Blackboard. Execute the code from step 6 then record the PSR flags. Copy and paste your code with PSR flags into Blackboard. Write a program that converts Celsius to Fahrenheit or from Fahrenheit to Celsius depending on the input. If the input is above 32, it will assume the value is Fahrenheit and convert it to Celsius. If not, it will assume the value is Celsius and convert it to Fahrenheit. The input will go into R0 and it will be the last two digits of your student number. Do NOT modify R0 afterward. Your code must be written in assembly with the output saved in a variable (labelled space in memory). You can use the following as your conversion equation. C = 5 * (F - 32) / 9 F = (9 * C / 5) + 32 For the code above, at the end of execution, take a screenshot of your register bank, and your memory space showing the variable then copy your code into Blackboard. Reference [1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Lab 3 : Branching in Assembly"},{"location":"seh500/lab3/#lab-3-branching-in-assembly","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 3 : Branching in Assembly"},{"location":"seh500/lab3/#introduction","text":"Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual As you've seen in the previous lab, the ARM processor has a Program Status Register with 4 flags that might get set or clear depending on the previous ALU operation. N = 1, if the result was negative Z = 1, if the result was zero C = 1, if the result had a carry-out V = 1, if the result was an overflow These flags can then be used for decision-making within the program. Below are instructions that might set or clear the status flag.","title":"Introduction"},{"location":"seh500/lab3/#arithmetic-instructions","text":"Instruction Mnemonic Meaning Addition ADD R0, R1, R2 R0 = R1 + R2 Addition ADDS R0, R1, R2 R0 = R1 + R2, and FLAGs are updated Subtraction SUB R1, R2, R3 R1 = R2 - R3 Subtraction SUBS R1, R2, R3 R1 = R2 - R3, and FLAGs are updated Subtraction SUBS R7, R6, #20 R7 = R6 - 20, Sets the flags on the result Reverse Subtraction RSB R4, R4, #120 R4 = 120 - R4 Multiply MUL R0, R1, R2 R0 = R1 * R2 Division SDIV R0, R2, R4 Signed divide, R0 = R2/R4 Dividion UDIV R8, R8, R1 Unsigned divide, R8 = R8/R1","title":"Arithmetic Instructions"},{"location":"seh500/lab3/#examples-of-move-instructions","text":"Mnemonic Meaning MOV R1, #0xFA05 Write value of 0xFA05 to R1, flags are not updated MOVS R11, #0x000B Write value of 0x000B to R11, flags get updated MOVS R10, R12 Write value in R12 to R10, flags get updated MOV R3, #23 Write value of 23 to R3 MOV R8, SP Write value of stack pointer to R8 MVNS R2, #0xF Write value of 0xFFFFFFF0 (bitwise inverse of 0xF), to the R2 and update flags.","title":"Examples of Move Instructions"},{"location":"seh500/lab3/#logical-operation-instructions","text":"Mnemonic Meaning AND R9, R2, R1 R9 = R2 AND R1 AND R9, R2, #0xFF00 R9 = R2 AND #0xFF00 ORR R9, R2, R1 R9 = R2 OR R1 ORR R9, R2, #0xFF00 ORREQ R2, R0, R5 ANDS R9, R8, #0x19 EOR R7, R11, R10 R7 = R11 XOR R10 EORS R7, R11, #0x18181818 BIC R0, R1, #0xab R0 = R1 AND (NOT(#0xab)) ORN R7, R11, R14, ROR #4 R7 = R11 OR (NOT(R14 ROR #4)) ORNS R7, R11, R14, ROR #2 update the flags","title":"Logical Operation Instructions"},{"location":"seh500/lab3/#shift-instructions","text":"Mnemonic Meaning LSL R4, R5, #2 Logical shift left by 2 bits LSR R4, R5, #6 Logical shift right by 6 bits LSLS R1, R2, #3 Logical shift left by 3 bits with flag update ROR R4, R5, R6 Rotate right by the value in the bottom byte of R6 RRX R4, R5 Rotate right with extend (one bit only).","title":"Shift Instructions"},{"location":"seh500/lab3/#branching-instructions","text":"Mnemonic Meaning B label Branch B{cond} label Branch with condition BL label Branch with Link BL{cond} label Branch with Link with condition BX Rm Branch to register value BX{cond} Rm Branch to register value with condition BLX Rm Branch with Link to register value BLX{cond} Rm Branch with Link to register value with condition See below for conditions that are set by a compare, usually CMP, instruction. The CMP Rm, Rn instruction operates Rm-Rn for the sole purpose of setting the condition flags.","title":"Branching Instructions"},{"location":"seh500/lab3/#branching-conditions","text":"The APSR contains the following condition flags: N : Set to 1 when the result of the operation was negative, cleared to 0 otherwise. Z : Set to 1 when the result of the operation was zero, cleared to 0 otherwise. C : Set to 1 when the operation resulted in a carry, cleared to 0 otherwise. V : Set to 1 when the operation caused overflow, cleared to 0 otherwise. Suffix Flags Meaning EQ Z = 1 Equal NE Z = 0 Not equal CS or HS C = 1 Higher or same, unsigned CC or LO C = 0 Lower, unsigned MI N = 1 Negative PL N = 0 Positive or zero VS V = 1 Overflow VC V = 0 No overflow HI C = 1 and Z = 0 Higher, unsigned LS C = 0 or Z = 1 Lower or same, unsigned GE N = V Greater than or equal, signed LT N != V Less than, signed GT Z = 0 and N = V Greater than, signed LE Z = 1 and N != V Less than or equal, signed AL Can have any value Always. This is the default when no suffix is specified.","title":"Branching Conditions"},{"location":"seh500/lab3/#preparation","text":"","title":"Preparation"},{"location":"seh500/lab3/#lab-preparation-question","text":"Read over the lab and write a pseudocode for the post-lab exercise 3. Copy your pseudocode into Blackboard.","title":"Lab Preparation Question"},{"location":"seh500/lab3/#procedures","text":"Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, rename the project then leave all other settings as default. Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .global main @ declare main as a global variable .type main, %function @ set main to function type main: @ start of main code with a label mov r0, #7 @ x = 7 mul r1, r0, r0 @ r1 = x^2 @ record register value mov r4, #5 mul r1, r1, r4 @ r1 = 5x^2 @ record register value mov r5, #6 mul r2, r0, r5 @ r2 = 6x @ record register value sub r3, r1, r2 @ r3 = 5x^2 - 6x @ record register value add r3, r3, #8 @ r3 = 5x^2 - 6x + 8 @ record register value stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register then record the PSR flags after each arithmetic instruction and submit it as part of the post lab. Another example with variables and shifting. Although variables cannot be declared in the high-level way of programming, it is possible to tell the assembler to automatically assign an address with a label and always reference it using the same label. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sum: .word 0 @ declare a label for data of word size num: .word 5 @ sum and num with value of 0 and 5 .text @ put code in the text section .global main @ declare main as a global variable .type main, %function @ set main to function type main: @ start of main code with a label ldr r1, =num @ Load count into R1 ldr r1, [r1] @ Load count into R1 mov r0, #0 @ Clear accumulator R0 loop: add r0, r0, r1 @ Add number into R0 subs r1, r1, #1 @ Decrement loop counter R1 bgt loop @ Branch back if not done ldr r3, =sum @ Load address of SUM to R3 str r0, [r3] @ Store SUM ldr r4, [r3] stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention the what is happening in each register then record the PSR flags after each arthemetic instruction and submit it as part of the post lab.","title":"Procedures"},{"location":"seh500/lab3/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Execute the code from step 4 then record the PSR flags. Copy and paste your code with PSR flags into Blackboard. Execute the code from step 6 then record the PSR flags. Copy and paste your code with PSR flags into Blackboard. Write a program that converts Celsius to Fahrenheit or from Fahrenheit to Celsius depending on the input. If the input is above 32, it will assume the value is Fahrenheit and convert it to Celsius. If not, it will assume the value is Celsius and convert it to Fahrenheit. The input will go into R0 and it will be the last two digits of your student number. Do NOT modify R0 afterward. Your code must be written in assembly with the output saved in a variable (labelled space in memory). You can use the following as your conversion equation. C = 5 * (F - 32) / 9 F = (9 * C / 5) + 32 For the code above, at the end of execution, take a screenshot of your register bank, and your memory space showing the variable then copy your code into Blackboard.","title":"Post-Lab Questions"},{"location":"seh500/lab3/#reference","text":"[1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Reference"},{"location":"seh500/lab4/","text":"Lab 4 : More Branching, Array and String in Assembly Seneca College SEH500 Microprocessors and Computer Architecture Introduction Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual In the previous lab, we explored how to use the program status flags and how to perform branching. In this lab, we'll further explore branching and variables in the form of arrays and strings. Review of Branching Instructions Mnemonic Meaning B label Branch B{cond} label Branch with condition BL label Branch with Link BL{cond} label Branch with Link with condition BX Rm Branch to register value BX{cond} Rm Branch to register value with condition BLX Rm Branch with Link to register value BLX{cond} Rm Branch with Link to register value with condition See below for conditions that are set by a compare, usually CMP, instruction. The CMP Rm, Rn instruction operates Rm-Rn for the sole purpose of setting the condition flags. Review of Branching Conditions The APSR contains the following condition flags: N : Set to 1 when the result of the operation was negative, cleared to 0 otherwise. Z : Set to 1 when the result of the operation was zero, cleared to 0 otherwise. C : Set to 1 when the operation resulted in a carry, cleared to 0 otherwise. V : Set to 1 when the operation caused overflow, cleared to 0 otherwise. | Suffix | Flags | Meaning |f |---|---|---| | EQ | Z = 1 | Equal | | NE | Z = 0 | Not equal | | CS or HS | C = 1 | Higher or same, unsigned, >= | | CC or LO | C = 0 | Lower, unsigned, < | | MI | N = 1 | Negative | | PL | N = 0 | Positive or zero | VS | V = 1 | Overflow | | VC | V = 0 | No overflow | | HI | C = 1 and Z = 0 | Higher, unsigned, > | | LS | C = 0 or Z = 1 | Lower or same, unsigned, <= | | GE | N = V | Greater than or equal, signed, >= | | LT | N != V | Less than, signed, < | | GT | Z = 0 and N = V | Greater than, signed, > | | LE | Z = 1 and N != V | Less than or equal, signed, <= | | AL | Can have any value | Always. This is the default when no suffix is specified. | Examples of Compare Instructions Mnemonic Meaning CBZ R5, label Compare and branch to label if R5 is zero CBNZ R0, label Compare and branch to label if R0 is not zero CMP R2, R9 Compare R2 - R9, update the N, Z, C and V flags Same as SUBS except the result is discarded CMN R0, #64 Compare (negative) R0 + #64, update the N, Z, C and V flags Same as ADDS except the result is discarded Example of Branching Instructions Following a compare instruction. Instruction Action B label Branch to label unconditionally BEQ label Conditionally branch to label, when Z = 1 BNE label branch to label when Z = 0 BMI label branch to label when N = 1 BPL label branch to label when N = 0 BLT label Conditionally branch to label, when N is set and V is clear or N is clear and V is set i.e. N != V BLE label Conditionally branch to label, when less than or equal, Z is set or N is set and V is clear or N is clear and V is set i.e. Z = 1 or N != V BGT label Conditionally branch to label, when Z is clear and either N is set and V is set or N is clear and V is clear i.e. Z = 0 and N == V BGE label Conditionally branch to label, when greater than or equal to zero, Z is set or N is set and V is clear or N is clear and V is set i.e. Z = 1 or N == V BL label Branch with link (Call) to label, with return address stored in LR (register R14) BX LR Return from function call, loading LR into PC BXNE R0 Conditionally branch to address stored in R0 BLX R0 Branch with link (Call) to an address stored in R0, with return address stored in LR (register R14) Register Addressing Mode In addition to the basic LDR and STR, there are also a few other different ways to specify the address for load and store instructions. Name Examples Meaning Register to register Register direct MOV R0, R1 Absolute Direct LDR R0, =address Literal Immediate MOV R0, #15 ADD R1, R2, #12 Indexed, base Register indirect LDR R0, [R1] Load R0 with the word pointed by R1 Pre-indexed, base with displacement Register indirect with offset LDR R0, [R1, #4] Load R0 with the word pointed by R1+4 Pre-indexed, autoindexing Register indirect pre-incrementing LDR R0, [R1, #4]! Load R0 with the word pointed by R1+4 then add 4 to R1 Post-indexing, autoindexed Register indirect post-increment LDR R0, [R1], #4 Load R0 with the word pointed by R1 then add 4 to R1 Double Reg indirect Register indirect register indexed LDR R0, [R1, R2] Load R0 with the word pointed by R1+R2 Program counter relative LDR R0, [PC, #offset] Load R0 with the word pointed by PC+offset Preparation Lab Preparation Question Read over the lab and write a pseudocode for the post-lab exercise 4. Copy your pseudocode into Blackboard. Procedures Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, rename the project then leave all other settings as default. Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". In the previous lab, we also explored the idea of using a label to reference address in memory used in the same manner as variables in high-level programming language, this time, we'll explore the use of string. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section myString: .string \"Hello world!\" @ declare a label for a string with a null terminator .text .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r0, =myString @ Load the address of myString into R0 @ R0 = ? mov r1, #0 @ Initialize the counter @ R1 = ? loopCount: ldrb r2, [r0] @ Load the character from the address in R0 cmp r2, #0 @ check for null terminator @ R2 = ? During the first loop @ R2 = ? At the end of the program @ Which ASCII characters are they? beq countDone @ If it is zero...null terminated... @ We are done with the string. @ The length is in R1. add r0, #1 @ Otherwise, increment the @ address to the next character @ R0 = ? During the first loop @ R0 = ? At the end of the program add r1, #1 @ increment the counter for length @ R1 = ? During the first loop @ R1 = ? At the end of the program @ What is the length of the string? b loopCount countDone: stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the string is saved then take a screenshot showing the memory address along with the value and ASCII character saved in it. Submit your code and screenshot it as part of the post-lab. In the previous code, we explored the idea of using string. In this code, we'll take a look at the use of an array. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sump: .word sum @ a pointer for sum pointer: .word num1 @ a pointer for num1 n: .word 5 @ variable n, word size, value 5 num1: .word 3, -7, 2, -2, 10 @ array num1 with 5 element, word size sum: .word 0 @ variable sum, word size, value 0 .text .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r1, =n ldr r1, [r1] @ load size of array, R1 = ? @ a counter for how many elements are left to process ldr r2, =pointer ldr r2, [r2] @ load base pointer of array, R2 = ? mov r0, #0 @ initialize counter, R0 = ? loop: ldr r3, [r2], #4 @ load value from array @ R3 = ? for the first loop @ R3 = ? for the second loop @ increment array pointer to next word (index) add r0, r0, r3 @ add value from array to counter @ R0 = ? for the first loop @ R0 = ? for the second loop subs r1, r1, #1 @ decrement work counter @ R1 = ? for the first loop @ R1 = ? for the second loop bgt loop @ keep looping until the counter is zero ldr r4, =sump ldr r4, [r4] @ get memory address to store sum str r0, [r4] @ store answer ldr r6, [r4] @ Check the value in the sum stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the array is saved then take a screenshot showing the memory address along with the value and highlight the negative. Submit your code and screenshot it as part of the post-lab. Lastly, the code from the first example can also be written as follows using an array instead of a string. Also, a different comparison statement is used. .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section myString: .ascii \"Hello world!\\0\" @ declare a label for a string with a null terminator .text .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r0, =myString @ Load the address of myString into R0 mov r1, #0 @ Initialize the counter loopCount: ldrb r2, [r0], #1 @ Load the character from the address in R0 @ and update the pointer R0 cbz r2, countDone @ check for null terminator in one line @ If it is zero...null terminated... @ We are done with the string. @ The length is in R1. add r1, #1 @ increment the counter for length b loopCount countDone: stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Compare the third example code with the first example code and find the difference between then explain which line got added, removed, changed and why. Also, discuss its effect on the code then put your answer in the post-lab exercise. Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Execute the code from step 4 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Execute the code from step 6 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Execute the code from step 8 then compare the difference between them. Put your answers into Blackboard. Write a program in assembly language that counts how many vowels and non-vowels are in \"SEH500 is very cool! (your name here)\" (REPLACE (your name here) with your name). Hint: put your string into memory using the .string directive use R0 to hold the address for the string or character use R1 as the counter for vowel use R2 as the counter for non-vowel For the code above, at the end of execution, take a screenshot of your register bank, and your memory space showing the string then copy your code into Blackboard. Reference [1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Lab 4 : More Branching, Array and String in Assembly"},{"location":"seh500/lab4/#lab-4-more-branching-array-and-string-in-assembly","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 4 : More Branching, Array and String in Assembly"},{"location":"seh500/lab4/#introduction","text":"Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual In the previous lab, we explored how to use the program status flags and how to perform branching. In this lab, we'll further explore branching and variables in the form of arrays and strings.","title":"Introduction"},{"location":"seh500/lab4/#review-of-branching-instructions","text":"Mnemonic Meaning B label Branch B{cond} label Branch with condition BL label Branch with Link BL{cond} label Branch with Link with condition BX Rm Branch to register value BX{cond} Rm Branch to register value with condition BLX Rm Branch with Link to register value BLX{cond} Rm Branch with Link to register value with condition See below for conditions that are set by a compare, usually CMP, instruction. The CMP Rm, Rn instruction operates Rm-Rn for the sole purpose of setting the condition flags.","title":"Review of Branching Instructions"},{"location":"seh500/lab4/#review-of-branching-conditions","text":"The APSR contains the following condition flags: N : Set to 1 when the result of the operation was negative, cleared to 0 otherwise. Z : Set to 1 when the result of the operation was zero, cleared to 0 otherwise. C : Set to 1 when the operation resulted in a carry, cleared to 0 otherwise. V : Set to 1 when the operation caused overflow, cleared to 0 otherwise. | Suffix | Flags | Meaning |f |---|---|---| | EQ | Z = 1 | Equal | | NE | Z = 0 | Not equal | | CS or HS | C = 1 | Higher or same, unsigned, >= | | CC or LO | C = 0 | Lower, unsigned, < | | MI | N = 1 | Negative | | PL | N = 0 | Positive or zero | VS | V = 1 | Overflow | | VC | V = 0 | No overflow | | HI | C = 1 and Z = 0 | Higher, unsigned, > | | LS | C = 0 or Z = 1 | Lower or same, unsigned, <= | | GE | N = V | Greater than or equal, signed, >= | | LT | N != V | Less than, signed, < | | GT | Z = 0 and N = V | Greater than, signed, > | | LE | Z = 1 and N != V | Less than or equal, signed, <= | | AL | Can have any value | Always. This is the default when no suffix is specified. |","title":"Review of Branching Conditions"},{"location":"seh500/lab4/#examples-of-compare-instructions","text":"Mnemonic Meaning CBZ R5, label Compare and branch to label if R5 is zero CBNZ R0, label Compare and branch to label if R0 is not zero CMP R2, R9 Compare R2 - R9, update the N, Z, C and V flags Same as SUBS except the result is discarded CMN R0, #64 Compare (negative) R0 + #64, update the N, Z, C and V flags Same as ADDS except the result is discarded","title":"Examples of Compare Instructions"},{"location":"seh500/lab4/#example-of-branching-instructions","text":"Following a compare instruction. Instruction Action B label Branch to label unconditionally BEQ label Conditionally branch to label, when Z = 1 BNE label branch to label when Z = 0 BMI label branch to label when N = 1 BPL label branch to label when N = 0 BLT label Conditionally branch to label, when N is set and V is clear or N is clear and V is set i.e. N != V BLE label Conditionally branch to label, when less than or equal, Z is set or N is set and V is clear or N is clear and V is set i.e. Z = 1 or N != V BGT label Conditionally branch to label, when Z is clear and either N is set and V is set or N is clear and V is clear i.e. Z = 0 and N == V BGE label Conditionally branch to label, when greater than or equal to zero, Z is set or N is set and V is clear or N is clear and V is set i.e. Z = 1 or N == V BL label Branch with link (Call) to label, with return address stored in LR (register R14) BX LR Return from function call, loading LR into PC BXNE R0 Conditionally branch to address stored in R0 BLX R0 Branch with link (Call) to an address stored in R0, with return address stored in LR (register R14)","title":"Example of Branching Instructions"},{"location":"seh500/lab4/#register-addressing-mode","text":"In addition to the basic LDR and STR, there are also a few other different ways to specify the address for load and store instructions. Name Examples Meaning Register to register Register direct MOV R0, R1 Absolute Direct LDR R0, =address Literal Immediate MOV R0, #15 ADD R1, R2, #12 Indexed, base Register indirect LDR R0, [R1] Load R0 with the word pointed by R1 Pre-indexed, base with displacement Register indirect with offset LDR R0, [R1, #4] Load R0 with the word pointed by R1+4 Pre-indexed, autoindexing Register indirect pre-incrementing LDR R0, [R1, #4]! Load R0 with the word pointed by R1+4 then add 4 to R1 Post-indexing, autoindexed Register indirect post-increment LDR R0, [R1], #4 Load R0 with the word pointed by R1 then add 4 to R1 Double Reg indirect Register indirect register indexed LDR R0, [R1, R2] Load R0 with the word pointed by R1+R2 Program counter relative LDR R0, [PC, #offset] Load R0 with the word pointed by PC+offset","title":"Register Addressing Mode"},{"location":"seh500/lab4/#preparation","text":"","title":"Preparation"},{"location":"seh500/lab4/#lab-preparation-question","text":"Read over the lab and write a pseudocode for the post-lab exercise 4. Copy your pseudocode into Blackboard.","title":"Lab Preparation Question"},{"location":"seh500/lab4/#procedures","text":"Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, rename the project then leave all other settings as default. Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". In the previous lab, we also explored the idea of using a label to reference address in memory used in the same manner as variables in high-level programming language, this time, we'll explore the use of string. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section myString: .string \"Hello world!\" @ declare a label for a string with a null terminator .text .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r0, =myString @ Load the address of myString into R0 @ R0 = ? mov r1, #0 @ Initialize the counter @ R1 = ? loopCount: ldrb r2, [r0] @ Load the character from the address in R0 cmp r2, #0 @ check for null terminator @ R2 = ? During the first loop @ R2 = ? At the end of the program @ Which ASCII characters are they? beq countDone @ If it is zero...null terminated... @ We are done with the string. @ The length is in R1. add r0, #1 @ Otherwise, increment the @ address to the next character @ R0 = ? During the first loop @ R0 = ? At the end of the program add r1, #1 @ increment the counter for length @ R1 = ? During the first loop @ R1 = ? At the end of the program @ What is the length of the string? b loopCount countDone: stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the string is saved then take a screenshot showing the memory address along with the value and ASCII character saved in it. Submit your code and screenshot it as part of the post-lab. In the previous code, we explored the idea of using string. In this code, we'll take a look at the use of an array. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sump: .word sum @ a pointer for sum pointer: .word num1 @ a pointer for num1 n: .word 5 @ variable n, word size, value 5 num1: .word 3, -7, 2, -2, 10 @ array num1 with 5 element, word size sum: .word 0 @ variable sum, word size, value 0 .text .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r1, =n ldr r1, [r1] @ load size of array, R1 = ? @ a counter for how many elements are left to process ldr r2, =pointer ldr r2, [r2] @ load base pointer of array, R2 = ? mov r0, #0 @ initialize counter, R0 = ? loop: ldr r3, [r2], #4 @ load value from array @ R3 = ? for the first loop @ R3 = ? for the second loop @ increment array pointer to next word (index) add r0, r0, r3 @ add value from array to counter @ R0 = ? for the first loop @ R0 = ? for the second loop subs r1, r1, #1 @ decrement work counter @ R1 = ? for the first loop @ R1 = ? for the second loop bgt loop @ keep looping until the counter is zero ldr r4, =sump ldr r4, [r4] @ get memory address to store sum str r0, [r4] @ store answer ldr r6, [r4] @ Check the value in the sum stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the array is saved then take a screenshot showing the memory address along with the value and highlight the negative. Submit your code and screenshot it as part of the post-lab. Lastly, the code from the first example can also be written as follows using an array instead of a string. Also, a different comparison statement is used. .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section myString: .ascii \"Hello world!\\0\" @ declare a label for a string with a null terminator .text .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r0, =myString @ Load the address of myString into R0 mov r1, #0 @ Initialize the counter loopCount: ldrb r2, [r0], #1 @ Load the character from the address in R0 @ and update the pointer R0 cbz r2, countDone @ check for null terminator in one line @ If it is zero...null terminated... @ We are done with the string. @ The length is in R1. add r1, #1 @ increment the counter for length b loopCount countDone: stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Compare the third example code with the first example code and find the difference between then explain which line got added, removed, changed and why. Also, discuss its effect on the code then put your answer in the post-lab exercise.","title":"Procedures"},{"location":"seh500/lab4/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Execute the code from step 4 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Execute the code from step 6 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Execute the code from step 8 then compare the difference between them. Put your answers into Blackboard. Write a program in assembly language that counts how many vowels and non-vowels are in \"SEH500 is very cool! (your name here)\" (REPLACE (your name here) with your name). Hint: put your string into memory using the .string directive use R0 to hold the address for the string or character use R1 as the counter for vowel use R2 as the counter for non-vowel For the code above, at the end of execution, take a screenshot of your register bank, and your memory space showing the string then copy your code into Blackboard.","title":"Post-Lab Questions"},{"location":"seh500/lab4/#reference","text":"[1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Reference"},{"location":"seh500/lab5/","text":"Lab 5 : More Branching, Subroutine, and Stack Seneca College SEH500 Microprocessors and Computer Architecture Introduction Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual In the previous lab, we explored how to use basic branching to control the flow of a program. In this lab, we'll further explore branching and use the stack point to create subroutine and function call procedure. Review of Branching Instructions with Link Mnemonic Meaning B label Branch B{cond} label Branch with condition BL label Branch with Link BL{cond} label Branch with Link with condition BX Rm Branch to register value BX{cond} Rm Branch to register value with condition BLX Rm Branch with Link to register value BLX{cond} Rm Branch with Link to register value with condition See below for conditions that are set by a compare, usually CMP, instruction. The CMP Rm, Rn instruction operates Rm-Rn for the sole purpose of setting the condition flags. Review of Branching Conditions Suffix Flags Meaning EQ Z = 1 Equal NE Z = 0 Not equal CS or HS C = 1 Higher or same, unsigned, >= CC or LO C = 0 Lower, unsigned, < MI N = 1 Negative PL N = 0 Positive or zero VS V = 1 Overflow VC V = 0 No overflow HI C = 1 and Z = 0 Higher, unsigned, > LS C = 0 or Z = 1 Lower or same, unsigned, <= GE N = V Greater than or equal, signed, >= LT N != V Less than, signed, < GT Z = 0 and N = V Greater than, signed, > LE Z = 1 and N != V Less than or equal, signed, <= AL Can have any value Always. This is the default when no suffix is specified. IT (If-Then) Block The IT (If-Then) block is a feature with ARM processor that validates the conditions specified in the IT instructions against the conditions specified in the following instructions. In anorder word, an IT help ensure there are no semantic error during assembly programming. An IT block have the following syntax: IT{x{y{z}}} {cond} where: x - specifies the condition switch for the second instruction in the IT block. y - specifies the condition switch for the third instruction in the IT block. z - specifies the condition switch for the fourth instruction in the IT block. cond - specifies the condition for the first instruction in the IT block. The condition switch for the second, third and fourth instruction in the IT block can be either: T - Then. Applies the condition to the instruction.cond E - Else. Applies the inverse condition of to the instruction.cond Example: itte ne @ define the two condition switches in IT block andne r0,r0,r1 @ first line in IT block, always an if addsne r2,r2,#1 @ second line in IT block, then moveq r2,r3 @ third line in IT block, else add r0,r0,r1 @ not in IT block itt eq @ define the one condition switches in IT block moveq r0,r1 @ first line in IT block, always an if beq main @ branch at end of IT block is permitted Register Use in the ARM Procudure Call Standard So far, we've been using the general purpose registers freely without much condition of what there are ideal for or any standards. However, below is a common convention to consider when using registers: Purpose Register Argument 1 r0 Argument 2 r1 Argument 3 r2 Argument 4 r3 Variable 1 r4 Variable 2 r5 Variable 3 r6 Variable 4 r7 Variable 5 r8 Variable 6 / Stack Base r9 Variable 7 / Stack Limit r10 Variable 8 / Frame Pointer r11 Intra-Procedure Scratch r12 Stack Pointer (SP) r13 Link Register (LR) r14 Program Counter (PC) r15 Note that even though SP, LR and PC are special register used by the processor, they can still be modified with code and used the same way as other registers. Introduction to Stack The stack is a data structure, known as last in first out (LIFO). In a stack, items entered at one end and leave in the reversed order. Stacks in microprocessors are implemented by using a stack pointer to point to the top of the stack in memory. As items are added to the stack (pushed), the stack pointer is moving up, and as items are removed from the stack (pulled or popped), the stack pointer is moved down. ARM stacks are very flexible since the implementation is completely left to the software. Stack pointer is a register that points to the top of the stack. In the ARM processor, any one of the general purpose registers could be used as a stack pointer. Since it is left to the software to implement a stack, different implemenation choices result different types of stacks. Normally, there are two types of the stacks depending on which way the stack grows. Ascending Stack - When items are pushed on to the stack, the stack pointer is increasing. That means the stack grows towards higher address. Descending Stack - When items are pushed on to the stack, the stack pointer is decreasing. That means the stack is growing towards lower address. Depending on what the stack pointer points to we can categorize the stacks into the following two types: Empty Stack - Stack pointer points to the location in which the next/first item will be stored. e.g. A push will store the value, and increment the stack pointer for an Ascending Stack. Full Stack - Stack pointer points to the location in which the last item was stored. e.g. A pop will decrement the stack pointer and pull the value for an Ascending Stack. So now we can have four possible types of stacks. They are: full-ascending stack, full-descending stack, empty-ascending stack, empty-descending stack. They can be implemented by using the register load and store instructions. Here are some instructions used to deal with stack: PUSH {R3} @ Push R3 onto the stack PUSH {R0, R4-R7} @ Push R0, R4, R5, R6, R7 onto the stack PUSH {R2, LR} @ Push R2 and the link register onto the stack POP {R0, R5, PC} @ pop and return from subroutine, branch to PC POP {R3} @ Pop stack value and save to R3 Push registers onto and pop registers off a full-descending stack. Subroutine and Stack A subroutine call can be implemented by pushing the return address on the stack and then jumping to the branch target address. When the subroutine is done, remember to pop out the saved information so that it will be able to return to the next instruction immediately after the calling point. Preparation Lab Preparation Question Read over the lab and write a pseudocode for the post-lab exercise 4. It should just be a small modification from the one your did in the previous lab. Submission on Blackboard is not required. Procedures Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, rename the project then leave all other settings as default. Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". In this example, let's take a look as a simple subroutine call. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sump: .word sum @ declare a pointer to sum sump2: .word sum2 @ declare a pointer to sum2 n: .word 5 @ declare variable n with value of 5 sum: .word 0 @ declare sum with value of 0 sum2: .word 0 @ declare sum2 with value of 0 .text @ put code in the code section .global sumup @ declare sumup as a global variable .type sumup, %function @ set sumup to function type sumup: add r0, r0, r1 @ R0 = ? after first execution only subs r1, r1, #1 @ R1 = ? after first execution only bgt sumup @ Branch back if not done bx lr @ PC = ?, LR = ? @ After execution, PC = ? .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r1, =n @ Load count into R1 ldr r1, [r1] @ R1 = ? mov r0, #0 @ Clear accumulator R0 bl sumup @ PC = ?, LR = ? ldr r3, =sump @ Load address of SUM to R3 ldr r3, [r3] @ R3 = ? str r0, [r3] @ Store SUM ldr r4, [r3] @ R4 = ? mov r7, #8 ldr r5, =sump2 @ Load address of SUM2 to R5 ldr r5, [r5] @ R5 = ? str r7, [r5] @ Store SUM2 ldr r6, [r5] @ R6 = ? stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the variable is saved then take a screenshot showing the memory address along with the value. Submit your code and screenshot it as part of the post-lab. In this code, we'll take a look at subroutine and stack. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sump: .word sum @ declare a pointer to sum sump2: .word sum2 @ declare a pointer to sum2 n: .word 5 @ declare variable n with value of 5 sum: .word 0 @ declare sum with value of 0 sum2: .word 0 @ declare sum2 with value of 0 .text @ put code in the code section .global function1 @ declare as a global variable .type function1, %function @ set to function type function1: push {r5, lr} @ Save values in the stack @ which address did R5 and LR got saved to? mov r5, #8 @ Set initial value for the delay loop delay: subs r5, r5, #1 @ R5 = ? after first execution bne delay pop {r5, pc} @ pop out the saved value from the stack, @ check the value in the R5 @ and see if it is the saved value @ R5 = ?, PC = ? .global main @ declare main as a global variable .type main, %function @ set main to function type main: mov r0, #1 @ SP = ? then memory monitor to SP address mov r3, #0x75 push {r0, r3} @ SP = ? which address did #0x75 @ and #1 got saved to? mov r0, #6 @ R0 = ? mov r3, #7 @ R3 = ? pop {r0, r3} @ after pop, R0 = ?, R3 = ?, SP = ? @ did the value in memory address changed loop: add r0, r0, #1 cmp r0, #5 bne loop mov r5, #9 @ prepare for function call bl function1 @ PC = ?, LR = ?, R5 = ? mov r3, #12 stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the stack is saved then take a screenshot showing the memory address along with the value. Submit your code and screenshot it as part of the post-lab. Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Execute the code from step 4 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Execute the code from step 6 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Rewrite the program from the last lab in assembly language that counts how many vowels and non-vowels are in \"SEH500 is very cool! (your name here)\" (REPLACE (your name here) with your name). But this time, you must use at least one subroutine in your code along with the stack. Hint: put your string into memory using the .string directive use R0 to hold the address for the string or character use R1 as the counter for vowel use R2 as the counter for non-vowel For the code above, at the end of execution, take a screenshot of your register bank, and your memory space showing the string then copy your code into Blackboard. Reference [1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Lab 5 : More Branching, Subroutine, and Stack"},{"location":"seh500/lab5/#lab-5-more-branching-subroutine-and-stack","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 5 : More Branching, Subroutine, and Stack"},{"location":"seh500/lab5/#introduction","text":"Documentation of the Cortex-M4 instruction set can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual In the previous lab, we explored how to use basic branching to control the flow of a program. In this lab, we'll further explore branching and use the stack point to create subroutine and function call procedure.","title":"Introduction"},{"location":"seh500/lab5/#review-of-branching-instructions-with-link","text":"Mnemonic Meaning B label Branch B{cond} label Branch with condition BL label Branch with Link BL{cond} label Branch with Link with condition BX Rm Branch to register value BX{cond} Rm Branch to register value with condition BLX Rm Branch with Link to register value BLX{cond} Rm Branch with Link to register value with condition See below for conditions that are set by a compare, usually CMP, instruction. The CMP Rm, Rn instruction operates Rm-Rn for the sole purpose of setting the condition flags.","title":"Review of Branching Instructions with Link"},{"location":"seh500/lab5/#review-of-branching-conditions","text":"Suffix Flags Meaning EQ Z = 1 Equal NE Z = 0 Not equal CS or HS C = 1 Higher or same, unsigned, >= CC or LO C = 0 Lower, unsigned, < MI N = 1 Negative PL N = 0 Positive or zero VS V = 1 Overflow VC V = 0 No overflow HI C = 1 and Z = 0 Higher, unsigned, > LS C = 0 or Z = 1 Lower or same, unsigned, <= GE N = V Greater than or equal, signed, >= LT N != V Less than, signed, < GT Z = 0 and N = V Greater than, signed, > LE Z = 1 and N != V Less than or equal, signed, <= AL Can have any value Always. This is the default when no suffix is specified.","title":"Review of Branching Conditions"},{"location":"seh500/lab5/#it-if-then-block","text":"The IT (If-Then) block is a feature with ARM processor that validates the conditions specified in the IT instructions against the conditions specified in the following instructions. In anorder word, an IT help ensure there are no semantic error during assembly programming. An IT block have the following syntax: IT{x{y{z}}} {cond} where: x - specifies the condition switch for the second instruction in the IT block. y - specifies the condition switch for the third instruction in the IT block. z - specifies the condition switch for the fourth instruction in the IT block. cond - specifies the condition for the first instruction in the IT block. The condition switch for the second, third and fourth instruction in the IT block can be either: T - Then. Applies the condition to the instruction.cond E - Else. Applies the inverse condition of to the instruction.cond Example: itte ne @ define the two condition switches in IT block andne r0,r0,r1 @ first line in IT block, always an if addsne r2,r2,#1 @ second line in IT block, then moveq r2,r3 @ third line in IT block, else add r0,r0,r1 @ not in IT block itt eq @ define the one condition switches in IT block moveq r0,r1 @ first line in IT block, always an if beq main @ branch at end of IT block is permitted","title":"IT (If-Then) Block"},{"location":"seh500/lab5/#register-use-in-the-arm-procudure-call-standard","text":"So far, we've been using the general purpose registers freely without much condition of what there are ideal for or any standards. However, below is a common convention to consider when using registers: Purpose Register Argument 1 r0 Argument 2 r1 Argument 3 r2 Argument 4 r3 Variable 1 r4 Variable 2 r5 Variable 3 r6 Variable 4 r7 Variable 5 r8 Variable 6 / Stack Base r9 Variable 7 / Stack Limit r10 Variable 8 / Frame Pointer r11 Intra-Procedure Scratch r12 Stack Pointer (SP) r13 Link Register (LR) r14 Program Counter (PC) r15 Note that even though SP, LR and PC are special register used by the processor, they can still be modified with code and used the same way as other registers.","title":"Register Use in the ARM Procudure Call Standard"},{"location":"seh500/lab5/#introduction-to-stack","text":"The stack is a data structure, known as last in first out (LIFO). In a stack, items entered at one end and leave in the reversed order. Stacks in microprocessors are implemented by using a stack pointer to point to the top of the stack in memory. As items are added to the stack (pushed), the stack pointer is moving up, and as items are removed from the stack (pulled or popped), the stack pointer is moved down. ARM stacks are very flexible since the implementation is completely left to the software. Stack pointer is a register that points to the top of the stack. In the ARM processor, any one of the general purpose registers could be used as a stack pointer. Since it is left to the software to implement a stack, different implemenation choices result different types of stacks. Normally, there are two types of the stacks depending on which way the stack grows. Ascending Stack - When items are pushed on to the stack, the stack pointer is increasing. That means the stack grows towards higher address. Descending Stack - When items are pushed on to the stack, the stack pointer is decreasing. That means the stack is growing towards lower address. Depending on what the stack pointer points to we can categorize the stacks into the following two types: Empty Stack - Stack pointer points to the location in which the next/first item will be stored. e.g. A push will store the value, and increment the stack pointer for an Ascending Stack. Full Stack - Stack pointer points to the location in which the last item was stored. e.g. A pop will decrement the stack pointer and pull the value for an Ascending Stack. So now we can have four possible types of stacks. They are: full-ascending stack, full-descending stack, empty-ascending stack, empty-descending stack. They can be implemented by using the register load and store instructions. Here are some instructions used to deal with stack: PUSH {R3} @ Push R3 onto the stack PUSH {R0, R4-R7} @ Push R0, R4, R5, R6, R7 onto the stack PUSH {R2, LR} @ Push R2 and the link register onto the stack POP {R0, R5, PC} @ pop and return from subroutine, branch to PC POP {R3} @ Pop stack value and save to R3 Push registers onto and pop registers off a full-descending stack.","title":"Introduction to Stack"},{"location":"seh500/lab5/#subroutine-and-stack","text":"A subroutine call can be implemented by pushing the return address on the stack and then jumping to the branch target address. When the subroutine is done, remember to pop out the saved information so that it will be able to return to the next instruction immediately after the calling point.","title":"Subroutine and Stack"},{"location":"seh500/lab5/#preparation","text":"","title":"Preparation"},{"location":"seh500/lab5/#lab-preparation-question","text":"Read over the lab and write a pseudocode for the post-lab exercise 4. It should just be a small modification from the one your did in the previous lab. Submission on Blackboard is not required.","title":"Lab Preparation Question"},{"location":"seh500/lab5/#procedures","text":"Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, rename the project then leave all other settings as default. Once the project is created, rename the C-code file from \".c\" to \".s\". If the IDE is not allowing you to rename, delete the C-code file and create a new file of the same name but with the extension \".s\". In this example, let's take a look as a simple subroutine call. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sump: .word sum @ declare a pointer to sum sump2: .word sum2 @ declare a pointer to sum2 n: .word 5 @ declare variable n with value of 5 sum: .word 0 @ declare sum with value of 0 sum2: .word 0 @ declare sum2 with value of 0 .text @ put code in the code section .global sumup @ declare sumup as a global variable .type sumup, %function @ set sumup to function type sumup: add r0, r0, r1 @ R0 = ? after first execution only subs r1, r1, #1 @ R1 = ? after first execution only bgt sumup @ Branch back if not done bx lr @ PC = ?, LR = ? @ After execution, PC = ? .global main @ declare main as a global variable .type main, %function @ set main to function type main: ldr r1, =n @ Load count into R1 ldr r1, [r1] @ R1 = ? mov r0, #0 @ Clear accumulator R0 bl sumup @ PC = ?, LR = ? ldr r3, =sump @ Load address of SUM to R3 ldr r3, [r3] @ R3 = ? str r0, [r3] @ Store SUM ldr r4, [r3] @ R4 = ? mov r7, #8 ldr r5, =sump2 @ Load address of SUM2 to R5 ldr r5, [r5] @ R5 = ? str r7, [r5] @ Store SUM2 ldr r6, [r5] @ R6 = ? stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the variable is saved then take a screenshot showing the memory address along with the value. Submit your code and screenshot it as part of the post-lab. In this code, we'll take a look at subroutine and stack. Replace the code within the file with the following: .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .data @ put data in the data section sump: .word sum @ declare a pointer to sum sump2: .word sum2 @ declare a pointer to sum2 n: .word 5 @ declare variable n with value of 5 sum: .word 0 @ declare sum with value of 0 sum2: .word 0 @ declare sum2 with value of 0 .text @ put code in the code section .global function1 @ declare as a global variable .type function1, %function @ set to function type function1: push {r5, lr} @ Save values in the stack @ which address did R5 and LR got saved to? mov r5, #8 @ Set initial value for the delay loop delay: subs r5, r5, #1 @ R5 = ? after first execution bne delay pop {r5, pc} @ pop out the saved value from the stack, @ check the value in the R5 @ and see if it is the saved value @ R5 = ?, PC = ? .global main @ declare main as a global variable .type main, %function @ set main to function type main: mov r0, #1 @ SP = ? then memory monitor to SP address mov r3, #0x75 push {r0, r3} @ SP = ? which address did #0x75 @ and #1 got saved to? mov r0, #6 @ R0 = ? mov r3, #7 @ R3 = ? pop {r0, r3} @ after pop, R0 = ?, R3 = ?, SP = ? @ did the value in memory address changed loop: add r0, r0, #1 cmp r0, #5 bne loop mov r5, #9 @ prepare for function call bl function1 @ PC = ?, LR = ?, R5 = ? mov r3, #12 stop: @ define a new label called stop nop @ do nothing b stop @ jump back label stop to form a loop Execute the code above, pay attention to what is happening in each register and record their value as per the code comment. Afterward, take a look at the memory address where the stack is saved then take a screenshot showing the memory address along with the value. Submit your code and screenshot it as part of the post-lab.","title":"Procedures"},{"location":"seh500/lab5/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Execute the code from step 4 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Execute the code from step 6 then answer the questions in the comment. Copy and paste your code with your answers along with any screenshots into Blackboard. Rewrite the program from the last lab in assembly language that counts how many vowels and non-vowels are in \"SEH500 is very cool! (your name here)\" (REPLACE (your name here) with your name). But this time, you must use at least one subroutine in your code along with the stack. Hint: put your string into memory using the .string directive use R0 to hold the address for the string or character use R1 as the counter for vowel use R2 as the counter for non-vowel For the code above, at the end of execution, take a screenshot of your register bank, and your memory space showing the string then copy your code into Blackboard.","title":"Post-Lab Questions"},{"location":"seh500/lab5/#reference","text":"[1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Reference"},{"location":"seh500/lab6/","text":"Lab 6 : Timer Interrupt and C Code Seneca College SEH500 Microprocessors and Computer Architecture Introduction Documentation of the Cortex-M4 instruction set and FRDM-K64F user's guide can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDMK64FUG, FRDM-K64F Freedom Module User\u2019s Guide In the previous lab, we explored how to use basic branching to control the flow of a program. In this lab, we'll further explore branching and use the stack point to create subroutine and function call procedure. Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, this time, also select \"pit\" as one of the rename the project then leave all other settings as default. Figure 6.1 Select pit in the project setting In previous labs, we wrote all of our code in assembly language using the .s file extension. In this lab, we are going to explore how to integrate C-code together with assembly code in a single project. The first way of integrating assembly code into a C-program is by using the inline assembler method. __asm volatile (\" \"); Replace (or comment out) the PRINTF \"Hello World\" line with the following: __asm volatile (\" mov r1, #0x75 \"); Build and create the dissambly code (or from the dissambly view window during debug). Find the inline assembly code that you wrote. Take a screenshot of it and confirm that the C-code and the assembly code are the same. Paste your result into the Post-Lab question on blackboard. You can also write multi-line inline assembly code as below. As the __asm function is direct replicate of what you wrote into assembly, you'll need to use newline character to specify a newline in assembly. You can also align your C-code to make it more readable. __asm volatile (\" mov r1, #0x75 \\n\" \" mov r3, #10 \"); Open up Lab 5 and transfer the code from the main label (up to but not including the code within the loop) into inline assembly code and include it into the inline code you have. Another method is to include the assembly code in a .s file into the project. Create a function.s file in the source folder and paste the following extract from Lab 5 into it. .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .text @ put code in the code section .global function1 @ declare as a global variable .type function1, %function @ set to function type function1: push {r5, lr} @ Save values in the stack mov r5, #8 @ Set initial value for the delay loop delay: subs r5, r5, #1 bne delay pop {r5, pc} @ pop out the saved value from the stack Next, place a function prototype at the top of your code and a function call after your inline assembly code and before the while loop into your main function. Set a breakpoint at the asm function then debug your code. Once the program started, hit resume until it reach the breakpoint then \"Step Into (F5)\" the code and see what happens. You program should jump to the code in your assembly file when it hit the function call. Your task now is to translate the assembly code in the loop portion of Lab5 to C-code without using any assembly code except for moving data into register 5. You can use a for loop or a while loop. After you are done and get the desired result, compare the compiled assembly code with the one we have from Lab5 and comment on the difference. The code that you write should still be on top of the while(1) loop. Copy or take a screenshot of your loop and it's assembly code and paste it into Blackboard. Lastly, we are going to include a periodic interrupt timer (PIT) into our code to generate an interrupt once every second. We'll use the built-in ConfigTools in MCUXpresso for ease of implementation. The ConfigTools allow us to setup components of the processor and the microcontroller board in a quick and fast manner instead of manually coding all the necessary settings. Go to \"ConfigTools > Peripherals\" from the top menu. In the \"Components\" tab, Under \"Peripheral drivers (Device specific)\" add the \"PIT\" configuration components. Under the PIT settings, uncheck \"start channel\". Leave everything default so the setting page should look like this: Figure 6.2 PIT settings Once confirmed, click \"Update Code\" at the top menu button bar and click yes when prompted. The peripherals.c and peripherals.h will not be updated accordingly to include the timer interrupt settings. Next, we'll need to add some code for the interrupt handler and to start the interrupt. Paste the following handler code into your program. void PIT_CHANNEL_0_IRQHANDLER(void) / ISR to process PIT channel 0 interrupts / { PIT_ClearStatusFlags(PIT, PIT_CHANNEL_0, kPIT_TimerFlag); //clear PIT channel 0 interrupt status flag PRINTF(\"*\\r\\n\"); } Then use the following code to start the PIT in your main function. You can put it at the beginning of main after all the initialization or just before the empty while loop. PIT_StartTimer(PIT_PERIPHERAL, PIT_CHANNEL_0); Build and debug. Open a serial monitor to see the serial output. Let the program run and you should see an \"*\" being printed every second. Verify with a watch that the output is once per second. Take a screenshot of your serial monitor output and paste it into blackboard. Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Answer all the questions in the lab in Blackboard. Modify your code so instead of printing \"*\" every second, print a statement that display the number of minutes and seconds since the timer started. Paste your code into blackboard. Reference [1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Lab 6 : Timer Interrupt and C Code"},{"location":"seh500/lab6/#lab-6-timer-interrupt-and-c-code","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 6 : Timer Interrupt and C Code"},{"location":"seh500/lab6/#introduction","text":"Documentation of the Cortex-M4 instruction set and FRDM-K64F user's guide can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDMK64FUG, FRDM-K64F Freedom Module User\u2019s Guide In the previous lab, we explored how to use basic branching to control the flow of a program. In this lab, we'll further explore branching and use the stack point to create subroutine and function call procedure.","title":"Introduction"},{"location":"seh500/lab6/#preparation","text":"","title":"Preparation"},{"location":"seh500/lab6/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"seh500/lab6/#procedures","text":"Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, this time, also select \"pit\" as one of the rename the project then leave all other settings as default. Figure 6.1 Select pit in the project setting In previous labs, we wrote all of our code in assembly language using the .s file extension. In this lab, we are going to explore how to integrate C-code together with assembly code in a single project. The first way of integrating assembly code into a C-program is by using the inline assembler method. __asm volatile (\" \"); Replace (or comment out) the PRINTF \"Hello World\" line with the following: __asm volatile (\" mov r1, #0x75 \"); Build and create the dissambly code (or from the dissambly view window during debug). Find the inline assembly code that you wrote. Take a screenshot of it and confirm that the C-code and the assembly code are the same. Paste your result into the Post-Lab question on blackboard. You can also write multi-line inline assembly code as below. As the __asm function is direct replicate of what you wrote into assembly, you'll need to use newline character to specify a newline in assembly. You can also align your C-code to make it more readable. __asm volatile (\" mov r1, #0x75 \\n\" \" mov r3, #10 \"); Open up Lab 5 and transfer the code from the main label (up to but not including the code within the loop) into inline assembly code and include it into the inline code you have. Another method is to include the assembly code in a .s file into the project. Create a function.s file in the source folder and paste the following extract from Lab 5 into it. .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .text @ put code in the code section .global function1 @ declare as a global variable .type function1, %function @ set to function type function1: push {r5, lr} @ Save values in the stack mov r5, #8 @ Set initial value for the delay loop delay: subs r5, r5, #1 bne delay pop {r5, pc} @ pop out the saved value from the stack Next, place a function prototype at the top of your code and a function call after your inline assembly code and before the while loop into your main function. Set a breakpoint at the asm function then debug your code. Once the program started, hit resume until it reach the breakpoint then \"Step Into (F5)\" the code and see what happens. You program should jump to the code in your assembly file when it hit the function call. Your task now is to translate the assembly code in the loop portion of Lab5 to C-code without using any assembly code except for moving data into register 5. You can use a for loop or a while loop. After you are done and get the desired result, compare the compiled assembly code with the one we have from Lab5 and comment on the difference. The code that you write should still be on top of the while(1) loop. Copy or take a screenshot of your loop and it's assembly code and paste it into Blackboard. Lastly, we are going to include a periodic interrupt timer (PIT) into our code to generate an interrupt once every second. We'll use the built-in ConfigTools in MCUXpresso for ease of implementation. The ConfigTools allow us to setup components of the processor and the microcontroller board in a quick and fast manner instead of manually coding all the necessary settings. Go to \"ConfigTools > Peripherals\" from the top menu. In the \"Components\" tab, Under \"Peripheral drivers (Device specific)\" add the \"PIT\" configuration components. Under the PIT settings, uncheck \"start channel\". Leave everything default so the setting page should look like this: Figure 6.2 PIT settings Once confirmed, click \"Update Code\" at the top menu button bar and click yes when prompted. The peripherals.c and peripherals.h will not be updated accordingly to include the timer interrupt settings. Next, we'll need to add some code for the interrupt handler and to start the interrupt. Paste the following handler code into your program. void PIT_CHANNEL_0_IRQHANDLER(void) / ISR to process PIT channel 0 interrupts / { PIT_ClearStatusFlags(PIT, PIT_CHANNEL_0, kPIT_TimerFlag); //clear PIT channel 0 interrupt status flag PRINTF(\"*\\r\\n\"); } Then use the following code to start the PIT in your main function. You can put it at the beginning of main after all the initialization or just before the empty while loop. PIT_StartTimer(PIT_PERIPHERAL, PIT_CHANNEL_0); Build and debug. Open a serial monitor to see the serial output. Let the program run and you should see an \"*\" being printed every second. Verify with a watch that the output is once per second. Take a screenshot of your serial monitor output and paste it into blackboard.","title":"Procedures"},{"location":"seh500/lab6/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Answer all the questions in the lab in Blackboard. Modify your code so instead of printing \"*\" every second, print a statement that display the number of minutes and seconds since the timer started. Paste your code into blackboard.","title":"Post-Lab Questions"},{"location":"seh500/lab6/#reference","text":"[1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Reference"},{"location":"seh500/lab7/","text":"Lab 7 : GPIO and Interrupt Seneca College SEH500 Microprocessors and Computer Architecture Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide Kinetis K64 Reference Manual FRDM-K66F Freedom Module User\u2019s Guide Kinetis K66 Reference Manual In the previous lab, we explored the use of the built-in ConfigTools in MCUXpresso IDE to help with setting up interrupts. In this lab, we'll explore how to use assembly instruction to setup GPIO as well as using the ConfigTools to do the same. Freedom Board Tricolour LED The Tricolour LED on the Freedom K64 board is connected to: - Red : Port B Pin 22 - Blue : Port B Pin 21 - Green : Port E Pin 26 Figure 7.1 Tricolour LED connection and schematics If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. Freedom Board Buttons The Tricolour LED on the Freedom K64 board is connected to: - SW2 : Port C Pin 6 - SW3 : Port A Pin 4 Figure 7.2 Buttons connection If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, we can keep everything to default as we won't be using the timer interrupt. First, we'll setup the GPIO for the LED output using assembly code. Create a file called function.s in the source folder. Write the following code to it. In the code, we created two functions, one for setting up the pins as GPIO output and another for turning the LED on and off. If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .text @ put code in the code section .global setup @ declare as a global variable .type setup, %function @ set to function type setup: ldr r1, =0x40048038 @ System Clock Gate register mov r0, #0x00000400 @ enable gating for port B str r0, [r1] @ apply setting ldr r1, =0x4004A058 @ PTB22 PCR register address mov r0, #0x00000100 @ set to GPIO mode str r0, [r1] @ apply setting ldr r1, =0x400FF054 @ GPIOB PDDR register address mov r0, #0x00400000 @ set to output mode str r0, [r1] @ apply setting bx lr .global function1 @ declare as a global variable .type function1, %function @ set to function type function1: ldr r1, =0x400FF040 @ GPIOB PDOR register address led_off: mov r0, #0x00400000 @ set output to HIGH, LED off str r0, [r1] @ apply setting led_on: mov r0, #0x00000000 @ set output to LOW, LED on str r0, [r1] @ apply setting b led_off If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. Next, place a \"setup\" and \"function1\" function prototype at the top of your code and function calls before the while loop in your main function. You can also comment out or remove the print statement. Build and run your code in debug mode. Step Over (F6) the initial functions until you get to the setup function. Then Step Into (F5) the led_setup and the function1 function. While you are stepping through the code, the RED led should turn on and off. Take a photo of your led turning on and paste it into Blackboard. Next, we'll setup an interrupt with the onboard switch to control the LED. To do that, we'll use the ConfigTools to help setup the interrupt as setting it up using assembly require knowledge of the vector table (a more lengthy process). Open the ConfigTools > Config Tools Overview windows. Under Pins Functional groups, enable BOARD_InitPins, BOARD_InitBUTTONsPins, BOARD_InitLEDsPins, and BOARD_InitDEBUG_UARTPins. Under Peripherals Functional groups, enable BOARD_InitPeripherals. Close and Update Code. Figure 7.3 Next, open the ConfigTools > Peripherals Windows. On the left hand side, go to the Peripherals tab. Check GPIOC and check Enable interrupt request. Afterward, click Enable custom handler name and we'll name it: SW2_GPIOC_IRQHANDLER. Update code. Figure 7.4 Repeat the same for switch 3 in GPIOA. Name the handler as SW3_GPIOA_IRQHANDLER. Lastly, add the following two functions at the end of your program (outside of your main function) and comment out or remove the function call to the assembly code. Run your code and the LED should turn on and off as you press the buttons. void SW2_GPIOC_IRQHANDLER(void) //Interrupt Service Routine for SW2 { // clear interrupt flag set by button SW2 connected to pin PTC6 GPIO_PortClearInterruptFlags(GPIOC, 1U << 6U); LED_RED_ON(); // turn ON RED LED } void SW3_GPIOA_IRQHANDLER(void) //Interrupt Service Routine for SW3 { // clear interrupt flag set by button SW3 connected to pin PTA4 GPIO_PortClearInterruptFlags(GPIOA, 1U << 4U); LED_RED_OFF(); // turn OFF RED LED } Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Answer all the questions in the lab in Blackboard. Modify your code so all three colours of the LED will turn on and off for the two examples done in the lab. Reference [1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Lab 7 : GPIO and Interrupt"},{"location":"seh500/lab7/#lab-7-gpio-and-interrupt","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 7 : GPIO and Interrupt"},{"location":"seh500/lab7/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide Kinetis K64 Reference Manual FRDM-K66F Freedom Module User\u2019s Guide Kinetis K66 Reference Manual In the previous lab, we explored the use of the built-in ConfigTools in MCUXpresso IDE to help with setting up interrupts. In this lab, we'll explore how to use assembly instruction to setup GPIO as well as using the ConfigTools to do the same.","title":"Introduction"},{"location":"seh500/lab7/#freedom-board-tricolour-led","text":"The Tricolour LED on the Freedom K64 board is connected to: - Red : Port B Pin 22 - Blue : Port B Pin 21 - Green : Port E Pin 26 Figure 7.1 Tricolour LED connection and schematics If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number.","title":"Freedom Board Tricolour LED"},{"location":"seh500/lab7/#freedom-board-buttons","text":"The Tricolour LED on the Freedom K64 board is connected to: - SW2 : Port C Pin 6 - SW3 : Port A Pin 4 Figure 7.2 Buttons connection If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number.","title":"Freedom Board Buttons"},{"location":"seh500/lab7/#preparation","text":"","title":"Preparation"},{"location":"seh500/lab7/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"seh500/lab7/#procedures","text":"Similar to the previous lab. Open MCUXpresso then start a new C/C++ project based on the Freedom board model that you have. In the new project configuration, we can keep everything to default as we won't be using the timer interrupt. First, we'll setup the GPIO for the LED output using assembly code. Create a file called function.s in the source folder. Write the following code to it. In the code, we created two functions, one for setting up the pins as GPIO output and another for turning the LED on and off. If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. .syntax unified @ unified syntax used .cpu cortex-m4 @ cpu is cortex-m4 .thumb @ use thumb encoding .text @ put code in the code section .global setup @ declare as a global variable .type setup, %function @ set to function type setup: ldr r1, =0x40048038 @ System Clock Gate register mov r0, #0x00000400 @ enable gating for port B str r0, [r1] @ apply setting ldr r1, =0x4004A058 @ PTB22 PCR register address mov r0, #0x00000100 @ set to GPIO mode str r0, [r1] @ apply setting ldr r1, =0x400FF054 @ GPIOB PDDR register address mov r0, #0x00400000 @ set to output mode str r0, [r1] @ apply setting bx lr .global function1 @ declare as a global variable .type function1, %function @ set to function type function1: ldr r1, =0x400FF040 @ GPIOB PDOR register address led_off: mov r0, #0x00400000 @ set output to HIGH, LED off str r0, [r1] @ apply setting led_on: mov r0, #0x00000000 @ set output to LOW, LED on str r0, [r1] @ apply setting b led_off If you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. Next, place a \"setup\" and \"function1\" function prototype at the top of your code and function calls before the while loop in your main function. You can also comment out or remove the print statement. Build and run your code in debug mode. Step Over (F6) the initial functions until you get to the setup function. Then Step Into (F5) the led_setup and the function1 function. While you are stepping through the code, the RED led should turn on and off. Take a photo of your led turning on and paste it into Blackboard. Next, we'll setup an interrupt with the onboard switch to control the LED. To do that, we'll use the ConfigTools to help setup the interrupt as setting it up using assembly require knowledge of the vector table (a more lengthy process). Open the ConfigTools > Config Tools Overview windows. Under Pins Functional groups, enable BOARD_InitPins, BOARD_InitBUTTONsPins, BOARD_InitLEDsPins, and BOARD_InitDEBUG_UARTPins. Under Peripherals Functional groups, enable BOARD_InitPeripherals. Close and Update Code. Figure 7.3 Next, open the ConfigTools > Peripherals Windows. On the left hand side, go to the Peripherals tab. Check GPIOC and check Enable interrupt request. Afterward, click Enable custom handler name and we'll name it: SW2_GPIOC_IRQHANDLER. Update code. Figure 7.4 Repeat the same for switch 3 in GPIOA. Name the handler as SW3_GPIOA_IRQHANDLER. Lastly, add the following two functions at the end of your program (outside of your main function) and comment out or remove the function call to the assembly code. Run your code and the LED should turn on and off as you press the buttons. void SW2_GPIOC_IRQHANDLER(void) //Interrupt Service Routine for SW2 { // clear interrupt flag set by button SW2 connected to pin PTC6 GPIO_PortClearInterruptFlags(GPIOC, 1U << 6U); LED_RED_ON(); // turn ON RED LED } void SW3_GPIOA_IRQHANDLER(void) //Interrupt Service Routine for SW3 { // clear interrupt flag set by button SW3 connected to pin PTA4 GPIO_PortClearInterruptFlags(GPIOA, 1U << 4U); LED_RED_OFF(); // turn OFF RED LED }","title":"Procedures"},{"location":"seh500/lab7/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Answer all the questions in the lab in Blackboard. Modify your code so all three colours of the LED will turn on and off for the two examples done in the lab.","title":"Post-Lab Questions"},{"location":"seh500/lab7/#reference","text":"[1] Yiu, J. (2013). The Definitive Guide to ARM\u00ae Cortex\u00ae-M3 and Cortex\u00ae-M4 Processors. (3rd ed.). Elsevier Science & Technology.","title":"Reference"},{"location":"seh500/lab8/","text":"Lab 8 : Sensors Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 8 : Sensors"},{"location":"seh500/lab8/#lab-8-sensors","text":"Seneca College SEH500 Microprocessors and Computer Architecture","title":"Lab 8 : Sensors"},{"location":"sep600/","text":"SEP600 Lab Manual Lab 1 : mbed library Lab 2 : Digital I/O Lab 3 : DAC and ADC Lab 4 : Serial UART and I2C Communication Lab 5 : LCD Lab 6 : Filtering and RTOS","title":"SEP600 Embedded Systems"},{"location":"sep600/#sep600-lab-manual","text":"Lab 1 : mbed library Lab 2 : Digital I/O Lab 3 : DAC and ADC Lab 4 : Serial UART and I2C Communication Lab 5 : LCD Lab 6 : Filtering and RTOS","title":"SEP600 Lab Manual"},{"location":"sep600/lab1/","text":"Lab 1 : mbed library Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) Preparation Read over the lab manual for this lab. Acquire the Freedom microcontroller board and install the necessary IDE as described in the lab manual. Lab Preparation Question Read over the lab and understand the procedures. Procedures Go to the following link to download the code for a simple blink LED program. This is the code you'll base your lab exercise with. https://github.com/Seneca-BSA/bsa-sep600 Once you've downloaded the code above, unzip it locally. Open MCUXpresso then import the project by File > Import Project from File System or Archive. Find the folder that you've unzipped the code from above then select the folder \"lab\" for import. Click Finish to import the project. The code in the project is for a K64F board, if you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. Open up the main.cpp code and you should see a printf statement along with a few functions that controls the pin direction and the pin state. We are now using the mbed-os library and most of the coding done from this point will be using C++. However, with knowledged of assembly language, you can still program the microcontroller using assembler. Build and debug the code and you should see the LED blink. The API used in the code is the mbed I/O API . Our baremetal mbed OS might not be at the latest version so some of the features might not work properly. Your task for this lab is to modify the progam to simulate brigthening and dimming of the LED using a concept called PWM but implementing it from a software side. Re-write the code so the LED will turn on for 99 microsecond and off for 1 microsecond. This means your LED is on 99% of the time. Build and debug the program. What do you notice? Change your code so your LED is ON for 50% of the time. > Lab Question: What do you notice? Lastly, re-write your program so your LED will loop between 0% and 100% brightness with sufficient delay so we (as human) can see the fading in and out of the LED. Hint: You might need to change the period from 100 us to something longer in order for the microcontroller to response properly. Reference","title":"Lab 1 : mbed library"},{"location":"sep600/lab1/#lab-1-mbed-library","text":"Seneca College SEP600 Embedded Systems","title":"Lab 1 : mbed library"},{"location":"sep600/lab1/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com )","title":"Introduction"},{"location":"sep600/lab1/#preparation","text":"Read over the lab manual for this lab. Acquire the Freedom microcontroller board and install the necessary IDE as described in the lab manual.","title":"Preparation"},{"location":"sep600/lab1/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab1/#procedures","text":"Go to the following link to download the code for a simple blink LED program. This is the code you'll base your lab exercise with. https://github.com/Seneca-BSA/bsa-sep600 Once you've downloaded the code above, unzip it locally. Open MCUXpresso then import the project by File > Import Project from File System or Archive. Find the folder that you've unzipped the code from above then select the folder \"lab\" for import. Click Finish to import the project. The code in the project is for a K64F board, if you are using the Freedom K66F board, the pin configurations is difference. Refer to the Freedom K66F board manual for the correct pin number. Open up the main.cpp code and you should see a printf statement along with a few functions that controls the pin direction and the pin state. We are now using the mbed-os library and most of the coding done from this point will be using C++. However, with knowledged of assembly language, you can still program the microcontroller using assembler. Build and debug the code and you should see the LED blink. The API used in the code is the mbed I/O API . Our baremetal mbed OS might not be at the latest version so some of the features might not work properly. Your task for this lab is to modify the progam to simulate brigthening and dimming of the LED using a concept called PWM but implementing it from a software side. Re-write the code so the LED will turn on for 99 microsecond and off for 1 microsecond. This means your LED is on 99% of the time. Build and debug the program. What do you notice? Change your code so your LED is ON for 50% of the time. > Lab Question: What do you notice? Lastly, re-write your program so your LED will loop between 0% and 100% brightness with sufficient delay so we (as human) can see the fading in and out of the LED. Hint: You might need to change the period from 100 us to something longer in order for the microcontroller to response properly.","title":"Procedures"},{"location":"sep600/lab1/#reference","text":"","title":"Reference"},{"location":"sep600/lab2/","text":"Lab 2 : Digital I/O Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Cortex M4 Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed FRDM-K66F FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed Materials Safety glasses (PPE) Breadboard Jumper Wires (1x) 1k\u03a9-10k\u03a9 Resistor (1x) Button (optional) (1x) 0.1-10\u00b5F Capacitor (ceramic or electrolytic) Preparation Read over the lab manual for this lab. Acquire the Freedom microcontroller board and install the necessary IDE as described in the lab manual. Lab Preparation Question Read over the lab and understand the procedures. Procedures IDE Option 1: MCUXpresso Go to the following link to download the code for a simple blink LED program. This is the code you'll base your lab exercise on. https://github.com/Seneca-BSA/bsa-sep600 Once you've downloaded the code above, unzip it locally. Open MCUXpresso then import the project by File > Import Project from File System or Archive. Find the folder that you've unzipped the code from above then select the folder \"lab\" for import. Click Finish to import the project. IDE Option 2: Mbed Studio Go to the following link to download Mbed Studio. https://os.mbed.com/studio/ You'll need to sign up for an Mbed account. Install Mbed Studio and sign in to Mbed Studio using the account you just created. Follow the instructions here to load the LED blink program to test your setup. Select the appropriate board then replace the default code with the following: int main() { // Initialise the digital pin LED1 as an output DigitalOut led(LED1); // remove ifdef from the default code printf(\"Program started!\\r\\n\"); // added to test serial while (true) { led = !led; printf(\"Blinking!\\r\\n\"); // added to test serial ThisThread::sleep_for(500); } } Part 1: Pull-Up and Pull-Down Figure 2.1 (A) Pull-Up Input. (B) Pull-Down Input. Acquire a breadboard, a 1k\u03a9 (or higher resistor), a button (or using jumper wires as a switch), and jumper wires. Assemble a Pull-Up circuit as given above and attach the signal to one of the digital input pins of your microcontroller. Refer to the microcontroller board manual for details on pin assignment. > Lab Question: What is the current passing through the resistor when the switch is closed? Is this a safe current for the resistor? (Hint: what is the maximum power the resistor can handle?) > Lab Question: What can we modify to reduce the energy consumption of this circuit? Modify the code provided to you earlier to include a DigitalIn object for accepting digital input. Remember, you'll need to set up a digital pin for input first. int main() { // Initialise the digital pin LED1 as an output DigitalOut led(LED1); DigitalIn button(PTXX); // Replace XX with your input pin ... } 1. Since the input is pull-up, the normal state will be HIGH. To detect a button press, we need to check for a LOW state. Replace the while loop with the following: while (true) { if (!button) { led = 0; // LED ON } else { led = 1; // LED OFF } } Run and test your program. Without taking apart your Pull-up circuit, assemble another Pull-Down circuit as given above and attach the signal to another of the digital input pins of your microcontroller. Refer to the microcontroller board manual for details on pin assignment. Modify your code so the second switch you assembled will trigger the second LED (LED2) to turn on. Run and test your program. Part 2: PWM Out and RC Figure 2.2 RC Circuit. Without removing your pull-up and pull-down circuit, assemble an RC circuit as given above and attach the input PWM signal to a PWM-capable pin of your microcontroller. Refer to the microcontroller board manual for details on pin assignment. > Lab Question: What is the RC time constant for your circuit? You'll need this for your program. Modify your code to set up a PWM pin. int main() { ... PwmOut pwm(PTXX); // Replace XX with your pwm pin ... } Add the following code to start PWM. Use a period that is at least twice your RC time constant. int main() { ... pwm.period(XXXf); // period in s pwm.write(0.50f); // duty cycle 0.5f = 50% ... } Turn on the DSO and connect CH1 to the output pin and CH2 to the RC circuit output. Run and test your program. Adjust the DSO so both CH1 and CH2 are in view. Your signal should look like the graph below. Figure 2.2 PWM signal after RC smoothing. 1. Adjust your PWM settings so there's less than 10% fluctuation between the high and low voltage after the RC filter (CH2). Lab Question: What is the PWM frequency needed to achieve this? Reference mbed I/O API DigitalIn DigitalOut PwmOut","title":"Lab 2 : Digital I/O"},{"location":"sep600/lab2/#lab-2-digital-io","text":"Seneca College SEP600 Embedded Systems","title":"Lab 2 : Digital I/O"},{"location":"sep600/lab2/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here:","title":"Introduction"},{"location":"sep600/lab2/#cortex-m4","text":"Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual","title":"Cortex M4"},{"location":"sep600/lab2/#frdm-k64f","text":"FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed","title":"FRDM-K64F"},{"location":"sep600/lab2/#frdm-k66f","text":"FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed","title":"FRDM-K66F"},{"location":"sep600/lab2/#materials","text":"Safety glasses (PPE) Breadboard Jumper Wires (1x) 1k\u03a9-10k\u03a9 Resistor (1x) Button (optional) (1x) 0.1-10\u00b5F Capacitor (ceramic or electrolytic)","title":"Materials"},{"location":"sep600/lab2/#preparation","text":"Read over the lab manual for this lab. Acquire the Freedom microcontroller board and install the necessary IDE as described in the lab manual.","title":"Preparation"},{"location":"sep600/lab2/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab2/#procedures","text":"","title":"Procedures"},{"location":"sep600/lab2/#ide-option-1-mcuxpresso","text":"Go to the following link to download the code for a simple blink LED program. This is the code you'll base your lab exercise on. https://github.com/Seneca-BSA/bsa-sep600 Once you've downloaded the code above, unzip it locally. Open MCUXpresso then import the project by File > Import Project from File System or Archive. Find the folder that you've unzipped the code from above then select the folder \"lab\" for import. Click Finish to import the project.","title":"IDE Option 1: MCUXpresso"},{"location":"sep600/lab2/#ide-option-2-mbed-studio","text":"Go to the following link to download Mbed Studio. https://os.mbed.com/studio/ You'll need to sign up for an Mbed account. Install Mbed Studio and sign in to Mbed Studio using the account you just created. Follow the instructions here to load the LED blink program to test your setup. Select the appropriate board then replace the default code with the following: int main() { // Initialise the digital pin LED1 as an output DigitalOut led(LED1); // remove ifdef from the default code printf(\"Program started!\\r\\n\"); // added to test serial while (true) { led = !led; printf(\"Blinking!\\r\\n\"); // added to test serial ThisThread::sleep_for(500); } }","title":"IDE Option 2: Mbed Studio"},{"location":"sep600/lab2/#part-1-pull-up-and-pull-down","text":"Figure 2.1 (A) Pull-Up Input. (B) Pull-Down Input. Acquire a breadboard, a 1k\u03a9 (or higher resistor), a button (or using jumper wires as a switch), and jumper wires. Assemble a Pull-Up circuit as given above and attach the signal to one of the digital input pins of your microcontroller. Refer to the microcontroller board manual for details on pin assignment. > Lab Question: What is the current passing through the resistor when the switch is closed? Is this a safe current for the resistor? (Hint: what is the maximum power the resistor can handle?) > Lab Question: What can we modify to reduce the energy consumption of this circuit? Modify the code provided to you earlier to include a DigitalIn object for accepting digital input. Remember, you'll need to set up a digital pin for input first. int main() { // Initialise the digital pin LED1 as an output DigitalOut led(LED1); DigitalIn button(PTXX); // Replace XX with your input pin ... } 1. Since the input is pull-up, the normal state will be HIGH. To detect a button press, we need to check for a LOW state. Replace the while loop with the following: while (true) { if (!button) { led = 0; // LED ON } else { led = 1; // LED OFF } } Run and test your program. Without taking apart your Pull-up circuit, assemble another Pull-Down circuit as given above and attach the signal to another of the digital input pins of your microcontroller. Refer to the microcontroller board manual for details on pin assignment. Modify your code so the second switch you assembled will trigger the second LED (LED2) to turn on. Run and test your program.","title":"Part 1: Pull-Up and Pull-Down"},{"location":"sep600/lab2/#part-2-pwm-out-and-rc","text":"Figure 2.2 RC Circuit. Without removing your pull-up and pull-down circuit, assemble an RC circuit as given above and attach the input PWM signal to a PWM-capable pin of your microcontroller. Refer to the microcontroller board manual for details on pin assignment. > Lab Question: What is the RC time constant for your circuit? You'll need this for your program. Modify your code to set up a PWM pin. int main() { ... PwmOut pwm(PTXX); // Replace XX with your pwm pin ... } Add the following code to start PWM. Use a period that is at least twice your RC time constant. int main() { ... pwm.period(XXXf); // period in s pwm.write(0.50f); // duty cycle 0.5f = 50% ... } Turn on the DSO and connect CH1 to the output pin and CH2 to the RC circuit output. Run and test your program. Adjust the DSO so both CH1 and CH2 are in view. Your signal should look like the graph below. Figure 2.2 PWM signal after RC smoothing. 1. Adjust your PWM settings so there's less than 10% fluctuation between the high and low voltage after the RC filter (CH2). Lab Question: What is the PWM frequency needed to achieve this?","title":"Part 2: PWM Out and RC"},{"location":"sep600/lab2/#reference","text":"mbed I/O API DigitalIn DigitalOut PwmOut","title":"Reference"},{"location":"sep600/lab3/","text":"Lab 3 : DAC and ADC Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Cortex M4 Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed FRDM-K66F FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed Materials Safety glasses (PPE) Breadboard Jumper Wires (1x) 1k\u03a9-10k\u03a9 Resistor (1x) Potentiometer (Optional) Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Part 1: PWM Output vs DAC Output In Part 1, we'll set up a PWM and a DAC to compare the difference between the output. Connect a PWM output pin to CH1 of the DSO. Refer to the mbed board pages to identify which pin is a PWM pin. Connect a DAC output pin to CH2 of the DSO. Refer to the mbed board pages to identify which pin is a DAC pin. Upload the following code to generate a PWM and a DAC output. Remember, you'll need to replace PTXX with the PWM pin that you are using. int main() { // setup pins PwmOut pwm(PTXX); // replace with a PWM pin AnalogOut aout(DAC0_OUT); // pwm settings pwm.period(0.02f); // 50Hz pwm, 0.02s period printf(\"Program started!\\r\\n\"); // added to test serial while (true) { // loop to cycle from 0% to 100% for (float i = 0.0f; i < 1.0f; i += 0.01f) { aout = i; // set DAC out % pwm = i; // set PWM duty cycle % // delay for 10ms, 1000ms for each ramp up ThisThread::sleep_for(10ms); } // loop to cycle from 100% to 0% for (float i = 1.0f; i > 0.0f; i -= 0.01f) { aout = i; // set DAC out % pwm = i; // set PWM duty cycle % // delay for 10ms, 1000ms for each ramp down ThisThread::sleep_for(10ms); } } } Turn on the DSO and run the program. You should see something similar to the figure below on your DSO except it'll be a triangular wave instead of a sine wave. Figure 3.1 DAC and PWM output Lab Question: What circuit should you apply to the PWM output if you want to see the same waveform as the DAC output? Keep the DSO connected. Part 2: ADC Input Next, we'll connect the ADC to an analog voltage input so it can be read into the microcontroller. The voltage signal will come from the bench power supply. To prevent damaging the ADC, we'll first use a voltage division to halve the signal. Never connect the power supply directly to the ADC without a resistor. Figure 3.2 Voltage division circuit for ADC input Assemble the voltage division circuit above on your breadboard and connect the voltage divider output to an analog input pin. Vs will be provided by the bench power supply. Ensure the power supply output is OFF. Optionally, you can use a potentiometer to achieve the same. As a precaution, we only want to supply a maximum of 3.3V to the ADC pin, this means the power supply output should never to above 6.6V. Set the power supply output to 1V. Add the following code in the main function of your code but before the while loop to set up an analog input pin. Remember, you'll need to replace PTXX with the PWM pin that you are using. int main() { ... AnalogIn ain(PTXX); // replace with a ADC pin ... } Next, replace the while loop with the following code so we are controlling the DAC output and the PWM duty cycle with the analog input. while (true) { i = ain; // read ADC aout = i; // set DAC out % pwm = i; // set PWM duty cycle % // delay for 10ms, 1000ms for each ramp up ThisThread::sleep_for(100ms); } Next, let's print the reading out as well. Modify your code to include the following respectively. while (true) { ... // print the percentage, 16 bit normalized values, and something we understand printf(\"percentage: %3.3f%% \", ain.read() * 100.0f); printf(\"normalized: 0x%04X \", ain.read_u16()); printf(\"normalized: %3.3fV \\n\", ain * 3.3); // % * 3.3V ... } Per Minimal printf and snprintf , as of mbed OS 6, printf no longer print floating point by default to save memory. In order to enable printing of floating point value, enable it by creating a file called mbed_app.json in the root project folder and add the following code to it. { \"target_overrides\": { \"*\": { \"target.printf_lib\": \"std\" } } } Turn on the power supply output and run the program. You should see a constant 0.5V on the DSO, at about 15% duty cycle PWM wave, and a serial output state of about 15% and 0.5V. Lab Question: What do you think can be done to reduce reading fluctuation? How do you think that can be achieved? Reference mbed I/O API PwmOut AnalogOut AnalogIn","title":"Lab 3 : DAC and ADC"},{"location":"sep600/lab3/#lab-3-dac-and-adc","text":"Seneca College SEP600 Embedded Systems","title":"Lab 3 : DAC and ADC"},{"location":"sep600/lab3/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here:","title":"Introduction"},{"location":"sep600/lab3/#cortex-m4","text":"Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual","title":"Cortex M4"},{"location":"sep600/lab3/#frdm-k64f","text":"FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed","title":"FRDM-K64F"},{"location":"sep600/lab3/#frdm-k66f","text":"FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed","title":"FRDM-K66F"},{"location":"sep600/lab3/#materials","text":"Safety glasses (PPE) Breadboard Jumper Wires (1x) 1k\u03a9-10k\u03a9 Resistor (1x) Potentiometer (Optional)","title":"Materials"},{"location":"sep600/lab3/#preparation","text":"","title":"Preparation"},{"location":"sep600/lab3/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab3/#procedures","text":"","title":"Procedures"},{"location":"sep600/lab3/#part-1-pwm-output-vs-dac-output","text":"In Part 1, we'll set up a PWM and a DAC to compare the difference between the output. Connect a PWM output pin to CH1 of the DSO. Refer to the mbed board pages to identify which pin is a PWM pin. Connect a DAC output pin to CH2 of the DSO. Refer to the mbed board pages to identify which pin is a DAC pin. Upload the following code to generate a PWM and a DAC output. Remember, you'll need to replace PTXX with the PWM pin that you are using. int main() { // setup pins PwmOut pwm(PTXX); // replace with a PWM pin AnalogOut aout(DAC0_OUT); // pwm settings pwm.period(0.02f); // 50Hz pwm, 0.02s period printf(\"Program started!\\r\\n\"); // added to test serial while (true) { // loop to cycle from 0% to 100% for (float i = 0.0f; i < 1.0f; i += 0.01f) { aout = i; // set DAC out % pwm = i; // set PWM duty cycle % // delay for 10ms, 1000ms for each ramp up ThisThread::sleep_for(10ms); } // loop to cycle from 100% to 0% for (float i = 1.0f; i > 0.0f; i -= 0.01f) { aout = i; // set DAC out % pwm = i; // set PWM duty cycle % // delay for 10ms, 1000ms for each ramp down ThisThread::sleep_for(10ms); } } } Turn on the DSO and run the program. You should see something similar to the figure below on your DSO except it'll be a triangular wave instead of a sine wave. Figure 3.1 DAC and PWM output Lab Question: What circuit should you apply to the PWM output if you want to see the same waveform as the DAC output? Keep the DSO connected.","title":"Part 1: PWM Output vs DAC Output"},{"location":"sep600/lab3/#part-2-adc-input","text":"Next, we'll connect the ADC to an analog voltage input so it can be read into the microcontroller. The voltage signal will come from the bench power supply. To prevent damaging the ADC, we'll first use a voltage division to halve the signal. Never connect the power supply directly to the ADC without a resistor. Figure 3.2 Voltage division circuit for ADC input Assemble the voltage division circuit above on your breadboard and connect the voltage divider output to an analog input pin. Vs will be provided by the bench power supply. Ensure the power supply output is OFF. Optionally, you can use a potentiometer to achieve the same. As a precaution, we only want to supply a maximum of 3.3V to the ADC pin, this means the power supply output should never to above 6.6V. Set the power supply output to 1V. Add the following code in the main function of your code but before the while loop to set up an analog input pin. Remember, you'll need to replace PTXX with the PWM pin that you are using. int main() { ... AnalogIn ain(PTXX); // replace with a ADC pin ... } Next, replace the while loop with the following code so we are controlling the DAC output and the PWM duty cycle with the analog input. while (true) { i = ain; // read ADC aout = i; // set DAC out % pwm = i; // set PWM duty cycle % // delay for 10ms, 1000ms for each ramp up ThisThread::sleep_for(100ms); } Next, let's print the reading out as well. Modify your code to include the following respectively. while (true) { ... // print the percentage, 16 bit normalized values, and something we understand printf(\"percentage: %3.3f%% \", ain.read() * 100.0f); printf(\"normalized: 0x%04X \", ain.read_u16()); printf(\"normalized: %3.3fV \\n\", ain * 3.3); // % * 3.3V ... } Per Minimal printf and snprintf , as of mbed OS 6, printf no longer print floating point by default to save memory. In order to enable printing of floating point value, enable it by creating a file called mbed_app.json in the root project folder and add the following code to it. { \"target_overrides\": { \"*\": { \"target.printf_lib\": \"std\" } } } Turn on the power supply output and run the program. You should see a constant 0.5V on the DSO, at about 15% duty cycle PWM wave, and a serial output state of about 15% and 0.5V. Lab Question: What do you think can be done to reduce reading fluctuation? How do you think that can be achieved?","title":"Part 2: ADC Input"},{"location":"sep600/lab3/#reference","text":"mbed I/O API PwmOut AnalogOut AnalogIn","title":"Reference"},{"location":"sep600/lab4/","text":"Lab 4 : Serial UART and I2C Communication Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Cortex M4 Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed FRDM-K66F FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed Materials Safety glasses (PPE) Breadboard Jumper Wires Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Part 1: Onboard I2C Accelerometer and Magnetometer In Part 1, we'll take a look at how to get reading from the onboard accelerometer and magnetometer. Check to see if the accelerometer is assembled on your board. NXP had a production change in 2023 and no longer assembles the FXOS8700CQ onto the Freedom board. If your board is missing the accelerometer chip (as shown in Figure 4.1 below), this part of the Lab will not work. The location U8 on the Freedom Board should be assembled with the FXOS8700CQ accelerometer chip. Figure 4.1 Freedom Board with missing FXOS8700CQ accelerometer chip To use the FXOS8700CQ, you'll need to add the FXOS8700CQ library to your project. Start Mbed Studio then go to File > Add Library to Active Program. When prompted, provide the following link https://os.mbed.com/teams/NXP/code/FXOS8700Q/ . The I2C pins used to connect to the accelerometer for the Freedom board are as follows: K64F K66F SDA PTE25 PTD9 SCL PTE24 PTD8 Start your program with the following code to include the proper library and set up I2C. #include \"mbed.h\" #include \"FXOS8700Q.h\" I2C i2c(I2C_SDA, I2C_SCL); // replace with I2C pins Next, we'll create the accelerometer and magnetometer objects using the I2C object we created and the accelerometer's address. You can find the address in the header file. FXOS8700QAccelerometer acc(i2c, FXOS8700CQ_SLAVE_ADDR1); FXOS8700QMagnetometer mag(i2c, FXOS8700CQ_SLAVE_ADDR1); Lab Question: Look into the header file to find the slave address in HEX? Declare the variables for the sensor data within the main function then enable the sensor. motion_data_units_t acc_data, mag_data; float faX, faY, faZ, fmX, fmY, fmZ, tmp_float; acc.enable(); mag.enable(); Add a while loop to get accelerometer readings and print it out. while (true) { acc.getAxis(acc_data); mag.getAxis(mag_data); printf(\"%3.3f %3.3f\\r\\n\", acc_data.x, mag_data.x); ThisThread::sleep_for(500ms); } Per Minimal printf and snprintf , as of mbed OS 6, printf no longer prints floating point by default to save memory. To enable printing of floating point value, enable it by creating a file called mbed_app.json in the root project folder and adding the following code to it. { \"target_overrides\": { \"*\": { \"target.printf_lib\": \"std\" } } } Run your program and you should now see accelerometer and magnetometer readings. Refer to the FXOS8700Q libraries for other library functions and reading you can get. Lab Question: Try getting readings from different axes to figure out which direction is X, Y, and Z? When there is acceleration in an axis, you'll get acceleration reading on that axis (including gravity). Part 2: Visualize I2C Signal Power off the Freedom board and connect the SDA pin to CH1 and the SCL pin to CH2 of the oscilloscope. If you are using the K66F board, use I2C1 at PTC11 and PTC10 for this part of the lab. With the I2C code running, adjust the oscilloscope to see the full I2C data frame. Use the \"Serial\" option under Measure on the right of the face plate to align the I2C signal. If Serial measurement is not available, you might need to do this manually. If you cannot see the I2C signal, decrease the delay in each loop so data are sent more often and use \"Single\" reading instead of continuous readings. Lab Question: Using the figure below as a reference, identify the start condition, the address, ACK, data, and stop condition of your I2C signal. You should be able to identify the address you are sending from Part 1. Figure 4.2 I2C data frame [1] Part 3: UART Communication In this part of the lab, you'll be working with the group beside you to communicate between processor board. Add the following code to your program create an unbuffered serial object for UART. K64F K66F UART TX PTC17 PTC4 UART RX PTC16 PTC3 static BufferedSerial serial_port(UART_TX, UART_RX, 9600); // replace with UART pins Add the following in your while loop to send some data. static char c = 'a'; static int x = 1; serial_port.write(&c, 1); c += x; if (c >= 'z' || c <= 'a') x *= -1; ThisThread::sleep_for(1s); Add the following code in the while loop to read incoming UART data from buffer and print it to terminal. if (serial_port.read(&c, 1)) { // Echo the input back to the terminal. ThisThread::sleep_for(100ms); // allow reading to finish printf(\"%c\\n\", c); } Connect the UART TX pin from one board to the UART RX pin on another board as well as a common ground. Once you run the program, the TX board will start sending a char per loop to the RX board and the received data will be displayed on the serial console. Lab Question: Change your code to send multiple characters through UART. Reference [1] https://learn.sparkfun.com/tutorials/i2c/all UnbufferedSerial","title":"Lab 4 : Serial UART and I2C Communication"},{"location":"sep600/lab4/#lab-4-serial-uart-and-i2c-communication","text":"Seneca College SEP600 Embedded Systems","title":"Lab 4 : Serial UART and I2C Communication"},{"location":"sep600/lab4/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here:","title":"Introduction"},{"location":"sep600/lab4/#cortex-m4","text":"Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual","title":"Cortex M4"},{"location":"sep600/lab4/#frdm-k64f","text":"FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed","title":"FRDM-K64F"},{"location":"sep600/lab4/#frdm-k66f","text":"FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed","title":"FRDM-K66F"},{"location":"sep600/lab4/#materials","text":"Safety glasses (PPE) Breadboard Jumper Wires","title":"Materials"},{"location":"sep600/lab4/#preparation","text":"","title":"Preparation"},{"location":"sep600/lab4/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab4/#procedures","text":"","title":"Procedures"},{"location":"sep600/lab4/#part-1-onboard-i2c-accelerometer-and-magnetometer","text":"In Part 1, we'll take a look at how to get reading from the onboard accelerometer and magnetometer. Check to see if the accelerometer is assembled on your board. NXP had a production change in 2023 and no longer assembles the FXOS8700CQ onto the Freedom board. If your board is missing the accelerometer chip (as shown in Figure 4.1 below), this part of the Lab will not work. The location U8 on the Freedom Board should be assembled with the FXOS8700CQ accelerometer chip. Figure 4.1 Freedom Board with missing FXOS8700CQ accelerometer chip To use the FXOS8700CQ, you'll need to add the FXOS8700CQ library to your project. Start Mbed Studio then go to File > Add Library to Active Program. When prompted, provide the following link https://os.mbed.com/teams/NXP/code/FXOS8700Q/ . The I2C pins used to connect to the accelerometer for the Freedom board are as follows: K64F K66F SDA PTE25 PTD9 SCL PTE24 PTD8 Start your program with the following code to include the proper library and set up I2C. #include \"mbed.h\" #include \"FXOS8700Q.h\" I2C i2c(I2C_SDA, I2C_SCL); // replace with I2C pins Next, we'll create the accelerometer and magnetometer objects using the I2C object we created and the accelerometer's address. You can find the address in the header file. FXOS8700QAccelerometer acc(i2c, FXOS8700CQ_SLAVE_ADDR1); FXOS8700QMagnetometer mag(i2c, FXOS8700CQ_SLAVE_ADDR1); Lab Question: Look into the header file to find the slave address in HEX? Declare the variables for the sensor data within the main function then enable the sensor. motion_data_units_t acc_data, mag_data; float faX, faY, faZ, fmX, fmY, fmZ, tmp_float; acc.enable(); mag.enable(); Add a while loop to get accelerometer readings and print it out. while (true) { acc.getAxis(acc_data); mag.getAxis(mag_data); printf(\"%3.3f %3.3f\\r\\n\", acc_data.x, mag_data.x); ThisThread::sleep_for(500ms); } Per Minimal printf and snprintf , as of mbed OS 6, printf no longer prints floating point by default to save memory. To enable printing of floating point value, enable it by creating a file called mbed_app.json in the root project folder and adding the following code to it. { \"target_overrides\": { \"*\": { \"target.printf_lib\": \"std\" } } } Run your program and you should now see accelerometer and magnetometer readings. Refer to the FXOS8700Q libraries for other library functions and reading you can get. Lab Question: Try getting readings from different axes to figure out which direction is X, Y, and Z? When there is acceleration in an axis, you'll get acceleration reading on that axis (including gravity).","title":"Part 1: Onboard I2C Accelerometer and Magnetometer"},{"location":"sep600/lab4/#part-2-visualize-i2c-signal","text":"Power off the Freedom board and connect the SDA pin to CH1 and the SCL pin to CH2 of the oscilloscope. If you are using the K66F board, use I2C1 at PTC11 and PTC10 for this part of the lab. With the I2C code running, adjust the oscilloscope to see the full I2C data frame. Use the \"Serial\" option under Measure on the right of the face plate to align the I2C signal. If Serial measurement is not available, you might need to do this manually. If you cannot see the I2C signal, decrease the delay in each loop so data are sent more often and use \"Single\" reading instead of continuous readings. Lab Question: Using the figure below as a reference, identify the start condition, the address, ACK, data, and stop condition of your I2C signal. You should be able to identify the address you are sending from Part 1. Figure 4.2 I2C data frame [1]","title":"Part 2: Visualize I2C Signal"},{"location":"sep600/lab4/#part-3-uart-communication","text":"In this part of the lab, you'll be working with the group beside you to communicate between processor board. Add the following code to your program create an unbuffered serial object for UART. K64F K66F UART TX PTC17 PTC4 UART RX PTC16 PTC3 static BufferedSerial serial_port(UART_TX, UART_RX, 9600); // replace with UART pins Add the following in your while loop to send some data. static char c = 'a'; static int x = 1; serial_port.write(&c, 1); c += x; if (c >= 'z' || c <= 'a') x *= -1; ThisThread::sleep_for(1s); Add the following code in the while loop to read incoming UART data from buffer and print it to terminal. if (serial_port.read(&c, 1)) { // Echo the input back to the terminal. ThisThread::sleep_for(100ms); // allow reading to finish printf(\"%c\\n\", c); } Connect the UART TX pin from one board to the UART RX pin on another board as well as a common ground. Once you run the program, the TX board will start sending a char per loop to the RX board and the received data will be displayed on the serial console. Lab Question: Change your code to send multiple characters through UART.","title":"Part 3: UART Communication"},{"location":"sep600/lab4/#reference","text":"[1] https://learn.sparkfun.com/tutorials/i2c/all UnbufferedSerial","title":"Reference"},{"location":"sep600/lab5/","text":"Lab 5 : Parallel LCD and Interrupt Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Cortex M4 Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed FRDM-K66F FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed Materials Safety glasses (PPE) Breadboard LCD Display (Parallel**) 1k\u03a9 Resistors Jumper Wires ** If you are using an I2C LCD, connect the LCD to the I2C pins and use the I2C library instead of the parallel LCD library. Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Part 1: Parallel LCD In Part 1, we'll take a look at how to connect and display characters to a parallel LCD. A parallel 16x2 LCD shown in Figure 5.1 usually uses 4-wire for parallel data transfer plus 2-wire for enable and register select. A 8-wire data configuration is sometimes used but normally not required. Figure 5.1 16x2 LCD The typical pinout and connection for a 16x2 LCD are given below. Please keep in mind that depending on the manufacturer, some labels and configurations may vary. LCD Pin # LCD label K64F/K66F Pin 1 GND / VSS GND / 0V 2 VDD / VCC 5V 3 VO 1k\u03a9 to GND / 0V 4 RS D9 5 R/W GND / 0V 6 E D8 7 DB0 N/C 8 DB1 N/C 9 DB2 N/C 10 DB3 N/C 11 DB4 D4 12 DB5 D5 13 DB6 D6 14 DB7 D7 15 LED+ 1k\u03a9 to 5V 16 LED- N/C Some models work with 3.3V instead of 5V VO pin configuration varies depending on the manufacturer. A potentiometer can be used instead of a 1k\u03a9 Resistor for adjustable contrast You may change the pin to use on the K64F/K66F board depending on your application and pin availability. Acquire an LCD and resistor then connect them to the Freedom K64F/K66F board as per the connection table given above and the diagram below. If you are using an I2C LCD, connect the LCD to an I2C pin. Figure 5.2 LCD connection with Freedom board Open mbed Studio and install the following library to your project depending if you are using the Parallel or I2C version of the LCD. Parallel LCD: https://os.mbed.com/users/sstaub/code/mbedLCD/ I2C LCD: https://os.mbed.com/users/sstaub/code/mbedLCDi2c/ Use the following code to output some message on the display. #include \"mbed.h\" #include \"LCD.h\" LCD lcd(D9, D8, D4, D5, D6, D7, LCD16x2); // RS, EN, D4-D7, Type int main() { lcd.cls(); // clear display lcd.locate(0, 0); // set cursor location lcd.printf(\"START\\n\"); // display text ThisThread::sleep_for(2s); lcd.cls(); // clear display lcd.locate(0, 0); // set cursor location lcd.printf(\"Hello World!\\n\"); // display text } After uploading your code, the LCD should show \"START\" for 2 seconds then \"Hello World!\". Lab Question: Modify your code to display your name and student number on row 1 and your lab partner's name and student name on row 2 (or be creative like \"SEP600 Embedded System is Awesome\"). Since the message will be too wide for the LCD, display the text as a horizontal scrolling message at a reasonable rate. Hint: There are many ways to do this. Refer to the library documentation on how to move the print cursor. Part 2: Interrupt Interrupt is a way for the microcontroller to listen to events without continuously polling from the input. Connect a pull-up or pull-down button to any digital pin of your choosing. Add the following code before main() to create an interrupt object. InterruptIn button(PTXX); Add the following interrupt routine before main() and add the appropriate code for displaying a message on the LCD. void button_isr(){ // display an interrupt messages on the LCD // USE wait_us for delay // DO NOT use ThisThread::sleep_for } Within main() Attach the interrupt routine with the button and adjust for rise or fall edge depending on your circuit configuration. button.rise(&button_isr); Upload and test your interrupt. Reference InterruptIn","title":"Lab 5 : Parallel LCD and Interrupt"},{"location":"sep600/lab5/#lab-5-parallel-lcd-and-interrupt","text":"Seneca College SEP600 Embedded Systems","title":"Lab 5 : Parallel LCD and Interrupt"},{"location":"sep600/lab5/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here:","title":"Introduction"},{"location":"sep600/lab5/#cortex-m4","text":"Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual","title":"Cortex M4"},{"location":"sep600/lab5/#frdm-k64f","text":"FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed","title":"FRDM-K64F"},{"location":"sep600/lab5/#frdm-k66f","text":"FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed","title":"FRDM-K66F"},{"location":"sep600/lab5/#materials","text":"Safety glasses (PPE) Breadboard LCD Display (Parallel**) 1k\u03a9 Resistors Jumper Wires ** If you are using an I2C LCD, connect the LCD to the I2C pins and use the I2C library instead of the parallel LCD library.","title":"Materials"},{"location":"sep600/lab5/#preparation","text":"","title":"Preparation"},{"location":"sep600/lab5/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab5/#procedures","text":"","title":"Procedures"},{"location":"sep600/lab5/#part-1-parallel-lcd","text":"In Part 1, we'll take a look at how to connect and display characters to a parallel LCD. A parallel 16x2 LCD shown in Figure 5.1 usually uses 4-wire for parallel data transfer plus 2-wire for enable and register select. A 8-wire data configuration is sometimes used but normally not required. Figure 5.1 16x2 LCD The typical pinout and connection for a 16x2 LCD are given below. Please keep in mind that depending on the manufacturer, some labels and configurations may vary. LCD Pin # LCD label K64F/K66F Pin 1 GND / VSS GND / 0V 2 VDD / VCC 5V 3 VO 1k\u03a9 to GND / 0V 4 RS D9 5 R/W GND / 0V 6 E D8 7 DB0 N/C 8 DB1 N/C 9 DB2 N/C 10 DB3 N/C 11 DB4 D4 12 DB5 D5 13 DB6 D6 14 DB7 D7 15 LED+ 1k\u03a9 to 5V 16 LED- N/C Some models work with 3.3V instead of 5V VO pin configuration varies depending on the manufacturer. A potentiometer can be used instead of a 1k\u03a9 Resistor for adjustable contrast You may change the pin to use on the K64F/K66F board depending on your application and pin availability. Acquire an LCD and resistor then connect them to the Freedom K64F/K66F board as per the connection table given above and the diagram below. If you are using an I2C LCD, connect the LCD to an I2C pin. Figure 5.2 LCD connection with Freedom board Open mbed Studio and install the following library to your project depending if you are using the Parallel or I2C version of the LCD. Parallel LCD: https://os.mbed.com/users/sstaub/code/mbedLCD/ I2C LCD: https://os.mbed.com/users/sstaub/code/mbedLCDi2c/ Use the following code to output some message on the display. #include \"mbed.h\" #include \"LCD.h\" LCD lcd(D9, D8, D4, D5, D6, D7, LCD16x2); // RS, EN, D4-D7, Type int main() { lcd.cls(); // clear display lcd.locate(0, 0); // set cursor location lcd.printf(\"START\\n\"); // display text ThisThread::sleep_for(2s); lcd.cls(); // clear display lcd.locate(0, 0); // set cursor location lcd.printf(\"Hello World!\\n\"); // display text } After uploading your code, the LCD should show \"START\" for 2 seconds then \"Hello World!\". Lab Question: Modify your code to display your name and student number on row 1 and your lab partner's name and student name on row 2 (or be creative like \"SEP600 Embedded System is Awesome\"). Since the message will be too wide for the LCD, display the text as a horizontal scrolling message at a reasonable rate. Hint: There are many ways to do this. Refer to the library documentation on how to move the print cursor.","title":"Part 1: Parallel LCD"},{"location":"sep600/lab5/#part-2-interrupt","text":"Interrupt is a way for the microcontroller to listen to events without continuously polling from the input. Connect a pull-up or pull-down button to any digital pin of your choosing. Add the following code before main() to create an interrupt object. InterruptIn button(PTXX); Add the following interrupt routine before main() and add the appropriate code for displaying a message on the LCD. void button_isr(){ // display an interrupt messages on the LCD // USE wait_us for delay // DO NOT use ThisThread::sleep_for } Within main() Attach the interrupt routine with the button and adjust for rise or fall edge depending on your circuit configuration. button.rise(&button_isr); Upload and test your interrupt.","title":"Part 2: Interrupt"},{"location":"sep600/lab5/#reference","text":"InterruptIn","title":"Reference"},{"location":"sep600/lab6/","text":"Lab 6 Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Cortex M4 Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed FRDM-K66F FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed Materials Safety glasses (PPE) Breadboard Jumper Wires Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures In this lab, we'll explore the use of software filtering techniques to remove noise from a digital signal and then plot the data on a computer. We'll also explore the idea of multi-threading to handle the two tasks. Start the function generator to output a 1Vpp 1kHz Noise (or Triangular) wave with a 2V DC offset. Connect the output of the function generator to an ADC (Analog input) pin on the K64F or K66F board. Use the following code to read the signal from the ADC channel. Replace PTXX with the pin that you are using. #include \"mbed.h\" int main() { AnalogIn ain(PTXX); // Replace with your ADC pin float reading = 0; // for saving readings while (true) { reading = ain; // read ADC printf(\"Reading: %d\\n\", (int) (reading * 100)); // print as int // delay for 1ms for each reading ThisThread::sleep_for(1ms); } } Your serial output should now be flooded with data output between 0 to 100. Next, instead of printing data directly from within the while loop of the main() function, we'll put the printing into a thread so it won't interfere with the ADC reading and let the processor decide how to optimize the process. Move the printf statement into a new function called print_data() . To pass variables into a thread, we'll make use of a pointer. Add the following code above the main() function. void print_data(float *reading) { while (true) { printf(\"%d\\n\", (int) (*reading * 100)); // delay for 1ms for between print ThisThread::sleep_for(1ms); } } Next, we'll define a new thread called print_data_thread and use print_data as the callback function and pass the address of reading as the argument. Add the following above the print_data() function. Thread print_data_thread; Add the following in the main() function to start the thread. print_data_thread.start(callback(print_data, &reading)); Remember to remove the printf statement from your main() function. Run your new code. It should be doing the same task as before but now it is running in multi-thread. Let's read the data from the computer using Python and plot it out. Run the following Python script on your computer. Install pyserial using pip install pyserial and matplotlib using pip install matplotlib as required. import serial import matplotlib.pyplot as plt import numpy as np plt.ion() fig=plt.figure() x = list() y = list() i = 0 ser = serial.Serial('XXXX', 9600) # Replace XXXX with your serial port ser.close() ser.open() while True: data = ser.readline() x.append(i) y.append(data.decode()) plt.scatter(i, float(data.decode())) i += 1 plt.show() plt.pause(0.000001) Run the Python code and it should open the specified serial and start plotting the data. As you can tell, it is not the most optimized plotting code. Feel free to improve the plotting. Figure 6.1 From what you can tell, the data is a bit noisy. Your task is to add the simple IIR filter discussed in class to smooth out the data on the controller. This means adding a new variable called alpha and old_reading to save the reading for the next iteration. Reference Thread Mutex","title":"Lab 6"},{"location":"sep600/lab6/#lab-6","text":"Seneca College SEP600 Embedded Systems","title":"Lab 6"},{"location":"sep600/lab6/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here:","title":"Introduction"},{"location":"sep600/lab6/#cortex-m4","text":"Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual","title":"Cortex M4"},{"location":"sep600/lab6/#frdm-k64f","text":"FRDM-K64F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K64 Reference Manual (From nxp.com ) FRDM-K64F mbed","title":"FRDM-K64F"},{"location":"sep600/lab6/#frdm-k66f","text":"FRDM-K66F Freedom Module User\u2019s Guide (From nxp.com ) Kinetis K66 Reference Manual (From nxp.com ) FRDM-K66F mbed","title":"FRDM-K66F"},{"location":"sep600/lab6/#materials","text":"Safety glasses (PPE) Breadboard Jumper Wires","title":"Materials"},{"location":"sep600/lab6/#preparation","text":"","title":"Preparation"},{"location":"sep600/lab6/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab6/#procedures","text":"In this lab, we'll explore the use of software filtering techniques to remove noise from a digital signal and then plot the data on a computer. We'll also explore the idea of multi-threading to handle the two tasks. Start the function generator to output a 1Vpp 1kHz Noise (or Triangular) wave with a 2V DC offset. Connect the output of the function generator to an ADC (Analog input) pin on the K64F or K66F board. Use the following code to read the signal from the ADC channel. Replace PTXX with the pin that you are using. #include \"mbed.h\" int main() { AnalogIn ain(PTXX); // Replace with your ADC pin float reading = 0; // for saving readings while (true) { reading = ain; // read ADC printf(\"Reading: %d\\n\", (int) (reading * 100)); // print as int // delay for 1ms for each reading ThisThread::sleep_for(1ms); } } Your serial output should now be flooded with data output between 0 to 100. Next, instead of printing data directly from within the while loop of the main() function, we'll put the printing into a thread so it won't interfere with the ADC reading and let the processor decide how to optimize the process. Move the printf statement into a new function called print_data() . To pass variables into a thread, we'll make use of a pointer. Add the following code above the main() function. void print_data(float *reading) { while (true) { printf(\"%d\\n\", (int) (*reading * 100)); // delay for 1ms for between print ThisThread::sleep_for(1ms); } } Next, we'll define a new thread called print_data_thread and use print_data as the callback function and pass the address of reading as the argument. Add the following above the print_data() function. Thread print_data_thread; Add the following in the main() function to start the thread. print_data_thread.start(callback(print_data, &reading)); Remember to remove the printf statement from your main() function. Run your new code. It should be doing the same task as before but now it is running in multi-thread. Let's read the data from the computer using Python and plot it out. Run the following Python script on your computer. Install pyserial using pip install pyserial and matplotlib using pip install matplotlib as required. import serial import matplotlib.pyplot as plt import numpy as np plt.ion() fig=plt.figure() x = list() y = list() i = 0 ser = serial.Serial('XXXX', 9600) # Replace XXXX with your serial port ser.close() ser.open() while True: data = ser.readline() x.append(i) y.append(data.decode()) plt.scatter(i, float(data.decode())) i += 1 plt.show() plt.pause(0.000001) Run the Python code and it should open the specified serial and start plotting the data. As you can tell, it is not the most optimized plotting code. Feel free to improve the plotting. Figure 6.1 From what you can tell, the data is a bit noisy. Your task is to add the simple IIR filter discussed in class to smooth out the data on the controller. This means adding a new variable called alpha and old_reading to save the reading for the next iteration.","title":"Procedures"},{"location":"sep600/lab6/#reference","text":"Thread Mutex","title":"Reference"},{"location":"sep600/lab7/","text":"Lab 7 Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide Kinetis K64 Reference Manual FRDM-K66F Freedom Module User\u2019s Guide Kinetis K66 Reference Manual In the previous lab, we explored the use of the built-in ConfigTools in MCUXpresso IDE to help with setting up interrupts. In this lab, we'll explore how to use assembly instruction to setup GPIO as well as using the ConfigTools to do the same. Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Reference","title":"Lab 7"},{"location":"sep600/lab7/#lab-7","text":"Seneca College SEP600 Embedded Systems","title":"Lab 7"},{"location":"sep600/lab7/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide Kinetis K64 Reference Manual FRDM-K66F Freedom Module User\u2019s Guide Kinetis K66 Reference Manual In the previous lab, we explored the use of the built-in ConfigTools in MCUXpresso IDE to help with setting up interrupts. In this lab, we'll explore how to use assembly instruction to setup GPIO as well as using the ConfigTools to do the same.","title":"Introduction"},{"location":"sep600/lab7/#preparation","text":"","title":"Preparation"},{"location":"sep600/lab7/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab7/#procedures","text":"","title":"Procedures"},{"location":"sep600/lab7/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab.","title":"Post-Lab Questions"},{"location":"sep600/lab7/#reference","text":"","title":"Reference"},{"location":"sep600/lab8/","text":"Lab 8 Seneca College SEP600 Embedded Systems Introduction Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide Kinetis K64 Reference Manual FRDM-K66F Freedom Module User\u2019s Guide Kinetis K66 Reference Manual In the previous lab, we explored the use of the built-in ConfigTools in MCUXpresso IDE to help with setting up interrupts. In this lab, we'll explore how to use assembly instruction to setup GPIO as well as using the ConfigTools to do the same. Preparation Lab Preparation Question Read over the lab and understand the procedures. Procedures Post-Lab Questions Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab. Reference","title":"Lab 8"},{"location":"sep600/lab8/#lab-8","text":"Seneca College SEP600 Embedded Systems","title":"Lab 8"},{"location":"sep600/lab8/#introduction","text":"Documentation of the Cortex-M4 instruction set, board user's guide, and the microcontroller reference manual can be found here: Arm Cortex-M4 Processor Technical Reference Manual Revision ARMv7-M Architecture Reference Manual FRDM-K64F Freedom Module User\u2019s Guide Kinetis K64 Reference Manual FRDM-K66F Freedom Module User\u2019s Guide Kinetis K66 Reference Manual In the previous lab, we explored the use of the built-in ConfigTools in MCUXpresso IDE to help with setting up interrupts. In this lab, we'll explore how to use assembly instruction to setup GPIO as well as using the ConfigTools to do the same.","title":"Introduction"},{"location":"sep600/lab8/#preparation","text":"","title":"Preparation"},{"location":"sep600/lab8/#lab-preparation-question","text":"Read over the lab and understand the procedures.","title":"Lab Preparation Question"},{"location":"sep600/lab8/#procedures","text":"","title":"Procedures"},{"location":"sep600/lab8/#post-lab-questions","text":"Using the skills and knowledge acquired from this lab, answer the following post-lab question(s) on Blackboard. Due one week after the lab.","title":"Post-Lab Questions"},{"location":"sep600/lab8/#reference","text":"","title":"Reference"},{"location":"ses250/","text":"SES250 Lab Manual Labs Lab Instruction Lab Safety Lab Supplies Lab 1 : Electrostatics and Triboelectric Series Lab 2 : Digital Multimeter, Power Supply, and Ohm's Law Lab 3 : Series and Parallel Resistive Circuit Lab 4 : Kirchhoff's Laws Lab 5 : Th\u00e9venin Theorem Lab 6 : Digital Storage Oscilloscope (DSO) Lab 7 : Capacitor and RC Circuit Lab 8 : RL Circuit and Filters Lab 9 : RC and RL Circuit in AC Lab 10 : RLC Circuit Resonance Lab Project Lab Project","title":"SES250 Electromagnatics"},{"location":"ses250/#ses250-lab-manual","text":"","title":"SES250 Lab Manual"},{"location":"ses250/#labs","text":"Lab Instruction Lab Safety Lab Supplies Lab 1 : Electrostatics and Triboelectric Series Lab 2 : Digital Multimeter, Power Supply, and Ohm's Law Lab 3 : Series and Parallel Resistive Circuit Lab 4 : Kirchhoff's Laws Lab 5 : Th\u00e9venin Theorem Lab 6 : Digital Storage Oscilloscope (DSO) Lab 7 : Capacitor and RC Circuit Lab 8 : RL Circuit and Filters Lab 9 : RC and RL Circuit in AC Lab 10 : RLC Circuit Resonance","title":"Labs"},{"location":"ses250/#lab-project","text":"Lab Project","title":"Lab Project"},{"location":"ses250/instruction/","text":"Lab Instructions Seneca College SES250 Electromagnatics Objectives Master the use of fundamental laboratory equipment Master the basic techniques of conducting experiments and taking measurement Experimentally verify the theory and concept studied in lectures Materials/Equipment required by each student Safety Glasses Bound Notebook Lab Electronics Kit (Details TBA) More details on where you can purchase them can be found in the Lab Supplies page. Each student is expected to Maintain a bound (ie. No loose sheets) laboratory/engineering notebook. The notebook shall include all preparations work and documentation of all work done during the laboratory. You are not required to have a new notebook. You can continue using one you already have or share it with another course. Always write in pen, never in pencil, and never use white-out in the notebook. If a mistake needs to be corrected, it shall be neatly crossed out with a single line and corrections shall be added. Always prepare for the laboratory experiment by writing a brief description of the experimental procedures in your own words and copying any graphs and tables to be used for documentation during the experiment into the notebook. Update the notebook continually during each experiment and include all measured data, tables, graphs, and details of relevant measurement techniques, computations, and conclusions. Bound Notebook Ring Notebook Arrive on time and be well-prepared for each laboratory session. A complete preparation includes, aside from a description of the procedures, the completion of the preparatory assignment for the experiment. Finish all parts of the experiment on time. Thorough preparatory work is critical. Laboratory Code of Behavior Students are expected to conduct themselves in a professional and safe manner at all times. Know where is the nearest fire extinguisher and the location of the safety station. No food or drink at any time inside the laboratory Safety glasses are mandatory when the power is ON Other precautionary safety equipment will be used or worn when necessary. No open-toed shoes or sandals. Long hair must be tied back. All laboratory equipment brought into the laboratory must be CSA approved and in good working order Vandalism of any kind will not be tolerated. Please note that security cameras are in place for the protection of college property and occupant safety. Offenders will be subject to the terms of the College\u2019s Student Rights and Responsibilities Policy. Wash hands after soldering. Failure to comply with the Electronics Laboratory Code of Behavior will result in a lab grade of zero (0) and you\u2019ll be asked to leave the laboratory. Other guidelines AGAIN: No food or drink inside the laboratory Keep the laboratory neat and clean, and return items to their original locations at the completion of each lab session.","title":"Lab Instructions"},{"location":"ses250/instruction/#lab-instructions","text":"Seneca College SES250 Electromagnatics","title":"Lab Instructions"},{"location":"ses250/instruction/#objectives","text":"Master the use of fundamental laboratory equipment Master the basic techniques of conducting experiments and taking measurement Experimentally verify the theory and concept studied in lectures","title":"Objectives"},{"location":"ses250/instruction/#materialsequipment-required-by-each-student","text":"Safety Glasses Bound Notebook Lab Electronics Kit (Details TBA) More details on where you can purchase them can be found in the Lab Supplies page.","title":"Materials/Equipment required by each student"},{"location":"ses250/instruction/#each-student-is-expected-to","text":"Maintain a bound (ie. No loose sheets) laboratory/engineering notebook. The notebook shall include all preparations work and documentation of all work done during the laboratory. You are not required to have a new notebook. You can continue using one you already have or share it with another course. Always write in pen, never in pencil, and never use white-out in the notebook. If a mistake needs to be corrected, it shall be neatly crossed out with a single line and corrections shall be added. Always prepare for the laboratory experiment by writing a brief description of the experimental procedures in your own words and copying any graphs and tables to be used for documentation during the experiment into the notebook. Update the notebook continually during each experiment and include all measured data, tables, graphs, and details of relevant measurement techniques, computations, and conclusions. Bound Notebook Ring Notebook Arrive on time and be well-prepared for each laboratory session. A complete preparation includes, aside from a description of the procedures, the completion of the preparatory assignment for the experiment. Finish all parts of the experiment on time. Thorough preparatory work is critical.","title":"Each student is expected to"},{"location":"ses250/instruction/#laboratory-code-of-behavior","text":"Students are expected to conduct themselves in a professional and safe manner at all times. Know where is the nearest fire extinguisher and the location of the safety station. No food or drink at any time inside the laboratory Safety glasses are mandatory when the power is ON Other precautionary safety equipment will be used or worn when necessary. No open-toed shoes or sandals. Long hair must be tied back. All laboratory equipment brought into the laboratory must be CSA approved and in good working order Vandalism of any kind will not be tolerated. Please note that security cameras are in place for the protection of college property and occupant safety. Offenders will be subject to the terms of the College\u2019s Student Rights and Responsibilities Policy. Wash hands after soldering. Failure to comply with the Electronics Laboratory Code of Behavior will result in a lab grade of zero (0) and you\u2019ll be asked to leave the laboratory.","title":"Laboratory Code of Behavior"},{"location":"ses250/instruction/#other-guidelines","text":"AGAIN: No food or drink inside the laboratory Keep the laboratory neat and clean, and return items to their original locations at the completion of each lab session.","title":"Other guidelines"},{"location":"ses250/lab-project/","text":"Lab Project : RC Lowpass Filters Seneca College SES250 Electromagnatics Due Date: Sunday, Apr 7, 11:59 PM Purposes To understand simple capacitive low-pass filter circuit To understand how to write a lab report Objectives Assemble electronic components onto a breadboard Measure the filtering of signals using a Digital Storage Oscilloscope (DSO) Document your processes and results in a lab report Description Using what you've learned from Lab 7 and Lab 8 about capacitive and low-pass filters, your task is to create a capacitive low-pass circuit (series RC circuit) to filter out a noisy signal. Task You may work in groups of up to 2 members. Design a series RC circuit that will filter out noise above 1kHz but not signal below 1kHz (ie. the cutoff frequency should be within 10% of 1kHz). You can use any of the resistors and capacitors you have in your lab kit. Apply a signal with a 2V DC offset with a 1kHz 1Vpp triangular (saw) wave to simulate noise to your circuit. Remember the function generator should be set to High-Z mode. Using the DSO, demostrate that the 1kHz 1Vpp noise is reduced to at least 70.7% after passing through your circuit (ie. show the raw signal with noise and the filtered signal). Document your procedure and result in a lab report. Deliverables Plagiarism is using another individual\u2019s (INCLUDING AI) work (e.g., words, images, ideas, logic, phrases, signatures or computations) and presenting it as one\u2019s own, without properly citing the source. Refer to: Academic Integrity Policy A lab report of no more than 5 pages and less than 1000 words consisting of the following sections: Introduction of the problem being studied and any relevant background information regarding to low-pass filter. (max. 300 words) Methods and Materials describing your circuit, and the materials and steps you used to test your circuit. This section must consist of figures and photos of: list of materials/components used list of steps you've taken (ie. someone must be able to repeat what you've done) circuit diagram breadboard diagram photos of your component setup on a breadboard photos of your test using a function generator and DSO Results from testing of your circuit by showing photos or a descriptive sketch of what you see from the DSO and measurement of any relevant voltage or current readings Discussion of your finding and explain what you see from the result. How can you prove that the 1kHz noise is filtered to 70.7%? Also discussed the following if applicable: Are there any unexpected results or errors? If you suspect any errors, analyze them. Explain your result with relevant theories. Conclusion of what you've done, what challenges you faced, and what you've learned. Reference to cite any resource you've used in your introduction, methods, or discussion section. (Not included in pages and word count) The report must be in PDF format with the name and student number of all members. Deadline and Late Submission Submit the lab report on Blackboard by the submission deadline. Only one submission is required per group. Any late submission will receive a 50% mark deduction within 24 hours after the deadline, no mark will be rewarded afterwards. Marking Rubrics Introduction (10 marks) Did this section clearly explain all necessary concepts and theories to understand the problem? Yes Somewhat Minimal No Marks 10 7 5 0 Methods and Materials (5 marks) Did this section list all materials/components used? Yes Somewhat No Marks 5 3 0 (25 marks) Did this section list all steps that were taken with photos and figures (ie. someone must be able to repeat what you've done) Yes Somewhat Minimal No Marks 25 15 10 0 (5 marks) Did this section contain a diagram of the circuit? Yes Somewhat No Marks 5 3 0 (5 marks) Did this section contain a diagram of the breadboard configuration? Yes Somewhat No Marks 5 3 0 Results (10 marks) Did this section display results from the testing by showing photos or descriptive sketches of what you see from the DSO and measurement of any relevant voltage or current readings without any bias discussion? Yes Somewhat Minimal No Marks 10 7 5 0 Discussion (20 marks) Did this section clearly explain the result and finding by providing a good discussion of the test and prove? Yes Somewhat Minimal No Marks 20 14 10 0 Conclusion (10 marks) Did this section provide a clear summary of what you've done, what challenges you faced, and what you've learned? Yes Somewhat Minimal No Marks 10 7 5 0 Reference (10 marks) Was a proper citation given in a recognizable reference format such as IEEE or MLA? Yes Somewhat Minimal No Marks 10 7 5 0","title":"Lab Project : RC Lowpass Filters"},{"location":"ses250/lab-project/#lab-project-rc-lowpass-filters","text":"Seneca College SES250 Electromagnatics Due Date: Sunday, Apr 7, 11:59 PM","title":"Lab Project : RC Lowpass Filters"},{"location":"ses250/lab-project/#purposes","text":"To understand simple capacitive low-pass filter circuit To understand how to write a lab report","title":"Purposes"},{"location":"ses250/lab-project/#objectives","text":"Assemble electronic components onto a breadboard Measure the filtering of signals using a Digital Storage Oscilloscope (DSO) Document your processes and results in a lab report","title":"Objectives"},{"location":"ses250/lab-project/#description","text":"Using what you've learned from Lab 7 and Lab 8 about capacitive and low-pass filters, your task is to create a capacitive low-pass circuit (series RC circuit) to filter out a noisy signal.","title":"Description"},{"location":"ses250/lab-project/#task","text":"You may work in groups of up to 2 members. Design a series RC circuit that will filter out noise above 1kHz but not signal below 1kHz (ie. the cutoff frequency should be within 10% of 1kHz). You can use any of the resistors and capacitors you have in your lab kit. Apply a signal with a 2V DC offset with a 1kHz 1Vpp triangular (saw) wave to simulate noise to your circuit. Remember the function generator should be set to High-Z mode. Using the DSO, demostrate that the 1kHz 1Vpp noise is reduced to at least 70.7% after passing through your circuit (ie. show the raw signal with noise and the filtered signal). Document your procedure and result in a lab report.","title":"Task"},{"location":"ses250/lab-project/#deliverables","text":"Plagiarism is using another individual\u2019s (INCLUDING AI) work (e.g., words, images, ideas, logic, phrases, signatures or computations) and presenting it as one\u2019s own, without properly citing the source. Refer to: Academic Integrity Policy A lab report of no more than 5 pages and less than 1000 words consisting of the following sections: Introduction of the problem being studied and any relevant background information regarding to low-pass filter. (max. 300 words) Methods and Materials describing your circuit, and the materials and steps you used to test your circuit. This section must consist of figures and photos of: list of materials/components used list of steps you've taken (ie. someone must be able to repeat what you've done) circuit diagram breadboard diagram photos of your component setup on a breadboard photos of your test using a function generator and DSO Results from testing of your circuit by showing photos or a descriptive sketch of what you see from the DSO and measurement of any relevant voltage or current readings Discussion of your finding and explain what you see from the result. How can you prove that the 1kHz noise is filtered to 70.7%? Also discussed the following if applicable: Are there any unexpected results or errors? If you suspect any errors, analyze them. Explain your result with relevant theories. Conclusion of what you've done, what challenges you faced, and what you've learned. Reference to cite any resource you've used in your introduction, methods, or discussion section. (Not included in pages and word count) The report must be in PDF format with the name and student number of all members.","title":"Deliverables"},{"location":"ses250/lab-project/#deadline-and-late-submission","text":"Submit the lab report on Blackboard by the submission deadline. Only one submission is required per group. Any late submission will receive a 50% mark deduction within 24 hours after the deadline, no mark will be rewarded afterwards.","title":"Deadline and Late Submission"},{"location":"ses250/lab-project/#marking-rubrics","text":"","title":"Marking Rubrics"},{"location":"ses250/lab-project/#introduction","text":"(10 marks) Did this section clearly explain all necessary concepts and theories to understand the problem? Yes Somewhat Minimal No Marks 10 7 5 0","title":"Introduction"},{"location":"ses250/lab-project/#methods-and-materials","text":"(5 marks) Did this section list all materials/components used? Yes Somewhat No Marks 5 3 0 (25 marks) Did this section list all steps that were taken with photos and figures (ie. someone must be able to repeat what you've done) Yes Somewhat Minimal No Marks 25 15 10 0 (5 marks) Did this section contain a diagram of the circuit? Yes Somewhat No Marks 5 3 0 (5 marks) Did this section contain a diagram of the breadboard configuration? Yes Somewhat No Marks 5 3 0","title":"Methods and Materials"},{"location":"ses250/lab-project/#results","text":"(10 marks) Did this section display results from the testing by showing photos or descriptive sketches of what you see from the DSO and measurement of any relevant voltage or current readings without any bias discussion? Yes Somewhat Minimal No Marks 10 7 5 0","title":"Results"},{"location":"ses250/lab-project/#discussion","text":"(20 marks) Did this section clearly explain the result and finding by providing a good discussion of the test and prove? Yes Somewhat Minimal No Marks 20 14 10 0","title":"Discussion"},{"location":"ses250/lab-project/#conclusion","text":"(10 marks) Did this section provide a clear summary of what you've done, what challenges you faced, and what you've learned? Yes Somewhat Minimal No Marks 10 7 5 0","title":"Conclusion"},{"location":"ses250/lab-project/#reference","text":"(10 marks) Was a proper citation given in a recognizable reference format such as IEEE or MLA? Yes Somewhat Minimal No Marks 10 7 5 0","title":"Reference"},{"location":"ses250/lab1/","text":"Lab 1 : Electrostatics and Triboelectric Series Seneca College SES250 Electromagnatics Purposes To demonstrate that there are two types of electric charges in nature To be familiar with scientific experimental techniques Use experimental observation and apply logical reasoning to build a triboelectric series Objectives Perform qualitative observation of the following: the separation of electric charges by friction the existence of two types of charges the existence of electrostatic forces between charged objects Description Objects are usually electrically neutral. The number of positive charges and negative charges is usually equal. Neutral objects neither attract nor repel each other electrically. This balance of charge can be upset by rubbing an object against another object further explained in Chapter 5.1 of University Physics Vol 2 or by the presence of another nearby charged object further explained in Chapter 5.2 . In this lab, the attractive and/or repulsive electrostatic force between charged objects will be observed using a setup shown in Figure 1.1. You will confirm the presence of electric charges and the forces exerted by these charges. Figure 1.1 Lab 1 Setup Triboelectric Series \"The triboelectric series ranks various materials according to their tendency to gain or lose electrons, which reflects the natural physical property of materials. Static electricity occurs when there is an excess of positive or negative charges on an object\u2019s surface by rubbing certain materials together. The position of the material in the triboelectric series determines how effectively the charges will be exchanged. Normally, the build-up of static electricity would be undesirable because it can result in product failure or a serious safety hazard11,12 caused by electrostatic discharge and/or electrostatic attraction. This series can be used to select materials that will minimize static charging to prevent the electrostatic discharge or electrostatic attraction.\" Source: Quantifying the triboelectric series by Zou et. al. Materials A stand String or fishing line Paper clip Plastic Straw (Polypropylene) Plastic Wrap Wool Cloth Glass Rod Steel Rod Wooden Rod / Dowel Silk Cloth or Cotton Cloth Plastic Rod (Acrylic) Preparation Answer all the lab preparation questions at the end of this document in your lab notebook BEFORE your lab session. Students who did not complete the lab preparation will be asked not to join the lab and receive a grade of ZERO (0) for the lab. Lab preparation must be done individually in the lab notebook. Lab Preparation Question Summarize the steps for this Lab in your notebook as the computer in the lab room will NOT be available for this lab. Describe how you can neutralize your hand from electric charges in the lab room using the technique mentioned in the lab manual. Copy and fill in the following observation table in your notebook (except for the observation column): Step Object 1 Rubbed with Object 2 Rubbed with Observation (Attract/Repel) 6 Plastic Straw Wool Plastic Straw Wool 8 Plastic Straw Wool 9 Plastic Straw 12 13 Procedures If not enough stands are available, work in groups of 2. All questions in the lab must be answered individually and every member must individually demostrate completion of the lab. Place and secure the stand on the table. Attach a paper clip onto a strong then hang the paper clip about 5cm below the end hook of the stand. The paper clip is used to hold a plastic straw. Carefully secure a plastic straw onto the paper clip so it evenly sits on the paper clip and it's free to rotate on the stand. NOTE: In some instant, it might be beneficial to hang the stand off the side of the table to allow full rotation of the straw once it's attached to the paper clip. Technique and attention to detail is the key to this lab and in any of your future lab. Remove the plastic straw from the paper clip then rub both ends of a plastic straw with the wool cloth. ONLY handle the middle of the straw as handling the ends you've charged will alter its charge. Once charged, carefully suspend the plastic straw from the stand using the paper clip. ONLY handle the middle of the straw. What you've done is charging the plastic straw NEGATIVELY (free electron from the wool cloth is transferred onto the surface of the plastic straw). Note: If your hand touched the charged portion of the straw, your hand will discharge the straw causing the charged portion to return to neutral. Next, rub one end of a second plastic straw in the same way then hold it close to the first plastic straw (without touching) . Remember, do not hold the straw on the side that you've charged. Observe the (attractive or repulsive) force exerted on the first plastic straw suspended from the stand. Lab Question 1: What interaction between the straws do you observe? Write it down into the observation table you created in the pre-lab. Lab Question 2: Which electrostatics law have you confirmed? Explain your answer by specifying the charge in each plastic straw. Ensure your hand is not charged by placing your palm on the metal surface or the rubber mat on the workbench. Then discharge the second plastic straw by slowly touching it (not rubbing) with your hand then neutralize your hand. Repeat this a few times until the second straw no longer exerts any force on the first straw. Note: Technique is critical. You should often discharge yourself by placing your palm on the metal surface or the rubber mat of the workbench. We can assume they are connected to the ground (earth) and are electrically neutral. Recharge the second (now neutral) plastic straw by rubbing it with the plastic wrap. Hold it close to the first wool-charged plastic straw and observe the nature of the force. Lab Question 3: What interaction between the straws do you observe? Write it down into the observation table you created in the pre-lab. Lab Question 4: Use your observation to predict what type of charge is on plastic wrap-rubbed straw (positive or negative). ie. Did the plastic wrap-rubbed straw gain/lose electrons? Remember: It was previously given that the wool-rubbed straw is charged negatively. Discharge the second plastic straw. Take a glass rod and charge it using the wool cloth. Hold it close to the first wool-charged plastic straw. WARNING! The glass rod is fragile! Handle with care! Lab Question 5: What interaction between the straw and the rod do you observe? Write it down into the observation table you created in the pre-lab. Use your observation to predict what type of charge is on the wool-rubbed glass rod (positive or negative). ie. Did the wool-rubbed glass rod gain/lose electrons? Discharge the glass rod. WARNING! The glass rod is fragile! Handle with care! Lab Question 6: From the results in your observation table, which materials (plastic straw, wool, plastic wrap, glass rod) do you think will most likely gain electrons and which will most likely lose electrons? For example: We defined the straw as negatively charged when rubbed with wool. Therefore, the straw is more likely to gain electrons than the wool. The steps above demonstrate the triboelectric effects and electrostatic force between two charged objects. In the next steps, you will observe the force between a charged object and a neutral object. Touch a metal surface on the workbench to ensure your hand is not charged. Discharge the plastic straw on the stand and a glass rod with your hand until there is no electrostatic force between them when holding them near one another. Leaving the plastic straw neutral, charge the glass rob with the wool cloth. Hold the glass rod close to the plastic straw. Lab Question 7: What interaction between the rod and the straw do you observe? Write it down into the observation table you created in the pre-lab. Why is the neutral plastic straw attracted to the glass rob? Explain the phenomenon and discuss how this can draw you to the wrong conclusion regarding the charge on each object. Refer to Chapter 5.2 in the University Physic Volume 2 textbook if required. The steps above demonstrate transferring of charges on the surface of insulators. In the next step, you will observe what will happen when charging a conducting object. Leaving the neutral plastic straw suspended. Rub one end of a steel rod with the wool cloth then hold it near the neutral plastic straw. Lab Question 8: What interaction between the rod and the straw do you observe? Write it down into the observation table you created in the pre-lab. Explain the phenomenon. Refer to Chapter 5.2 in the University Physic Volume 2 textbook if required. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate you've completed the lab and written down all your observation. You might be asked to explain some of the concepts you've learned in this lab. Bonus Using the concept you've acquired from this steps above, extend your observation table and determine where is the Plastic Rod or Slik or Cotton or Wooden Rod / Dowel is on the triboelectric series in Question 6. (5% of Lab Work mark for each materials). You must show your expiremental steps and observation. Read the following cases to understand the logic: Case 1: Plastic Wrap If Material-A is rubbed with Plastic Wrap, Material-A is positively charged (lose electrons) because the Plastic Wrap is more negative (gain electrons). Case 2: If Material-A rubbed with Material-B is attracted to Material-C rubbed with Material-B, then we know the charge on Material-A is opposite to the charge on Material-C. However, to determine which one is positively charged and which on is negatively charged, we must know the properties of Material-B relative to Material-A and Material-C. As a result, always start your experiment with the known material (Plastic Wrap). Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 1 : Electrostatics and Triboelectric Series"},{"location":"ses250/lab1/#lab-1-electrostatics-and-triboelectric-series","text":"Seneca College SES250 Electromagnatics","title":"Lab 1 : Electrostatics and Triboelectric Series"},{"location":"ses250/lab1/#purposes","text":"To demonstrate that there are two types of electric charges in nature To be familiar with scientific experimental techniques Use experimental observation and apply logical reasoning to build a triboelectric series","title":"Purposes"},{"location":"ses250/lab1/#objectives","text":"Perform qualitative observation of the following: the separation of electric charges by friction the existence of two types of charges the existence of electrostatic forces between charged objects","title":"Objectives"},{"location":"ses250/lab1/#description","text":"Objects are usually electrically neutral. The number of positive charges and negative charges is usually equal. Neutral objects neither attract nor repel each other electrically. This balance of charge can be upset by rubbing an object against another object further explained in Chapter 5.1 of University Physics Vol 2 or by the presence of another nearby charged object further explained in Chapter 5.2 . In this lab, the attractive and/or repulsive electrostatic force between charged objects will be observed using a setup shown in Figure 1.1. You will confirm the presence of electric charges and the forces exerted by these charges. Figure 1.1 Lab 1 Setup","title":"Description"},{"location":"ses250/lab1/#triboelectric-series","text":"\"The triboelectric series ranks various materials according to their tendency to gain or lose electrons, which reflects the natural physical property of materials. Static electricity occurs when there is an excess of positive or negative charges on an object\u2019s surface by rubbing certain materials together. The position of the material in the triboelectric series determines how effectively the charges will be exchanged. Normally, the build-up of static electricity would be undesirable because it can result in product failure or a serious safety hazard11,12 caused by electrostatic discharge and/or electrostatic attraction. This series can be used to select materials that will minimize static charging to prevent the electrostatic discharge or electrostatic attraction.\" Source: Quantifying the triboelectric series by Zou et. al.","title":"Triboelectric Series"},{"location":"ses250/lab1/#materials","text":"A stand String or fishing line Paper clip Plastic Straw (Polypropylene) Plastic Wrap Wool Cloth Glass Rod Steel Rod Wooden Rod / Dowel Silk Cloth or Cotton Cloth Plastic Rod (Acrylic)","title":"Materials"},{"location":"ses250/lab1/#preparation","text":"Answer all the lab preparation questions at the end of this document in your lab notebook BEFORE your lab session. Students who did not complete the lab preparation will be asked not to join the lab and receive a grade of ZERO (0) for the lab. Lab preparation must be done individually in the lab notebook.","title":"Preparation"},{"location":"ses250/lab1/#lab-preparation-question","text":"Summarize the steps for this Lab in your notebook as the computer in the lab room will NOT be available for this lab. Describe how you can neutralize your hand from electric charges in the lab room using the technique mentioned in the lab manual. Copy and fill in the following observation table in your notebook (except for the observation column): Step Object 1 Rubbed with Object 2 Rubbed with Observation (Attract/Repel) 6 Plastic Straw Wool Plastic Straw Wool 8 Plastic Straw Wool 9 Plastic Straw 12 13","title":"Lab Preparation Question"},{"location":"ses250/lab1/#procedures","text":"If not enough stands are available, work in groups of 2. All questions in the lab must be answered individually and every member must individually demostrate completion of the lab. Place and secure the stand on the table. Attach a paper clip onto a strong then hang the paper clip about 5cm below the end hook of the stand. The paper clip is used to hold a plastic straw. Carefully secure a plastic straw onto the paper clip so it evenly sits on the paper clip and it's free to rotate on the stand. NOTE: In some instant, it might be beneficial to hang the stand off the side of the table to allow full rotation of the straw once it's attached to the paper clip. Technique and attention to detail is the key to this lab and in any of your future lab. Remove the plastic straw from the paper clip then rub both ends of a plastic straw with the wool cloth. ONLY handle the middle of the straw as handling the ends you've charged will alter its charge. Once charged, carefully suspend the plastic straw from the stand using the paper clip. ONLY handle the middle of the straw. What you've done is charging the plastic straw NEGATIVELY (free electron from the wool cloth is transferred onto the surface of the plastic straw). Note: If your hand touched the charged portion of the straw, your hand will discharge the straw causing the charged portion to return to neutral. Next, rub one end of a second plastic straw in the same way then hold it close to the first plastic straw (without touching) . Remember, do not hold the straw on the side that you've charged. Observe the (attractive or repulsive) force exerted on the first plastic straw suspended from the stand. Lab Question 1: What interaction between the straws do you observe? Write it down into the observation table you created in the pre-lab. Lab Question 2: Which electrostatics law have you confirmed? Explain your answer by specifying the charge in each plastic straw. Ensure your hand is not charged by placing your palm on the metal surface or the rubber mat on the workbench. Then discharge the second plastic straw by slowly touching it (not rubbing) with your hand then neutralize your hand. Repeat this a few times until the second straw no longer exerts any force on the first straw. Note: Technique is critical. You should often discharge yourself by placing your palm on the metal surface or the rubber mat of the workbench. We can assume they are connected to the ground (earth) and are electrically neutral. Recharge the second (now neutral) plastic straw by rubbing it with the plastic wrap. Hold it close to the first wool-charged plastic straw and observe the nature of the force. Lab Question 3: What interaction between the straws do you observe? Write it down into the observation table you created in the pre-lab. Lab Question 4: Use your observation to predict what type of charge is on plastic wrap-rubbed straw (positive or negative). ie. Did the plastic wrap-rubbed straw gain/lose electrons? Remember: It was previously given that the wool-rubbed straw is charged negatively. Discharge the second plastic straw. Take a glass rod and charge it using the wool cloth. Hold it close to the first wool-charged plastic straw. WARNING! The glass rod is fragile! Handle with care! Lab Question 5: What interaction between the straw and the rod do you observe? Write it down into the observation table you created in the pre-lab. Use your observation to predict what type of charge is on the wool-rubbed glass rod (positive or negative). ie. Did the wool-rubbed glass rod gain/lose electrons? Discharge the glass rod. WARNING! The glass rod is fragile! Handle with care! Lab Question 6: From the results in your observation table, which materials (plastic straw, wool, plastic wrap, glass rod) do you think will most likely gain electrons and which will most likely lose electrons? For example: We defined the straw as negatively charged when rubbed with wool. Therefore, the straw is more likely to gain electrons than the wool. The steps above demonstrate the triboelectric effects and electrostatic force between two charged objects. In the next steps, you will observe the force between a charged object and a neutral object. Touch a metal surface on the workbench to ensure your hand is not charged. Discharge the plastic straw on the stand and a glass rod with your hand until there is no electrostatic force between them when holding them near one another. Leaving the plastic straw neutral, charge the glass rob with the wool cloth. Hold the glass rod close to the plastic straw. Lab Question 7: What interaction between the rod and the straw do you observe? Write it down into the observation table you created in the pre-lab. Why is the neutral plastic straw attracted to the glass rob? Explain the phenomenon and discuss how this can draw you to the wrong conclusion regarding the charge on each object. Refer to Chapter 5.2 in the University Physic Volume 2 textbook if required. The steps above demonstrate transferring of charges on the surface of insulators. In the next step, you will observe what will happen when charging a conducting object. Leaving the neutral plastic straw suspended. Rub one end of a steel rod with the wool cloth then hold it near the neutral plastic straw. Lab Question 8: What interaction between the rod and the straw do you observe? Write it down into the observation table you created in the pre-lab. Explain the phenomenon. Refer to Chapter 5.2 in the University Physic Volume 2 textbook if required. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate you've completed the lab and written down all your observation. You might be asked to explain some of the concepts you've learned in this lab.","title":"Procedures"},{"location":"ses250/lab1/#bonus","text":"Using the concept you've acquired from this steps above, extend your observation table and determine where is the Plastic Rod or Slik or Cotton or Wooden Rod / Dowel is on the triboelectric series in Question 6. (5% of Lab Work mark for each materials). You must show your expiremental steps and observation. Read the following cases to understand the logic: Case 1: Plastic Wrap If Material-A is rubbed with Plastic Wrap, Material-A is positively charged (lose electrons) because the Plastic Wrap is more negative (gain electrons). Case 2: If Material-A rubbed with Material-B is attracted to Material-C rubbed with Material-B, then we know the charge on Material-A is opposite to the charge on Material-C. However, to determine which one is positively charged and which on is negatively charged, we must know the properties of Material-B relative to Material-A and Material-C. As a result, always start your experiment with the known material (Plastic Wrap). Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Bonus"},{"location":"ses250/lab10/","text":"Lab 10 : RLC Circuit Resonance Seneca College SES250 Electromagnatics Purposes To examine the AC response of an RLC circuit and find the resonance frequency Objectives Assemble electronic components onto a breadboard Setup function generator to output AC sine wave Build an RLC circuit for resonant frequency measurement Description An RLC circuit is an electrical circuit consisting of a resistor (R), an inductor (L), and a capacitor (C), connected in series or in parallel. The circuit forms a harmonic oscillator for current and resonates in a manner similar to an LC circuit. Introducing the resistor increases the decay of these oscillations, which is also known as damping. The resistor also reduces the peak resonant frequency. An important property of this circuit is its ability to resonate at a specific frequency, the resonance frequency, f_{0} . Its angular frequency alternative, \\omega_{0} , is given as: \\omega_{0} = 2 \\pi f_0 The resonant frequency is defined as the frequency at which the impedance of the circuit is at a minimum. Equivalently, it can be defined as the frequency at which the impedance is purely real (that is, purely resistive). This occurs because the impedances of the inductor and capacitor at resonant are equal but of opposite sign and cancel out. The resonant frequency for an RLC circuit is: \\omega_{0} = {1 \\over { \\sqrt{LC}}} Source: Wikipedia: RLC circuit Reference Series RC Circuit Impedance Calculator Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 100nF Ceramic Capacitor (1x) 47\u03bcH to 1000\u03bcH toroidal inductor (supplied by the instructor) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy observation Table 1 of this lab into your notebook. Sketch a breadboard diagram of Figure 10.1 onto your notebook. Calculate the theoretical resonant frequency for a series RLC circuit in AC with a 10k\u03a9 resistor, 100nF capacitor, and the inductor value you used from Lab 9. Show all calculations. Procedures In this lab, we'll observe the AC response of an RLC Circuit and the relationship between the voltage V(t) and the current I(t) using an oscilloscope. Since we cannot measure I(t) directly using an oscilloscope, we'll be measuring the voltage across the resistor V_R(t) since the current and voltage are always in phase at the resistor. Figure 10.1 Set up the circuit in Figure 10.1 using a 10k\u03a9 resistor, a 100nF ceramic capacitor and 47\u03bcH (or the inductor you used in Lab 9). DO NOT USE A POLARIZED CAPACITOR! Ensure that the function generator\u2019s output is off then set the output of the function generator to High-Z. Set the output waveform to be a sine wave then set the output amplitude to 6 Vpp and the frequency to 10.0 Hz. Leave offset voltage and phase at 0. Turn on the oscilloscope then connect CH1 and CH2 to the circuit per the circuit diagram. NOTE: The ground (black cable) for both CH1 and CH2 is connected to the negative (black) node of the function generator. Turn on the function generator output and observe the relationship between CH1 and CH2. Adjust the voltage and time division to see about two periods on the display. From the two signals that you see, find a peak from CH1 (measuring V(t) ) and the closest peak from CH2 (measuring V_R(t) = I(t) ). Lab Question 1: Find the time difference between the two signals. You may use the horizontal position knob to move one of the signals to the centre for easier measurement. Afterward, convert this time difference you found to the phase angle difference by using the formula below. Does it agree with the phase angle difference you calculated in your pre-lab? Write your result in Table 1. \\Phi = 2 \\pi {\\Delta t \\over T} NOTE: If I(t) is leading, the time difference is a negative time. Also, the time difference might be in ms and the phase angle difference might be in RAD depending on your setting. Table 1: Freq Theoretical Phi Measured V_{Rpp} \\Delta T \\Phi \\|I\\| \\|Z_T\\| 10 Hz 500 Hz 1 kHz 5 kHz 10 kHz 50 kHz 100 kHz 500 kHz ... \\Phi = 2 \\pi {\\Delta t / T} = 360\u00b0 (\\Delta t) f Calculate the magnitude of the current \\|I\\| and magnitude of the total impedance \\|Z_T\\| . Lab Question 2: Using the measured peak-to-peak V_{R} , calculate the magnitude of the current \\|I\\| and magnitude of the total impedance \\|Z_T\\| . Record your answers in Table 1. \\|I\\| = V_R / R \\|Z_T\\| = V_S / \\|I\\| Open a spreadsheet software and plot the data. Lab Question 3: Using the data from Table 1, open a spreadsheet software and plot the following: Phase Shift vs Frequency Magnitude of the Current \\|I\\| vs Frequency Magnitude of the Total Impedance \\|Z_T\\| vs. Frequency Repeat the measurement at more frequencies until a minimum phase shift can be found. Lab Question 4: Using the additional data you recorded onto Table 1 and your plots: Find the frequency at which \\Phi = 0\u00b0 . Find the frequency at which \\|I\\| has a maximum value. Find the frequency at which \\|Z_T\\| has a minimum value. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 10 : RLC Circuit Resonance"},{"location":"ses250/lab10/#lab-10-rlc-circuit-resonance","text":"Seneca College SES250 Electromagnatics","title":"Lab 10 : RLC Circuit Resonance"},{"location":"ses250/lab10/#purposes","text":"To examine the AC response of an RLC circuit and find the resonance frequency","title":"Purposes"},{"location":"ses250/lab10/#objectives","text":"Assemble electronic components onto a breadboard Setup function generator to output AC sine wave Build an RLC circuit for resonant frequency measurement","title":"Objectives"},{"location":"ses250/lab10/#description","text":"An RLC circuit is an electrical circuit consisting of a resistor (R), an inductor (L), and a capacitor (C), connected in series or in parallel. The circuit forms a harmonic oscillator for current and resonates in a manner similar to an LC circuit. Introducing the resistor increases the decay of these oscillations, which is also known as damping. The resistor also reduces the peak resonant frequency. An important property of this circuit is its ability to resonate at a specific frequency, the resonance frequency, f_{0} . Its angular frequency alternative, \\omega_{0} , is given as: \\omega_{0} = 2 \\pi f_0 The resonant frequency is defined as the frequency at which the impedance of the circuit is at a minimum. Equivalently, it can be defined as the frequency at which the impedance is purely real (that is, purely resistive). This occurs because the impedances of the inductor and capacitor at resonant are equal but of opposite sign and cancel out. The resonant frequency for an RLC circuit is: \\omega_{0} = {1 \\over { \\sqrt{LC}}} Source: Wikipedia: RLC circuit","title":"Description"},{"location":"ses250/lab10/#reference","text":"Series RC Circuit Impedance Calculator","title":"Reference"},{"location":"ses250/lab10/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 100nF Ceramic Capacitor (1x) 47\u03bcH to 1000\u03bcH toroidal inductor (supplied by the instructor)","title":"Materials"},{"location":"ses250/lab10/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy observation Table 1 of this lab into your notebook. Sketch a breadboard diagram of Figure 10.1 onto your notebook. Calculate the theoretical resonant frequency for a series RLC circuit in AC with a 10k\u03a9 resistor, 100nF capacitor, and the inductor value you used from Lab 9. Show all calculations.","title":"Preparation"},{"location":"ses250/lab10/#procedures","text":"In this lab, we'll observe the AC response of an RLC Circuit and the relationship between the voltage V(t) and the current I(t) using an oscilloscope. Since we cannot measure I(t) directly using an oscilloscope, we'll be measuring the voltage across the resistor V_R(t) since the current and voltage are always in phase at the resistor. Figure 10.1 Set up the circuit in Figure 10.1 using a 10k\u03a9 resistor, a 100nF ceramic capacitor and 47\u03bcH (or the inductor you used in Lab 9). DO NOT USE A POLARIZED CAPACITOR! Ensure that the function generator\u2019s output is off then set the output of the function generator to High-Z. Set the output waveform to be a sine wave then set the output amplitude to 6 Vpp and the frequency to 10.0 Hz. Leave offset voltage and phase at 0. Turn on the oscilloscope then connect CH1 and CH2 to the circuit per the circuit diagram. NOTE: The ground (black cable) for both CH1 and CH2 is connected to the negative (black) node of the function generator. Turn on the function generator output and observe the relationship between CH1 and CH2. Adjust the voltage and time division to see about two periods on the display. From the two signals that you see, find a peak from CH1 (measuring V(t) ) and the closest peak from CH2 (measuring V_R(t) = I(t) ). Lab Question 1: Find the time difference between the two signals. You may use the horizontal position knob to move one of the signals to the centre for easier measurement. Afterward, convert this time difference you found to the phase angle difference by using the formula below. Does it agree with the phase angle difference you calculated in your pre-lab? Write your result in Table 1. \\Phi = 2 \\pi {\\Delta t \\over T} NOTE: If I(t) is leading, the time difference is a negative time. Also, the time difference might be in ms and the phase angle difference might be in RAD depending on your setting. Table 1: Freq Theoretical Phi Measured V_{Rpp} \\Delta T \\Phi \\|I\\| \\|Z_T\\| 10 Hz 500 Hz 1 kHz 5 kHz 10 kHz 50 kHz 100 kHz 500 kHz ... \\Phi = 2 \\pi {\\Delta t / T} = 360\u00b0 (\\Delta t) f Calculate the magnitude of the current \\|I\\| and magnitude of the total impedance \\|Z_T\\| . Lab Question 2: Using the measured peak-to-peak V_{R} , calculate the magnitude of the current \\|I\\| and magnitude of the total impedance \\|Z_T\\| . Record your answers in Table 1. \\|I\\| = V_R / R \\|Z_T\\| = V_S / \\|I\\| Open a spreadsheet software and plot the data. Lab Question 3: Using the data from Table 1, open a spreadsheet software and plot the following: Phase Shift vs Frequency Magnitude of the Current \\|I\\| vs Frequency Magnitude of the Total Impedance \\|Z_T\\| vs. Frequency Repeat the measurement at more frequencies until a minimum phase shift can be found. Lab Question 4: Using the additional data you recorded onto Table 1 and your plots: Find the frequency at which \\Phi = 0\u00b0 . Find the frequency at which \\|I\\| has a maximum value. Find the frequency at which \\|Z_T\\| has a minimum value. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Procedures"},{"location":"ses250/lab2/","text":"Lab 2 : Digital Multimeter, Power Supply, and Ohm's Law Seneca College SES250 Electromagnatics Purposes To learn how to operate the power supply and digital multimeter (DMM) To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To verify Ohm's Law Objectives Operate a DC power supply Setup and read measurements from a digital multimeter (DMM) Assemble electronic components onto a breadboard Measure voltage from a breadboard using a digital multimeter (DMM) Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit. Description Direct Current (DC) Direct current (DC) is the one-directional flow of electric charge. An electrochemical cell is a prime example of DC power. Direct current may flow through a conductor such as a wire, but can also flow through semiconductors, insulators, or even through a vacuum as in electron or ion beams. The electric current flows in a constant direction, distinguishing it from alternating current (AC). Source: Wikipedia: Direct Current Digital Multimeter (DMM) A multimeter is a measuring instrument that can measure multiple electrical properties. A typical multimeter can measure voltage, resistance, and current. However, some multimeters, such as the one in the electronics lab, can also measure capacitance. Digital multimeters (DMM) have numeric displays and have made analog multimeters obsolete as they are cheaper, more precise, and more physically robust than analog multimeters. Source: Wikipedia: Multimeter Figure 2.1 Keysight 34461A Digital Multimeter In the electronics lab, you will be using a Keysight 34461A (or similar) Digital Multimeter. Its manual can be found here: DMM Manual Direct Current (DC) Power Supply An adjustable DC power supply converts electricity from the power grid to a specified voltage and current and then provides them at its output connector. Figure 2.2 Agilent E3632A DC Power Supply In the electronics lab, you will be using an Agilent E3632A (or E3631A or similar) DC Power Supply. Its manual can be found here: DC Power Supply Manual Resistor A resistor is a passive two-terminal electrical component that implements electrical resistance as a circuit element. In electronic circuits, resistors are used to reduce current flow, adjust signal levels, divide voltages, bias active elements, and terminate transmission lines, among other uses. A resistor\u2019s resistance is specified by a colour code on the resistor as per Figure 2.3. Source: Wikipedia: Resistor Figure 2.3 Resistor Band Colour Breadboard An electronics breadboard is a solderless circuit prototyping board. They are great for making temporary circuits and prototyping, and they require no soldering. Source: SparkFun: How to User a Breadboard The internal conductive strip of the breadboard is assembly such a way that: all tie points of the top power rail (labelled red) are inter-connected all tie points of the top ground rail (labelled blue) are inter-connected all tie points of the bottom power rail (labelled red) are inter-connected all tie points of the bottom ground rail (labelled blue) are inter-connected each row (1-63) from column \u201ca\u201d to \u201ce\u201d are inter-connected each row (1-63) from column \u201cf\u201d to \u201cj\u201d are inter-connected Figures 2.4 and 2.5 are photos of a full-size breadboard and a half-size breadboard. Note how the tie points are connected by the metal strips. Only one component connection should connect to each tie-point. Figure 2.6 shows an electrical connection sketch of a half-size breadboard. Figure 2.4 Full-Size 830 Tie Points Breadboard Figure 2.5 Half-Size 400 Tie Points Breadboard and Showing of Internal Conductive Strips Figure 2.6 Half-Size 400 Tie Points Breadboard Electrical Sketch Circuit Symbols When expressing an electronic circuit in a diagram, circuit symbols are used. Below are some of the circuit symbols that you'll see in the lab. Figure 2.7 Circuit Symbols Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires 1k\u03a9 Resistor (brown-black-red) Preparation Answer all the lab preparation questions at the end of this document in your lab notebook BEFORE your lab session. Students who did not complete the lab preparation will be asked not to join the lab and receive a grade of ZERO (0) for the lab. Lab preparation must be done individually in the lab notebook. Lab Preparation Question: READ OVER ALL THE LAB BACKGROUND AND LAB STEPS.jacky 1. Copy the following observation table in your notebook for this lab: > ||Output: +1V|Output: +2V|Output: +5V|Output: +10V| > |---|---|---|---|---| > |Range: 100mV|||||| > |Range: 1V|||||| > |Range: 10V|||||| > |Range: 100V|||||| > |Range: 1000V|||||| Copy Figure 2.13 into your notebook then draw a voltmeter symbol and its connection into the diagram according to the circuit in Figure 2.14. Research: Besides voltage, resistance, and current, list two other electronics-related properties a modem DMM can measure. In your words, explain the difference between the two ON/OFF settings (Power ON/OFF and Output ON/OFF) of the DC power supply we use in this lab. Using Ohm's Law: V = IR , calculate the current through a 1k\u03a9 resistor if 5V of potential difference is applied across the resistor. Procedures Part 1: Safety Ensure that you are wearing your safety glasses, not wearing open-toe shoes, and any long hair must be tied up. At the top of your workbench, you\u2019ll see a red \u201cEmergency Stop\u201d button (shown in Figure 2.8). At any time when the button is in the pressed position, your workbench will be disconnected from the power source. Press this button if there are any issues with your equipment or circuit (such as unusual heat, unusual smell, smoke, spark, or fire). To release the button, twist it as per the symbol on the button and the button will no longer be pressed. Figure 2.8 Emergency Stop Button Ensure the Emergency Stop button is in the released position. Part 2: Digital Multimeter (DMM) and DC Voltage Measurement Assemble the 1k\u03a9 resistor (brown-black-red) from the lab materials onto the breadboard as shown in Figure 2.9. Ensure the two leads of the resistor are on different rows on the breadboard so they are not electrically connected (shorted). The exact tie-point to use within the column doesn't matter are they are electrically connected. Figure 2.9 Identify the digital multimeter (DMM) at your workbench. If there are two DMMs, use the one on the left-hand side. Disconnect any cables that are plugged into it so the DMM is as shown in Figure 2.10 below. Figure 2.10 Set the DMM to DC voltage measurement mode as follows: If the DMM is not already powered on, push the power button (1). Once the DMM is ON, push the DC voltage (DCV) measurement mode button (4). If the \u201cRange\u201d indicator (3) is not showing \u201cAuto\u201d, press the menu button under \u201cRange\u201d (2) and change it to \u201cAuto\u201d. Identify the two cables that are next to the DMM with a banana connector on one end and an alligator clip on the other end. Connect the banana connector from the red cable to the red terminal labelled with \u201cHI\u201d under \u201cInput V\u03a9\u25ba|\u201d (5). Connect the banana connector from the black cable to the black terminal labelled with \u201cLO\u201d under \u201cInput V\u03a9\u25ba|\u201d (6) Figure 2.11 Verify the cables are connected as shown in Figure 2.5 above. At this point, your DMM is set up to measure direct current (DC) voltage. We\u2019ll be discussing direct current voltage during class. Remember this configuration for future labs and careers as measuring DC voltage is a very important skill for working with electronics. Identify the DC power supply at your workbench. If there are two DC power supplies, use the one that's most similar to the one shown. Disconnect any cables that are plugged in so it is as shown in Figure 2.11 below. Figure 2.12 Turn on the DC power supply (1) and then press the \u201cDisplay Limit\u201d button (2). Select the appropriate output voltage range (10) and use the lowest possible setting for a 5V output. In Figure 2.6 above, the lowest setting is \"15V, 7A\", however, the lowest output range varies between different models of power supply. Adjust the voltage output to +5.000V (9) using the digit selector (6) and the adjustment knob (7). Depending on the model of the power supply, the number of significant figures of the voltage output might be different. Identify the black cable with two leads that are next to the DC power supply with a banana connector on one end and an alligator clip on the other end. Connect the red banana connector from the cable to the red \u201cOutput\u201d terminal labelled with \u201c+\u201d (9) NOTE: In some models of power supply, there might be multiple output terminals. connect to the appropriate output terminal depending on the output range you selected earlier. Connect the black banana connector from the cable to the black \u201cOutput\u201d terminal labelled with \u201c-\u201c (10) You\u2019ve now set up the power supply for DC output. Attach a jumper cable to each of the alligator clips as shown in Figure 2.12. It can be jumper wire of any type and colour. Figure 2.12 SHORT CIRCUIT WARNING: Ensure the exposed portion of the red alligator clip or wire is NOT touching the exposed portion of the black alligator clip or wire. Connect the jumper wire from the red cable of the power supply to the same row as the first resistor lead. Then connect the jumper wire from the black cable of the power supply to the same row as the second resistor lead to assemble the circuit below. Figure 2.13 Connect the jumper wire from the red cable of the DMM to the same row as the first resistor lead. Then connect the jumper wire from the black cable of the DMM to the same row as the second resistor lead. Figure 2.14 Press the \"Display Limit\" button (2) on the power supply again and verify the voltage is adjusted to +5.000V and the banana cables are connected. Also, verify that the exposed portion of the red alligator clip is NOT touching the exposed portion of the black alligator clip. Turn on the power supply output by pressing the Output On/Off button (8). NOTE: There is a difference between the power supply being ON/OF and the power supply OUTPUT being ON/OFF. The power supply can be ON with its power output OFF. Notice that the DMM should now read about +5V, similar to as shown in Figure 2.15. Make a note of the range value beside the \u201cAuto\u201d on the DMM display. Figure 2.15 With the power supply output ON, adjust the output voltage to +13V. Note: If the output range does not allow you to go to 13V, switch the output range (10) and terminals as necessary. Lab Question 1: What happened to the Range setting on the DMM? If you don't notice the change, decrease the output voltage back to 5V and try again. Afterward, decrease the voltage of the DC power supply slowly to 5V. Lab Question 2: At what power supply voltage did the DMM change back to \u201cAuto 10V\u201d? How are the number of digits and decimal places the same or different when the voltage range changes? What does that mean for the accuracy of the readings? Using the DMM reading only, adjust the output voltage of the DC power supply so the reading on the DMM will display +1.000V. Note: Switch the output range and terminal as necessary. Lab Question 3: What is the output voltage of the DC power supply? Do they agree exactly with each other? If not, which one is higher and what is the percentage difference? /( % diff = diff / expected value /) Adjust the DC power supply output voltage to +1.000V then change the voltage Range on the DMM from \"Auto\" to \"100mV\" using the Range selection button. The DMM should display \"OVERLOAD\" because the 1V output from the power supply is higher than the maximum 100mV range that can be measured. Manually change the DMM \"Range\" setting and power supply voltage output according to the table below. Then record the voltage reading on the DMM in the and do this for DC output voltage of +1V, +2V, +5V, and +10V. NOTE: The reading might fluctuate but record at least 4 significant digits to the best of your ability in estimating AND record all LEADING ZEROS . Output: +1V Output: +2V Output: +5V Output: +10V Range: 100mV OVERLOAD Range: 1V Range: 10V Range: 100V Range: 1000V Lab Question 4: If we want the most precise reading, what is the best setting for each DC output voltage in the table? Circle the most precise reading for each voltage output in the table above. Change the DMM \"Range\" setting back to Auto then set the power supply output back to 5V. Take a look at the current output value (Figure 2.11 (8)) from the power supply. Lab Question 5: Does this value agree with the Ohm's law calculation you made earlier in the pre-lab? Turn off the DC power supply and disconnect the alligator clips. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 2 : Digital Multimeter, Power Supply, and Ohm's Law"},{"location":"ses250/lab2/#lab-2-digital-multimeter-power-supply-and-ohms-law","text":"Seneca College SES250 Electromagnatics","title":"Lab 2 : Digital Multimeter, Power Supply, and Ohm's Law"},{"location":"ses250/lab2/#purposes","text":"To learn how to operate the power supply and digital multimeter (DMM) To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To verify Ohm's Law","title":"Purposes"},{"location":"ses250/lab2/#objectives","text":"Operate a DC power supply Setup and read measurements from a digital multimeter (DMM) Assemble electronic components onto a breadboard Measure voltage from a breadboard using a digital multimeter (DMM)","title":"Objectives"},{"location":"ses250/lab2/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab2/#description","text":"","title":"Description"},{"location":"ses250/lab2/#direct-current-dc","text":"Direct current (DC) is the one-directional flow of electric charge. An electrochemical cell is a prime example of DC power. Direct current may flow through a conductor such as a wire, but can also flow through semiconductors, insulators, or even through a vacuum as in electron or ion beams. The electric current flows in a constant direction, distinguishing it from alternating current (AC). Source: Wikipedia: Direct Current","title":"Direct Current (DC)"},{"location":"ses250/lab2/#digital-multimeter-dmm","text":"A multimeter is a measuring instrument that can measure multiple electrical properties. A typical multimeter can measure voltage, resistance, and current. However, some multimeters, such as the one in the electronics lab, can also measure capacitance. Digital multimeters (DMM) have numeric displays and have made analog multimeters obsolete as they are cheaper, more precise, and more physically robust than analog multimeters. Source: Wikipedia: Multimeter Figure 2.1 Keysight 34461A Digital Multimeter In the electronics lab, you will be using a Keysight 34461A (or similar) Digital Multimeter. Its manual can be found here: DMM Manual","title":"Digital Multimeter (DMM)"},{"location":"ses250/lab2/#direct-current-dc-power-supply","text":"An adjustable DC power supply converts electricity from the power grid to a specified voltage and current and then provides them at its output connector. Figure 2.2 Agilent E3632A DC Power Supply In the electronics lab, you will be using an Agilent E3632A (or E3631A or similar) DC Power Supply. Its manual can be found here: DC Power Supply Manual","title":"Direct Current (DC) Power Supply"},{"location":"ses250/lab2/#resistor","text":"A resistor is a passive two-terminal electrical component that implements electrical resistance as a circuit element. In electronic circuits, resistors are used to reduce current flow, adjust signal levels, divide voltages, bias active elements, and terminate transmission lines, among other uses. A resistor\u2019s resistance is specified by a colour code on the resistor as per Figure 2.3. Source: Wikipedia: Resistor Figure 2.3 Resistor Band Colour","title":"Resistor"},{"location":"ses250/lab2/#breadboard","text":"An electronics breadboard is a solderless circuit prototyping board. They are great for making temporary circuits and prototyping, and they require no soldering. Source: SparkFun: How to User a Breadboard The internal conductive strip of the breadboard is assembly such a way that: all tie points of the top power rail (labelled red) are inter-connected all tie points of the top ground rail (labelled blue) are inter-connected all tie points of the bottom power rail (labelled red) are inter-connected all tie points of the bottom ground rail (labelled blue) are inter-connected each row (1-63) from column \u201ca\u201d to \u201ce\u201d are inter-connected each row (1-63) from column \u201cf\u201d to \u201cj\u201d are inter-connected Figures 2.4 and 2.5 are photos of a full-size breadboard and a half-size breadboard. Note how the tie points are connected by the metal strips. Only one component connection should connect to each tie-point. Figure 2.6 shows an electrical connection sketch of a half-size breadboard. Figure 2.4 Full-Size 830 Tie Points Breadboard Figure 2.5 Half-Size 400 Tie Points Breadboard and Showing of Internal Conductive Strips Figure 2.6 Half-Size 400 Tie Points Breadboard Electrical Sketch","title":"Breadboard"},{"location":"ses250/lab2/#circuit-symbols","text":"When expressing an electronic circuit in a diagram, circuit symbols are used. Below are some of the circuit symbols that you'll see in the lab. Figure 2.7 Circuit Symbols","title":"Circuit Symbols"},{"location":"ses250/lab2/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires 1k\u03a9 Resistor (brown-black-red)","title":"Materials"},{"location":"ses250/lab2/#preparation","text":"Answer all the lab preparation questions at the end of this document in your lab notebook BEFORE your lab session. Students who did not complete the lab preparation will be asked not to join the lab and receive a grade of ZERO (0) for the lab. Lab preparation must be done individually in the lab notebook. Lab Preparation Question: READ OVER ALL THE LAB BACKGROUND AND LAB STEPS.jacky 1. Copy the following observation table in your notebook for this lab: > ||Output: +1V|Output: +2V|Output: +5V|Output: +10V| > |---|---|---|---|---| > |Range: 100mV|||||| > |Range: 1V|||||| > |Range: 10V|||||| > |Range: 100V|||||| > |Range: 1000V|||||| Copy Figure 2.13 into your notebook then draw a voltmeter symbol and its connection into the diagram according to the circuit in Figure 2.14. Research: Besides voltage, resistance, and current, list two other electronics-related properties a modem DMM can measure. In your words, explain the difference between the two ON/OFF settings (Power ON/OFF and Output ON/OFF) of the DC power supply we use in this lab. Using Ohm's Law: V = IR , calculate the current through a 1k\u03a9 resistor if 5V of potential difference is applied across the resistor.","title":"Preparation"},{"location":"ses250/lab2/#procedures","text":"","title":"Procedures"},{"location":"ses250/lab2/#part-1-safety","text":"Ensure that you are wearing your safety glasses, not wearing open-toe shoes, and any long hair must be tied up. At the top of your workbench, you\u2019ll see a red \u201cEmergency Stop\u201d button (shown in Figure 2.8). At any time when the button is in the pressed position, your workbench will be disconnected from the power source. Press this button if there are any issues with your equipment or circuit (such as unusual heat, unusual smell, smoke, spark, or fire). To release the button, twist it as per the symbol on the button and the button will no longer be pressed. Figure 2.8 Emergency Stop Button Ensure the Emergency Stop button is in the released position.","title":"Part 1: Safety"},{"location":"ses250/lab2/#part-2-digital-multimeter-dmm-and-dc-voltage-measurement","text":"Assemble the 1k\u03a9 resistor (brown-black-red) from the lab materials onto the breadboard as shown in Figure 2.9. Ensure the two leads of the resistor are on different rows on the breadboard so they are not electrically connected (shorted). The exact tie-point to use within the column doesn't matter are they are electrically connected. Figure 2.9 Identify the digital multimeter (DMM) at your workbench. If there are two DMMs, use the one on the left-hand side. Disconnect any cables that are plugged into it so the DMM is as shown in Figure 2.10 below. Figure 2.10 Set the DMM to DC voltage measurement mode as follows: If the DMM is not already powered on, push the power button (1). Once the DMM is ON, push the DC voltage (DCV) measurement mode button (4). If the \u201cRange\u201d indicator (3) is not showing \u201cAuto\u201d, press the menu button under \u201cRange\u201d (2) and change it to \u201cAuto\u201d. Identify the two cables that are next to the DMM with a banana connector on one end and an alligator clip on the other end. Connect the banana connector from the red cable to the red terminal labelled with \u201cHI\u201d under \u201cInput V\u03a9\u25ba|\u201d (5). Connect the banana connector from the black cable to the black terminal labelled with \u201cLO\u201d under \u201cInput V\u03a9\u25ba|\u201d (6) Figure 2.11 Verify the cables are connected as shown in Figure 2.5 above. At this point, your DMM is set up to measure direct current (DC) voltage. We\u2019ll be discussing direct current voltage during class. Remember this configuration for future labs and careers as measuring DC voltage is a very important skill for working with electronics. Identify the DC power supply at your workbench. If there are two DC power supplies, use the one that's most similar to the one shown. Disconnect any cables that are plugged in so it is as shown in Figure 2.11 below. Figure 2.12 Turn on the DC power supply (1) and then press the \u201cDisplay Limit\u201d button (2). Select the appropriate output voltage range (10) and use the lowest possible setting for a 5V output. In Figure 2.6 above, the lowest setting is \"15V, 7A\", however, the lowest output range varies between different models of power supply. Adjust the voltage output to +5.000V (9) using the digit selector (6) and the adjustment knob (7). Depending on the model of the power supply, the number of significant figures of the voltage output might be different. Identify the black cable with two leads that are next to the DC power supply with a banana connector on one end and an alligator clip on the other end. Connect the red banana connector from the cable to the red \u201cOutput\u201d terminal labelled with \u201c+\u201d (9) NOTE: In some models of power supply, there might be multiple output terminals. connect to the appropriate output terminal depending on the output range you selected earlier. Connect the black banana connector from the cable to the black \u201cOutput\u201d terminal labelled with \u201c-\u201c (10) You\u2019ve now set up the power supply for DC output. Attach a jumper cable to each of the alligator clips as shown in Figure 2.12. It can be jumper wire of any type and colour. Figure 2.12 SHORT CIRCUIT WARNING: Ensure the exposed portion of the red alligator clip or wire is NOT touching the exposed portion of the black alligator clip or wire. Connect the jumper wire from the red cable of the power supply to the same row as the first resistor lead. Then connect the jumper wire from the black cable of the power supply to the same row as the second resistor lead to assemble the circuit below. Figure 2.13 Connect the jumper wire from the red cable of the DMM to the same row as the first resistor lead. Then connect the jumper wire from the black cable of the DMM to the same row as the second resistor lead. Figure 2.14 Press the \"Display Limit\" button (2) on the power supply again and verify the voltage is adjusted to +5.000V and the banana cables are connected. Also, verify that the exposed portion of the red alligator clip is NOT touching the exposed portion of the black alligator clip. Turn on the power supply output by pressing the Output On/Off button (8). NOTE: There is a difference between the power supply being ON/OF and the power supply OUTPUT being ON/OFF. The power supply can be ON with its power output OFF. Notice that the DMM should now read about +5V, similar to as shown in Figure 2.15. Make a note of the range value beside the \u201cAuto\u201d on the DMM display. Figure 2.15 With the power supply output ON, adjust the output voltage to +13V. Note: If the output range does not allow you to go to 13V, switch the output range (10) and terminals as necessary. Lab Question 1: What happened to the Range setting on the DMM? If you don't notice the change, decrease the output voltage back to 5V and try again. Afterward, decrease the voltage of the DC power supply slowly to 5V. Lab Question 2: At what power supply voltage did the DMM change back to \u201cAuto 10V\u201d? How are the number of digits and decimal places the same or different when the voltage range changes? What does that mean for the accuracy of the readings? Using the DMM reading only, adjust the output voltage of the DC power supply so the reading on the DMM will display +1.000V. Note: Switch the output range and terminal as necessary. Lab Question 3: What is the output voltage of the DC power supply? Do they agree exactly with each other? If not, which one is higher and what is the percentage difference? /( % diff = diff / expected value /) Adjust the DC power supply output voltage to +1.000V then change the voltage Range on the DMM from \"Auto\" to \"100mV\" using the Range selection button. The DMM should display \"OVERLOAD\" because the 1V output from the power supply is higher than the maximum 100mV range that can be measured. Manually change the DMM \"Range\" setting and power supply voltage output according to the table below. Then record the voltage reading on the DMM in the and do this for DC output voltage of +1V, +2V, +5V, and +10V. NOTE: The reading might fluctuate but record at least 4 significant digits to the best of your ability in estimating AND record all LEADING ZEROS . Output: +1V Output: +2V Output: +5V Output: +10V Range: 100mV OVERLOAD Range: 1V Range: 10V Range: 100V Range: 1000V Lab Question 4: If we want the most precise reading, what is the best setting for each DC output voltage in the table? Circle the most precise reading for each voltage output in the table above. Change the DMM \"Range\" setting back to Auto then set the power supply output back to 5V. Take a look at the current output value (Figure 2.11 (8)) from the power supply. Lab Question 5: Does this value agree with the Ohm's law calculation you made earlier in the pre-lab? Turn off the DC power supply and disconnect the alligator clips. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Part 2: Digital Multimeter (DMM) and DC Voltage Measurement"},{"location":"ses250/lab3/","text":"Lab 3 : Series and Parallel Resistive Circuit Seneca College SES250 Electromagnatics Purposes To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To verify Ohm's Law Objectives Assemble electronic components onto a breadboard Measure voltage and current from a breadboard using a digital multimeter (DMM) Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit. Description If you don't remember how to operate the DMM and read the resistor colour band, refer to the description section of Lab 2 . Voltage Measurement In Lab 2, we used the DMM as a voltmeter to measure voltage (or the potential difference) across two nodes in a circuit. When measuring voltage, the DMM is connected in parallel with the circuit as shown in Figure 2.14a from Lab 2 . An ideal voltmeter has infinite resistance so energy will not be dissipated by the test equipment. In practice, the internal resistance of a voltmeter is in the M\u03a9 range. Current Measurement Most modern DMMs are capable of being used as an ammeter for measuring current through a circuit. Differing from voltage measurement, current measurement is made by connecting the DMM is series with the circuit as shown in Figure 3.1. An ideal ammeter has zero resistance so energy will not be dissipated by the test equipment. In practice, the internal resistance of a voltmeter is in the \u03a9 range. Figure 3.1 Current Measuring Circuit Resistance Measurement Most modern DMMs are also capable of measuring the resistance through a circuit. This feature, however, is most often used to measure the resistance of a single resistor. To measure resistance, put the DMM in resistance measuring mode then connect the DMM in parallel with the circuit. TinkerCAD Breadboard Simulator There are many breadboard simulators available online. In particular, TinkerCAD Circuit is a nice tool that you can use to practice assembling a circuit with a virtual breadboard. See the diagram below as an example. Use this tool to help you prepare for this and future labs. Figure 3.2 TinkerCAD Circuit Simulation Tool Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires 1k\u03a9 Resistor (brown-black-red) 10k\u03a9 resistor (brown-black-orange) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy two (2x) of the following Table 1 into your notebook for this lab: Table 1: Resistor # First Band Second Band Multiplier Nonimal \u03a9 Measured \u03a9 Colour Total Value x 10 ^ Sketch the breadboard sketch below onto your notebook then draw how the components (voltage source, resistor, voltmeter, and ammeter) will be connected on the breadboard according to the circuit in Figures 3.5, 3.6, and 3.7. Clearly show which tie point the wire, resistor, DMM, and power supply be attached to. Use TinkerCAD Circuit to help with your understanding of breadboard and component wiring. You may also simulate all the steps as preparation for the lab. Refer the Lab 2 Figure 2.13 for a breadboard diagram example. Copy the table in Lab Questions 3, 4 and 5 into your notebook. Calculate the theoretical reading of the voltmeter and ammeter of the circuit in Figures 3.6 and 3.7 for a supply voltage of 1V, 2V, 5V, and 10V. Procedures Part 1: Resistance Measurement Take out a 1k\u03a9 resistor and a 10k\u03a9 resistor from your lab kit. Lab Question 1: Write down the colour code of each resistor then determine their resistance value using the resistor colour chart in Lab 2 . Use the table below to help you determine the resistance value of each resistor. Leave the \"Measured \u03a9\" blank. Example: 1st Band 2nd Band Multiplier Nonimal \u03a9 Measured \u03a9 % Error Colour Brown Black Red Total - - Value 1 0 x 10 ^ 2 1 k\u03a9 1.013 k\u03a9 1.3% Turn on the one of DMM at your workbench and turn it into the \u201c\u03a9 2W\u201d (1) resistance measurement mode. Ensure the banana plugs are connected to the resistance input terminals as shown in Figure 3.3 (2)(3). Figure 3.3 DMM Resistance Mode Connect the red alligator clip of the DMM to one lead of one of the resistors and the black alligator clip to the other lead of the resistor. Lab Question 2: Write down the measured resistance (at least 3 significant figures) in the \"Measured \u03a9\" column of the table you created in the pre-lab. Does this value agree with the normal resistor value according to the colour band value? What is the % error? Is the error within the tolerance of the resistor (indicated by the tolerance band)? Repeat step 3 for the second resistor then disconnect the DMM from the resistor. Part 2: Voltage and Current Measurement Ensure the DC power supply is OFF. Locate its red and black cables then attach jumper wires to the alligator clips as shown in Figure 2.12 from Lab 2 . Set up one of the DMMs to voltage mode (Refer to Lab 2 if you don't remember the procedure) and ensure the banana cables are connected properly to the DMM for voltage measure. Connect jumper wires to each of the alligator clips. Set up the other DMM at your workbench to the current mode (DCI) by holding the \"SHIFT\" button (1) and the \"DCV\" button (2). Afterward, ensure the banana cable is connected properly to the DMM for voltage measurement by connecting the black banana cable to the \"LO\" Input (3) and the red banana cable to the \"3A\" Input (4) as shown in Figure 3.4. Then Connect jumper wires to each of the alligator clips. Figure 3.4 Next, insert one of the resistors onto a breadboard the same way as shown in Figure 2.9 from Lab 2 then connect the jumper wires from DMMs and the power supply to form the following circuit. Notice the voltmeter (DMM in DC voltage mode (DCV)) is connected in parallel with the resistor and the Ammeter (DMM in DC current mode (DCI)) is connected in series with the circuit. A small example of some of the connections is shown. Figure 3.5 Double-verify that the circuit is assembled properly and that there is no short circuit. Tips: Follow the flow of the current on your physical circuit from the positive (+) terminal of the power supply to the resistor, then to the ammeter, then to the negative terminal of the power supply to verify proper connections. Turn on the DC power supply and set the output to 5V then turn on the output. Verify the voltage reading on the DMM agrees with the output of the DC power supply then turn it off . If you are not seeing 5VDC at the DMM, verify your wiring and that you are using the correct output channel of the power supply. Lab Question 3: Adjust the power supply output to 1V, 2V, 5V, and 10V to complete the table below. Do the measurements agree with Ohm's Law? Power Supply Voltage [V] 1V 2V 5V 10V Current Using 1k\u03a9 Resistor [A] Current Using 10k\u03a9 Resistor [A] Turn off the DC power supply output. Part 3: Series and Parallel Resistive Circuit Next, we\u2019ll assemble the following series of resistive circuits using the 1k\u03a9 and 10k\u03a9 breadboard. The power supply will act as the DC Voltage Source. Figure 3.6 Set the DC power supply to 1V output then turn on the output. Verify the voltage reading on the DMM agrees with the output of the DC power supply then turn it off . If you are not seeing 1VDC at the DMM, verify your wiring and that you are using the correct output channel of the power supply. Lab Question 4: Adjust the power supply output to 1V, 2V, 5V, and 10V to complete the table below. Do the measurements agree with the estimate you made in the pre-lab? Power Supply Voltage [V] 1V 2V 5V 10V Voltmeter Reading [V] Ammeter Reading [A] Lastly, we\u2019ll assemble the following parallel resistive circuit using the 1k\u03a9 and 10k\u03a9 breadboard. The power supply will act as the DC Voltage Source. Figure 3.7 Set the DC power supply to 1V output then turn on the output. Verify the voltage reading on the DMM agrees with the output of the DC power supply then turn it off . If you are not seeing 1VDC at the DMM, verify your wiring and that you are using the correct output channel of the power supply. Lab Question 5: Adjust the power supply output to 1V, 2V, 5V, and 10V to complete the table below. Do the measurements agree with the estimate you made in the pre-lab? Power Supply Voltage [V] 1V 2V 5V 10V Voltmeter Reading [V] Ammeter Reading [A] Turn off the DC power supply output. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 3 : Series and Parallel Resistive Circuit"},{"location":"ses250/lab3/#lab-3-series-and-parallel-resistive-circuit","text":"Seneca College SES250 Electromagnatics","title":"Lab 3 : Series and Parallel Resistive Circuit"},{"location":"ses250/lab3/#purposes","text":"To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To verify Ohm's Law","title":"Purposes"},{"location":"ses250/lab3/#objectives","text":"Assemble electronic components onto a breadboard Measure voltage and current from a breadboard using a digital multimeter (DMM)","title":"Objectives"},{"location":"ses250/lab3/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab3/#description","text":"If you don't remember how to operate the DMM and read the resistor colour band, refer to the description section of Lab 2 .","title":"Description"},{"location":"ses250/lab3/#voltage-measurement","text":"In Lab 2, we used the DMM as a voltmeter to measure voltage (or the potential difference) across two nodes in a circuit. When measuring voltage, the DMM is connected in parallel with the circuit as shown in Figure 2.14a from Lab 2 . An ideal voltmeter has infinite resistance so energy will not be dissipated by the test equipment. In practice, the internal resistance of a voltmeter is in the M\u03a9 range.","title":"Voltage Measurement"},{"location":"ses250/lab3/#current-measurement","text":"Most modern DMMs are capable of being used as an ammeter for measuring current through a circuit. Differing from voltage measurement, current measurement is made by connecting the DMM is series with the circuit as shown in Figure 3.1. An ideal ammeter has zero resistance so energy will not be dissipated by the test equipment. In practice, the internal resistance of a voltmeter is in the \u03a9 range. Figure 3.1 Current Measuring Circuit","title":"Current Measurement"},{"location":"ses250/lab3/#resistance-measurement","text":"Most modern DMMs are also capable of measuring the resistance through a circuit. This feature, however, is most often used to measure the resistance of a single resistor. To measure resistance, put the DMM in resistance measuring mode then connect the DMM in parallel with the circuit.","title":"Resistance Measurement"},{"location":"ses250/lab3/#tinkercad-breadboard-simulator","text":"There are many breadboard simulators available online. In particular, TinkerCAD Circuit is a nice tool that you can use to practice assembling a circuit with a virtual breadboard. See the diagram below as an example. Use this tool to help you prepare for this and future labs. Figure 3.2 TinkerCAD Circuit Simulation Tool","title":"TinkerCAD Breadboard Simulator"},{"location":"ses250/lab3/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires 1k\u03a9 Resistor (brown-black-red) 10k\u03a9 resistor (brown-black-orange)","title":"Materials"},{"location":"ses250/lab3/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy two (2x) of the following Table 1 into your notebook for this lab: Table 1: Resistor # First Band Second Band Multiplier Nonimal \u03a9 Measured \u03a9 Colour Total Value x 10 ^ Sketch the breadboard sketch below onto your notebook then draw how the components (voltage source, resistor, voltmeter, and ammeter) will be connected on the breadboard according to the circuit in Figures 3.5, 3.6, and 3.7. Clearly show which tie point the wire, resistor, DMM, and power supply be attached to. Use TinkerCAD Circuit to help with your understanding of breadboard and component wiring. You may also simulate all the steps as preparation for the lab. Refer the Lab 2 Figure 2.13 for a breadboard diagram example. Copy the table in Lab Questions 3, 4 and 5 into your notebook. Calculate the theoretical reading of the voltmeter and ammeter of the circuit in Figures 3.6 and 3.7 for a supply voltage of 1V, 2V, 5V, and 10V.","title":"Preparation"},{"location":"ses250/lab3/#procedures","text":"","title":"Procedures"},{"location":"ses250/lab3/#part-1-resistance-measurement","text":"Take out a 1k\u03a9 resistor and a 10k\u03a9 resistor from your lab kit. Lab Question 1: Write down the colour code of each resistor then determine their resistance value using the resistor colour chart in Lab 2 . Use the table below to help you determine the resistance value of each resistor. Leave the \"Measured \u03a9\" blank. Example: 1st Band 2nd Band Multiplier Nonimal \u03a9 Measured \u03a9 % Error Colour Brown Black Red Total - - Value 1 0 x 10 ^ 2 1 k\u03a9 1.013 k\u03a9 1.3% Turn on the one of DMM at your workbench and turn it into the \u201c\u03a9 2W\u201d (1) resistance measurement mode. Ensure the banana plugs are connected to the resistance input terminals as shown in Figure 3.3 (2)(3). Figure 3.3 DMM Resistance Mode Connect the red alligator clip of the DMM to one lead of one of the resistors and the black alligator clip to the other lead of the resistor. Lab Question 2: Write down the measured resistance (at least 3 significant figures) in the \"Measured \u03a9\" column of the table you created in the pre-lab. Does this value agree with the normal resistor value according to the colour band value? What is the % error? Is the error within the tolerance of the resistor (indicated by the tolerance band)? Repeat step 3 for the second resistor then disconnect the DMM from the resistor.","title":"Part 1: Resistance Measurement"},{"location":"ses250/lab3/#part-2-voltage-and-current-measurement","text":"Ensure the DC power supply is OFF. Locate its red and black cables then attach jumper wires to the alligator clips as shown in Figure 2.12 from Lab 2 . Set up one of the DMMs to voltage mode (Refer to Lab 2 if you don't remember the procedure) and ensure the banana cables are connected properly to the DMM for voltage measure. Connect jumper wires to each of the alligator clips. Set up the other DMM at your workbench to the current mode (DCI) by holding the \"SHIFT\" button (1) and the \"DCV\" button (2). Afterward, ensure the banana cable is connected properly to the DMM for voltage measurement by connecting the black banana cable to the \"LO\" Input (3) and the red banana cable to the \"3A\" Input (4) as shown in Figure 3.4. Then Connect jumper wires to each of the alligator clips. Figure 3.4 Next, insert one of the resistors onto a breadboard the same way as shown in Figure 2.9 from Lab 2 then connect the jumper wires from DMMs and the power supply to form the following circuit. Notice the voltmeter (DMM in DC voltage mode (DCV)) is connected in parallel with the resistor and the Ammeter (DMM in DC current mode (DCI)) is connected in series with the circuit. A small example of some of the connections is shown. Figure 3.5 Double-verify that the circuit is assembled properly and that there is no short circuit. Tips: Follow the flow of the current on your physical circuit from the positive (+) terminal of the power supply to the resistor, then to the ammeter, then to the negative terminal of the power supply to verify proper connections. Turn on the DC power supply and set the output to 5V then turn on the output. Verify the voltage reading on the DMM agrees with the output of the DC power supply then turn it off . If you are not seeing 5VDC at the DMM, verify your wiring and that you are using the correct output channel of the power supply. Lab Question 3: Adjust the power supply output to 1V, 2V, 5V, and 10V to complete the table below. Do the measurements agree with Ohm's Law? Power Supply Voltage [V] 1V 2V 5V 10V Current Using 1k\u03a9 Resistor [A] Current Using 10k\u03a9 Resistor [A] Turn off the DC power supply output.","title":"Part 2: Voltage and Current Measurement"},{"location":"ses250/lab3/#part-3-series-and-parallel-resistive-circuit","text":"Next, we\u2019ll assemble the following series of resistive circuits using the 1k\u03a9 and 10k\u03a9 breadboard. The power supply will act as the DC Voltage Source. Figure 3.6 Set the DC power supply to 1V output then turn on the output. Verify the voltage reading on the DMM agrees with the output of the DC power supply then turn it off . If you are not seeing 1VDC at the DMM, verify your wiring and that you are using the correct output channel of the power supply. Lab Question 4: Adjust the power supply output to 1V, 2V, 5V, and 10V to complete the table below. Do the measurements agree with the estimate you made in the pre-lab? Power Supply Voltage [V] 1V 2V 5V 10V Voltmeter Reading [V] Ammeter Reading [A] Lastly, we\u2019ll assemble the following parallel resistive circuit using the 1k\u03a9 and 10k\u03a9 breadboard. The power supply will act as the DC Voltage Source. Figure 3.7 Set the DC power supply to 1V output then turn on the output. Verify the voltage reading on the DMM agrees with the output of the DC power supply then turn it off . If you are not seeing 1VDC at the DMM, verify your wiring and that you are using the correct output channel of the power supply. Lab Question 5: Adjust the power supply output to 1V, 2V, 5V, and 10V to complete the table below. Do the measurements agree with the estimate you made in the pre-lab? Power Supply Voltage [V] 1V 2V 5V 10V Voltmeter Reading [V] Ammeter Reading [A] Turn off the DC power supply output. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Part 3: Series and Parallel Resistive Circuit"},{"location":"ses250/lab4/","text":"Lab 4 : Kirchhoff's Laws Seneca College SES250 Electromagnatics Purposes To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To understand and verify Kirchhoff's Laws To understand and verify Th\u00e9venin Theorem Objectives Assemble electronic components onto a breadboard Measure voltage and current from a breadboard using a digital multimeter (DMM) Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit. Description If you don't remember how to operate the DMM and read the resistor colour band, refer to the description section of Lab 2 . Kirchhoff's Current Law (KCL) When analyzing electronic circuits, a method often used is Kirchhoff's current law (KCL). KCL, Kirchhoff's first law, or Kirchhoff's junction rule, states that, for any node (junction) in an electrical circuit, the sum of currents flowing into that node is equal to the sum of currents flowing out of that node; or equivalently: the algebraic sum of currents in a network of conductors meeting at a point is zero: \\displaystyle\\sum_{i=1}^{n} I_i = \\sum_{i=1}^{n} {{V_i} \\over {R_i}} = 0 Figure 4.1 The current entering any junction is equal to the current leaving that junction. i2 + i3 = i1 + i4 Kirchhoff's Voltage Law (KVL) KVL, Kirchhoff's second law, or Kirchhoff's loop rule, states that the directed sum of the potential differences (voltages) around any closed loop is zero. Similarly to Kirchhoff's current law, the voltage law can be stated as: \\displaystyle\\sum_{i=1}^{n} V_i = \\sum_{i=1}^{n} {{I_i} {R_i}} = 0 Figure 4.2 The voltages around any closed loop are zero Source: Wikipedia: Kirchhoff's circuit laws TinkerCAD Breadboard Simulator There are many breadboard simulators available online. In particular, TinkerCAD Circuit is a nice tool that you can use to practice assembling a circuit with a virtual breadboard. See the diagram below as an example. Use this tool to help you prepare for this and future labs. Figure 4.3 TinkerCAD Circuit Simulation Tool Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (2x) 100\u03a9 Resistor (brown-black-brown) (2x) 330\u03a9 Resistor (orange-orange-brown) (2x) 1k\u03a9 Resistor (brown-black-red) (1x) 4.7k\u03a9 Resistor (yellow-purple-red) (2x) 10k\u03a9 resistor (brown-black-orange) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy observation table 1 into your notebook. Sketch the breadboard diagram below onto your notebook then draw how the components (voltage source, resistor, voltmeter, and ammeter) will be connected on the breadboard according to the circuit in Figure 4.4 for measuring: I_1 I_2 I_L V_a V_b Clearly show which tie point the wire, resistor, DMM, and power supply be attached to. Use TinkerCAD Circuit to help with your understanding of breadboard and component wiring. You may also simulate all the steps as preparation for the lab. Refer the Lab 2 Figure 2.13 for a breadboard diagram example. Use KCL or KVL to calculate the estimated (therotical) values for I_1 , I_2 , I_L , V_a and V_b in Figure 4.4 then fill in the appropriate cell in the observation table 1. Use 1k\u03a9 for R_L and show all calculation. Procedures Current and Voltage Measurement For this lab, below is the circuit that you'll be working with. You'll need to add voltmeter and ammeter into the circuit to measure the branch current and node voltage. Remember, current measurement needs to be in series with the branch. Figure 4.4 Assemble the above circuit shown onto your breadboard as how you prepared during your pre-lab for measuring current I_1 . Use 1k\u03a9 for R_L . Turn on the power supplies and set the DMM for the appropriate measurement then write down your measurement into the observation table. Lab Question 1: Write down the measured current into the appropriate cell in the table below. Tabel 1: Observation Table: I_1 I_2 I_L V_a V_b Estimated Value Measured Value % Error Turn off the output of the power supplies. Modify the circuit on your breadboard for measuring current I_2 and I_L as how you prepared during your pre-lab. You may use both DMM. Turn on the power supplies then write down your measurement into the observation table. Lab Question 2: Write down the measured current into the appropriate cell in the observation table. Repeat the above steps for the measurement of voltage measurement V_a and V_b . You may use both DMM. Lab Question 3: Does all the % error falls within the tolarance of the resistors? You can keep your circuit assembled for Lab 5. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 4 : Kirchhoff's Laws"},{"location":"ses250/lab4/#lab-4-kirchhoffs-laws","text":"Seneca College SES250 Electromagnatics","title":"Lab 4 : Kirchhoff's Laws"},{"location":"ses250/lab4/#purposes","text":"To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To understand and verify Kirchhoff's Laws To understand and verify Th\u00e9venin Theorem","title":"Purposes"},{"location":"ses250/lab4/#objectives","text":"Assemble electronic components onto a breadboard Measure voltage and current from a breadboard using a digital multimeter (DMM)","title":"Objectives"},{"location":"ses250/lab4/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab4/#description","text":"If you don't remember how to operate the DMM and read the resistor colour band, refer to the description section of Lab 2 .","title":"Description"},{"location":"ses250/lab4/#kirchhoffs-current-law-kcl","text":"When analyzing electronic circuits, a method often used is Kirchhoff's current law (KCL). KCL, Kirchhoff's first law, or Kirchhoff's junction rule, states that, for any node (junction) in an electrical circuit, the sum of currents flowing into that node is equal to the sum of currents flowing out of that node; or equivalently: the algebraic sum of currents in a network of conductors meeting at a point is zero: \\displaystyle\\sum_{i=1}^{n} I_i = \\sum_{i=1}^{n} {{V_i} \\over {R_i}} = 0 Figure 4.1 The current entering any junction is equal to the current leaving that junction. i2 + i3 = i1 + i4","title":"Kirchhoff's Current Law (KCL)"},{"location":"ses250/lab4/#kirchhoffs-voltage-law-kvl","text":"KVL, Kirchhoff's second law, or Kirchhoff's loop rule, states that the directed sum of the potential differences (voltages) around any closed loop is zero. Similarly to Kirchhoff's current law, the voltage law can be stated as: \\displaystyle\\sum_{i=1}^{n} V_i = \\sum_{i=1}^{n} {{I_i} {R_i}} = 0 Figure 4.2 The voltages around any closed loop are zero Source: Wikipedia: Kirchhoff's circuit laws","title":"Kirchhoff's Voltage Law (KVL)"},{"location":"ses250/lab4/#tinkercad-breadboard-simulator","text":"There are many breadboard simulators available online. In particular, TinkerCAD Circuit is a nice tool that you can use to practice assembling a circuit with a virtual breadboard. See the diagram below as an example. Use this tool to help you prepare for this and future labs. Figure 4.3 TinkerCAD Circuit Simulation Tool","title":"TinkerCAD Breadboard Simulator"},{"location":"ses250/lab4/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (2x) 100\u03a9 Resistor (brown-black-brown) (2x) 330\u03a9 Resistor (orange-orange-brown) (2x) 1k\u03a9 Resistor (brown-black-red) (1x) 4.7k\u03a9 Resistor (yellow-purple-red) (2x) 10k\u03a9 resistor (brown-black-orange)","title":"Materials"},{"location":"ses250/lab4/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy observation table 1 into your notebook. Sketch the breadboard diagram below onto your notebook then draw how the components (voltage source, resistor, voltmeter, and ammeter) will be connected on the breadboard according to the circuit in Figure 4.4 for measuring: I_1 I_2 I_L V_a V_b Clearly show which tie point the wire, resistor, DMM, and power supply be attached to. Use TinkerCAD Circuit to help with your understanding of breadboard and component wiring. You may also simulate all the steps as preparation for the lab. Refer the Lab 2 Figure 2.13 for a breadboard diagram example. Use KCL or KVL to calculate the estimated (therotical) values for I_1 , I_2 , I_L , V_a and V_b in Figure 4.4 then fill in the appropriate cell in the observation table 1. Use 1k\u03a9 for R_L and show all calculation.","title":"Preparation"},{"location":"ses250/lab4/#procedures","text":"","title":"Procedures"},{"location":"ses250/lab4/#current-and-voltage-measurement","text":"For this lab, below is the circuit that you'll be working with. You'll need to add voltmeter and ammeter into the circuit to measure the branch current and node voltage. Remember, current measurement needs to be in series with the branch. Figure 4.4 Assemble the above circuit shown onto your breadboard as how you prepared during your pre-lab for measuring current I_1 . Use 1k\u03a9 for R_L . Turn on the power supplies and set the DMM for the appropriate measurement then write down your measurement into the observation table. Lab Question 1: Write down the measured current into the appropriate cell in the table below. Tabel 1: Observation Table: I_1 I_2 I_L V_a V_b Estimated Value Measured Value % Error Turn off the output of the power supplies. Modify the circuit on your breadboard for measuring current I_2 and I_L as how you prepared during your pre-lab. You may use both DMM. Turn on the power supplies then write down your measurement into the observation table. Lab Question 2: Write down the measured current into the appropriate cell in the observation table. Repeat the above steps for the measurement of voltage measurement V_a and V_b . You may use both DMM. Lab Question 3: Does all the % error falls within the tolarance of the resistors? You can keep your circuit assembled for Lab 5. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Current and Voltage Measurement"},{"location":"ses250/lab5/","text":"Lab 5 : Th\u00e9venin Circuit Seneca College SES250 Electromagnatics Purposes To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To understand and verify Th\u00e9venin Theorem Objectives Assemble electronic components onto a breadboard Measure voltage and current from a breadboard using a digital multimeter (DMM) Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit. Description If you don't remember how to operate the DMM and read the resistor colour band, refer to the description section of Lab 2 . Th\u00e9venin Theorem Th\u00e9venin theorem is a method often used to simplify circuit analysis from a complex circuit to a simpler one with only a Th\u00e9venin voltage source in series with a Th\u00e9venin resistor. Any linear electrical network containing only voltage sources, current sources and resistances can be replaced at terminals A\u2013B by an equivalent combination of a voltage source V_{th} in a series connection with a resistance R_{th} . Figure 5.1 Th\u00e9venin equivalent circuit The equivalent voltage V_{th} is the voltage obtained at terminals A\u2013B of the network with terminals A\u2013B open-circuited. The equivalent resistance R_{th} is the resistance that the circuit between terminals A and B would have if all ideal voltage sources in the circuit were replaced by a short circuit and all ideal current sources were replaced by an open circuit. If terminals A and B are connected to one another, the current flowing from A and B will be V_{th} over R_{th} . This means that R_{th} could alternatively be calculated as V_{th} divided by the short-circuit current between A and B when they are connected together. Source: Wikipedia: Th\u00e9venin's theorem Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (2x) 100\u03a9 Resistor (brown-black-brown) (2x) 330\u03a9 Resistor (orange-orange-brown) (2x) 1k\u03a9 Resistor (brown-black-red) (1x) 4.7k\u03a9 Resistor (yellow-purple-red) (2x) 10k\u03a9 resistor (brown-black-orange) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy observation table 1 and 2 of this lab into your notebook. Sketch a breadboard diagram of Figure 5.2 and Figure 5.3 onto your notebook for measuring: I_L V_{ab} (or the potential difference between V_a and V_b ) Use KCL or KVL to calculate the estimated values for I_L , V_{ab} in Figure 5.2 then fill in the appropriate cell in the observation table 1. Perform the calculation using 100\u03a9, 330\u03a9, 1k\u03a9, and 10k\u03a9 for R_L . Find the Th\u00e9venin equivalent circuit for Figure 5.2 then choose the closest resistor you have to R_{th} for Part 2 of the lab. Use Th\u00e9venin Theorem to calculate the estimated values for I_L in Figure 5.3 for each of the R_L values in Part 1 then fill in the appropriate cell in the observation table 2. Procedures For this lab, you'll be using the same circuit as the one from Lab 4 but you'll be varying the value of the load resistor to understand the concept of Th\u00e9venin Circuit. Use 1k\u03a9 for R_L . Figure 5.2 Part 1: I_L and V_{ab} for various R_L Assemble the circuit above as how you've prepare in your pre-lab. Replace the R_L resistor with the various value on the table below then measure current I_L and V_{ab} for each value. Turn on the power supplies then write down your measurement into the observation table. Lab Question 1: Write down the measured current into the appropriate cell in the table below. Tabel 1: R_L Observation Table: R_L Estimated I_L Estimated V_{ab} Measured I_L Measured V_{ab} 100\u03a9 330\u03a9 1k\u03a9 10k\u03a9 Turn off the output of the power supplies then repeat the measurement above for all R_L values. Part 2: Th\u00e9venin Equivalent Circuit Next, assemble the Th\u00e9venin circuit given below with the resistor value you calculate in the pre-lab. Start with 1k\u03a9 for R_L . Figure 5.3 Apply the Th\u00e9venin voltage you calculated from the pre-lab then turn on the power supplies. Write down your measurement in the observation table. Lab Question 2: Write down the measured current into the appropriate cell in the table below. Table 2: Th\u00e9venin Circuit Observation Table: R_L Measured I_L Measured V_{ab} Power Dissipated 100\u03a9 330\u03a9 1k\u03a9 10k\u03a9 Turn off the output of the power supplies then repeat the measurement above for all R_L values. Lab Question 3: Does the value agree closely with the original circuit? Note that the R_{th} you've chosen might not exactly match the theoretical R_{th} . Lab Question 4: Calculate the power dissipation P = IV by the load resistor in each case. Which resistor dissipated the most power? This is the load resistor value that allow for the maximum amount of power to be transferred from the voltage source to the load (Maxium Power Transferred). Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 5 : Th\u00e9venin Circuit"},{"location":"ses250/lab5/#lab-5-thevenin-circuit","text":"Seneca College SES250 Electromagnatics","title":"Lab 5 : Th\u00e9venin Circuit"},{"location":"ses250/lab5/#purposes","text":"To become familiar with measurement techniques of direct current (DC) To study the relationship between voltage, resistance, and current To understand and verify Th\u00e9venin Theorem","title":"Purposes"},{"location":"ses250/lab5/#objectives","text":"Assemble electronic components onto a breadboard Measure voltage and current from a breadboard using a digital multimeter (DMM)","title":"Objectives"},{"location":"ses250/lab5/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab5/#description","text":"If you don't remember how to operate the DMM and read the resistor colour band, refer to the description section of Lab 2 .","title":"Description"},{"location":"ses250/lab5/#thevenin-theorem","text":"Th\u00e9venin theorem is a method often used to simplify circuit analysis from a complex circuit to a simpler one with only a Th\u00e9venin voltage source in series with a Th\u00e9venin resistor. Any linear electrical network containing only voltage sources, current sources and resistances can be replaced at terminals A\u2013B by an equivalent combination of a voltage source V_{th} in a series connection with a resistance R_{th} . Figure 5.1 Th\u00e9venin equivalent circuit The equivalent voltage V_{th} is the voltage obtained at terminals A\u2013B of the network with terminals A\u2013B open-circuited. The equivalent resistance R_{th} is the resistance that the circuit between terminals A and B would have if all ideal voltage sources in the circuit were replaced by a short circuit and all ideal current sources were replaced by an open circuit. If terminals A and B are connected to one another, the current flowing from A and B will be V_{th} over R_{th} . This means that R_{th} could alternatively be calculated as V_{th} divided by the short-circuit current between A and B when they are connected together. Source: Wikipedia: Th\u00e9venin's theorem","title":"Th\u00e9venin Theorem"},{"location":"ses250/lab5/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (2x) 100\u03a9 Resistor (brown-black-brown) (2x) 330\u03a9 Resistor (orange-orange-brown) (2x) 1k\u03a9 Resistor (brown-black-red) (1x) 4.7k\u03a9 Resistor (yellow-purple-red) (2x) 10k\u03a9 resistor (brown-black-orange)","title":"Materials"},{"location":"ses250/lab5/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy observation table 1 and 2 of this lab into your notebook. Sketch a breadboard diagram of Figure 5.2 and Figure 5.3 onto your notebook for measuring: I_L V_{ab} (or the potential difference between V_a and V_b ) Use KCL or KVL to calculate the estimated values for I_L , V_{ab} in Figure 5.2 then fill in the appropriate cell in the observation table 1. Perform the calculation using 100\u03a9, 330\u03a9, 1k\u03a9, and 10k\u03a9 for R_L . Find the Th\u00e9venin equivalent circuit for Figure 5.2 then choose the closest resistor you have to R_{th} for Part 2 of the lab. Use Th\u00e9venin Theorem to calculate the estimated values for I_L in Figure 5.3 for each of the R_L values in Part 1 then fill in the appropriate cell in the observation table 2.","title":"Preparation"},{"location":"ses250/lab5/#procedures","text":"For this lab, you'll be using the same circuit as the one from Lab 4 but you'll be varying the value of the load resistor to understand the concept of Th\u00e9venin Circuit. Use 1k\u03a9 for R_L . Figure 5.2","title":"Procedures"},{"location":"ses250/lab5/#part-1-i_l-and-v_ab-for-various-r_l","text":"Assemble the circuit above as how you've prepare in your pre-lab. Replace the R_L resistor with the various value on the table below then measure current I_L and V_{ab} for each value. Turn on the power supplies then write down your measurement into the observation table. Lab Question 1: Write down the measured current into the appropriate cell in the table below. Tabel 1: R_L Observation Table: R_L Estimated I_L Estimated V_{ab} Measured I_L Measured V_{ab} 100\u03a9 330\u03a9 1k\u03a9 10k\u03a9 Turn off the output of the power supplies then repeat the measurement above for all R_L values.","title":"Part 1: I_L and V_{ab} for various R_L"},{"location":"ses250/lab5/#part-2-thevenin-equivalent-circuit","text":"Next, assemble the Th\u00e9venin circuit given below with the resistor value you calculate in the pre-lab. Start with 1k\u03a9 for R_L . Figure 5.3 Apply the Th\u00e9venin voltage you calculated from the pre-lab then turn on the power supplies. Write down your measurement in the observation table. Lab Question 2: Write down the measured current into the appropriate cell in the table below. Table 2: Th\u00e9venin Circuit Observation Table: R_L Measured I_L Measured V_{ab} Power Dissipated 100\u03a9 330\u03a9 1k\u03a9 10k\u03a9 Turn off the output of the power supplies then repeat the measurement above for all R_L values. Lab Question 3: Does the value agree closely with the original circuit? Note that the R_{th} you've chosen might not exactly match the theoretical R_{th} . Lab Question 4: Calculate the power dissipation P = IV by the load resistor in each case. Which resistor dissipated the most power? This is the load resistor value that allow for the maximum amount of power to be transferred from the voltage source to the load (Maxium Power Transferred). Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Part 2: Th\u00e9venin Equivalent Circuit"},{"location":"ses250/lab6/","text":"Lab 6 : Digital Storage Oscilloscope (DSO) Seneca College SES250 Electromagnatics Purpose To learn how to operate the function generator and digital storage oscilloscope (DSO) Objectives Generate waveform using a function generator Measure waveform using a digital storage oscilloscope (DSO) Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply and/or the function generator must be switched off before making any changes to the circuit. Description Function Generator A function generator is a piece of electronic test equipment or software used to generate different types of electrical waveforms over a wide range of frequencies. Some of the most common waveforms produced by the function generator are the sine wave, square wave, triangular wave, and sawtooth shapes. These waveforms can be either repetitive or single shots. Figure 6.1 Keysight 33500B Function Generator In the electronics lab, you will be using a Keysight 33500B (or similar) Function Generator. Its manual can be found here: Function Generator Manual Source: Wikipedia: Function Generator Digital Storage Oscilloscope (DSO) An oscilloscope, or DSO (for the more modern digital storage oscilloscope), is a type of electronic test instrument that graphically displays varying signal voltages, usually as a calibrated two-dimensional plot of one or more signals as a function of time. The displayed waveform can then be analyzed for properties such as amplitude, frequency, rise time, time interval, distortion, and others. Originally, the calculation of these values required manually measuring the waveform against the scales built into the screen of the instrument. Modern digital instruments may calculate and display these properties directly. Figure 6.2 Keysight 33500B Function Generator In the electronics lab, you will be using a Keysight DSO-X 2002A (or similar) Digital Storage Oscilloscope. Its manual can be found here: DSO Manual Source: Wikipedia: Oscilloscope Materials Preparation Lab Preparation Question: List 5 waveform that can be generated by the function generator used in this lab. Read through the lab manual and list the button(s) that you need to press to turn the output of the function generator on and off. In your own word, explain the difference between the 50\u03a9 and High-Z output mode of the function generator used in this lab. Procedures Identify the Digital Oscilloscope at your workbench. Disconnect any cable plugged into it so it is as shown below. Figure 6.3 Turn on the oscilloscope with the power button (8.3-1) if it is not already on. Identify the two cables with a BNC connector beside the oscilloscope. Connect the BNC cables to the CH1 (8.3-4) and CH2 connectors of the oscilloscope as shown. Figure 6.4 Press the CH1 On/Off button (6.3-6) so CH1 is on (button lights up green). Press the CH2 On/Off button so CH2 is off (no light showing at the button). The bright lines on the DSO display the waveform of the signal as a function of time. When there is no signal, the waveform is a flat line. If you don't see a flat line, that means your DSO is displaying amplified electronic noise from the environment. Don't worry if you don't see a flat line for this step of the lab. Lab Question 1: How many signal line(s) (6.3-13, bright solid horizontal line) do you see on the display? What is the colour of the line(s)? Press the CH2 On/Off button to turn CH2 on (button lights up green) then press the Auto Scale button (6.3-9) again. Lab Question 2: How many signal line(s) do you see on the display? What is the colour of the line(s)? You can adjust the vertical position of those signal lines for measurement or display purposes. Turn the CH1 vertical position knob (6.3-5) until the CH1 signal line is reasonably lined up vertically centred on the display. Try changing the vertical position of the CH2 signal line as well. Afterward, line up both signal lines vertically centred on the display. One line will be on top of the other line. Modern DSOs are complex test instruments with a lot of functionality. It is a very useful tool once you understand how to use it. The more you use and play with the tool, the more familiar you'll get. Turn off CH2. Identify the Function Generator at your workbench. Disconnect any cable plug into it so it is as shown below. Figure 6.5 Identify the cable with a BNC connector beside the function generator and connect it to the Output of the function generator (6.5-3). Afterward, push the power button (6.5-1) to turn on the function generator. After the function generator is turned on, we'll set up a 1kHz Sine wave, press the Waveforms button (6.5-7) and select Sine waveform mode from button menus (6.5-2). Then press the Parameters button (6.5-8) and use the keypad, digit selector buttons (6.5-5), and the adjustment knob (8.5-6) to set the following: Frequency: 1.000 kHz ( Note: pay attention to the number of 0s in kHz You can adjust the Units as necessary.) Amplitude: 100.0 mVpp (default setting) Offset: 0.000 V (default setting) Phase: 0\u00b0 (default setting) Identify the cable connected to the function generator and the alligator clips at the end of the cable connected to CH1 of the oscilloscope. Connect the two red alligator clips together and connect the two black alligator clips together. WARNING: Ensure the exposed portion of the red alligator clip is NOT touching the exposed portion of the black alligator clip. Figure 6.6 Once the cables are connected and the waveform is set, push the channel button on the function generator (6.7-4) then turn the output to \u201cOn\u201d (6.7-9). Figure 6.7 You should now see some signal on the DSO. If not, push the Auto Scale button on the oscilloscope (8.3-9). You should see a waveform that is similar to that shown in the figure below. Figure 6.8 Turn the time division knob (6.3-12) and the horizontal position knob (6.3-11) a few ticks clockwise then counter-clockwise. Lab Question 3: What effect do the time division knob and the horizontal position knob have on the waveform? The grey-white vertical lines (6.8-2) on the oscilloscope chart are called time division lines and the top right of the display shows the time divisor (6.8-4). In the figure above, the time divisor is set to 200.0\u03bcs/ which means each time division line represents 200.0\u03bcs in the time domain. The are a total of 10 time divisions in the display. Lab Question 4: Find two peaks in the signal waveform then count the number of time divisions in each period of the sine wave. Afterward, calculate the frequency of the sine wave using: f = 1 / T where f is the frequency in [Hz] and T is the period in [s]. Does it agree with the output of the function generator? You can adjust the horizontal position of the sine wave with the horizontal position knob to help with counting if necessary. Change the output of the function generator to a different frequency such as 500Hz and another waveform such as square and triangle then see how it is displayed on the oscilloscope. Afterward, put the function generator back to a sine wave at 1kHz. Press the Measurement (Meas) button (6.3-8) on the oscilloscope. In the measurement menu that shows up, use the menu buttons (6.3-2) and menu selector knob (6.3-3) to clear all measurements with the Clear Meas option. Then, add Frequency (Freq) and peak-to-peak voltage (Pk-Pk) for measurement. Ensure the Source channel is set to 1 at the lower left corner of the menu. The two measurements should now show up in the measurement list on the right-hand side. If a mistake is made, press Clear Meas to remove a measurement. Lab Question 5: Does the frequency measurement agree with your calculation above? Turn the time division knob slowly so the waveform expands and compresses horizontally. Turn it from 10 periods to only a portion of the waveform shown. Lab Question 6: At what time divisor does the measurement starts to become invalid? How many periods of the waveform are shown when it becomes invalid? What comment can you make on how the oscilloscope calculates the freq measurement (in terms of the waveform required to be displayed on the screen)? The grey-white horizontal line (6.8-1) on the oscilloscope display is called a voltage division line and at the top left of the display shows the voltage divisor (6.8-3). In the figure above, 50.0mV/ means each line represents 50.0mV in the voltage range. The are a total of 8 voltage divisions in the display. Lab Question 7: Find the peak and the trough of the signal waveform. Count the number of voltage divisions from the peak to the trough of the sine wave then calculate the peak-to-peak voltage of the sine wave. Does it agree with the peak-to-peak voltage (Pk-Pk) value in the measurement list? Lab Question 8: Is this peak-to-peak voltage (Pk-Pk) value the same or different from the peak-to-peak voltage amplitude (Vpp) value you set at the function generator earlier? Describe how are they the same or different. Turn off the output of the function generator. Reminder: Press the Channel button then Output Off. Afterward, press the Output Load button (6.7-10) and change the setting to \"High-Z\". If you are using the 33220A, the High-Z setting is in Utility > Output Setting. Then change the amplitude of the Sine wave to 3 Vpp. Reminder: press \u201cParameters\u201d to access the settings. Keep the Offset and Phase at 0. Turn on the output of the function generator. You should now see a 3 V peak-to-peak signal on the oscilloscope. Adjust the voltage division knob (6.3-7) so the sine wave will fit into the screen again. Lab Question 9: What is the voltage divisor value used to achieve this? Then, count the number of voltage divisions or read from the measurement list to find the peak-to-peak voltage of the signal. How does your result compare to the result in the measurements list and to the output setting of the function generator? Read here for an explanation of why there's a difference in output value when using difference output mode. NOTE: Press the CH1 button (6.3-6) and ensure the \u201cCoupling\u201d setting on the oscilloscope at the lower left corner of the display is set as \u201cDC\u201d and the \u201cProbe\u201d setting at the lower right corner is selected as \u201c1X\u201d If not, correct them by pressing and selecting the respective settings and change them with the selector knob (6.3-3). The knob can be turned and pressed. Adjust the settings so that at least three but no more than ten periods are showing on the DSO display and at least four voltage divisions of peak-to-peak voltage. Change the output parameters of the function generator and repeat the scaling process so you are competent with manually scaling an oscilloscope. Lab Question 10: (During-Lab) Demostrate to the lab professor or instructor that you are competent in generating a wave signal from the function generator and manually scaling (non-using auto scale) the display of an oscilloscope to view such signal. Turn off the function generator and disconnect the alligator clips. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate you've completed the lab and written down all your observation. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 6 : Digital Storage Oscilloscope (DSO)"},{"location":"ses250/lab6/#lab-6-digital-storage-oscilloscope-dso","text":"Seneca College SES250 Electromagnatics","title":"Lab 6 : Digital Storage Oscilloscope (DSO)"},{"location":"ses250/lab6/#purpose","text":"To learn how to operate the function generator and digital storage oscilloscope (DSO)","title":"Purpose"},{"location":"ses250/lab6/#objectives","text":"Generate waveform using a function generator Measure waveform using a digital storage oscilloscope (DSO)","title":"Objectives"},{"location":"ses250/lab6/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply and/or the function generator must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab6/#description","text":"","title":"Description"},{"location":"ses250/lab6/#function-generator","text":"A function generator is a piece of electronic test equipment or software used to generate different types of electrical waveforms over a wide range of frequencies. Some of the most common waveforms produced by the function generator are the sine wave, square wave, triangular wave, and sawtooth shapes. These waveforms can be either repetitive or single shots. Figure 6.1 Keysight 33500B Function Generator In the electronics lab, you will be using a Keysight 33500B (or similar) Function Generator. Its manual can be found here: Function Generator Manual Source: Wikipedia: Function Generator","title":"Function Generator"},{"location":"ses250/lab6/#digital-storage-oscilloscope-dso","text":"An oscilloscope, or DSO (for the more modern digital storage oscilloscope), is a type of electronic test instrument that graphically displays varying signal voltages, usually as a calibrated two-dimensional plot of one or more signals as a function of time. The displayed waveform can then be analyzed for properties such as amplitude, frequency, rise time, time interval, distortion, and others. Originally, the calculation of these values required manually measuring the waveform against the scales built into the screen of the instrument. Modern digital instruments may calculate and display these properties directly. Figure 6.2 Keysight 33500B Function Generator In the electronics lab, you will be using a Keysight DSO-X 2002A (or similar) Digital Storage Oscilloscope. Its manual can be found here: DSO Manual Source: Wikipedia: Oscilloscope","title":"Digital Storage Oscilloscope (DSO)"},{"location":"ses250/lab6/#materials","text":"","title":"Materials"},{"location":"ses250/lab6/#preparation","text":"Lab Preparation Question: List 5 waveform that can be generated by the function generator used in this lab. Read through the lab manual and list the button(s) that you need to press to turn the output of the function generator on and off. In your own word, explain the difference between the 50\u03a9 and High-Z output mode of the function generator used in this lab.","title":"Preparation"},{"location":"ses250/lab6/#procedures","text":"Identify the Digital Oscilloscope at your workbench. Disconnect any cable plugged into it so it is as shown below. Figure 6.3 Turn on the oscilloscope with the power button (8.3-1) if it is not already on. Identify the two cables with a BNC connector beside the oscilloscope. Connect the BNC cables to the CH1 (8.3-4) and CH2 connectors of the oscilloscope as shown. Figure 6.4 Press the CH1 On/Off button (6.3-6) so CH1 is on (button lights up green). Press the CH2 On/Off button so CH2 is off (no light showing at the button). The bright lines on the DSO display the waveform of the signal as a function of time. When there is no signal, the waveform is a flat line. If you don't see a flat line, that means your DSO is displaying amplified electronic noise from the environment. Don't worry if you don't see a flat line for this step of the lab. Lab Question 1: How many signal line(s) (6.3-13, bright solid horizontal line) do you see on the display? What is the colour of the line(s)? Press the CH2 On/Off button to turn CH2 on (button lights up green) then press the Auto Scale button (6.3-9) again. Lab Question 2: How many signal line(s) do you see on the display? What is the colour of the line(s)? You can adjust the vertical position of those signal lines for measurement or display purposes. Turn the CH1 vertical position knob (6.3-5) until the CH1 signal line is reasonably lined up vertically centred on the display. Try changing the vertical position of the CH2 signal line as well. Afterward, line up both signal lines vertically centred on the display. One line will be on top of the other line. Modern DSOs are complex test instruments with a lot of functionality. It is a very useful tool once you understand how to use it. The more you use and play with the tool, the more familiar you'll get. Turn off CH2. Identify the Function Generator at your workbench. Disconnect any cable plug into it so it is as shown below. Figure 6.5 Identify the cable with a BNC connector beside the function generator and connect it to the Output of the function generator (6.5-3). Afterward, push the power button (6.5-1) to turn on the function generator. After the function generator is turned on, we'll set up a 1kHz Sine wave, press the Waveforms button (6.5-7) and select Sine waveform mode from button menus (6.5-2). Then press the Parameters button (6.5-8) and use the keypad, digit selector buttons (6.5-5), and the adjustment knob (8.5-6) to set the following: Frequency: 1.000 kHz ( Note: pay attention to the number of 0s in kHz You can adjust the Units as necessary.) Amplitude: 100.0 mVpp (default setting) Offset: 0.000 V (default setting) Phase: 0\u00b0 (default setting) Identify the cable connected to the function generator and the alligator clips at the end of the cable connected to CH1 of the oscilloscope. Connect the two red alligator clips together and connect the two black alligator clips together. WARNING: Ensure the exposed portion of the red alligator clip is NOT touching the exposed portion of the black alligator clip. Figure 6.6 Once the cables are connected and the waveform is set, push the channel button on the function generator (6.7-4) then turn the output to \u201cOn\u201d (6.7-9). Figure 6.7 You should now see some signal on the DSO. If not, push the Auto Scale button on the oscilloscope (8.3-9). You should see a waveform that is similar to that shown in the figure below. Figure 6.8 Turn the time division knob (6.3-12) and the horizontal position knob (6.3-11) a few ticks clockwise then counter-clockwise. Lab Question 3: What effect do the time division knob and the horizontal position knob have on the waveform? The grey-white vertical lines (6.8-2) on the oscilloscope chart are called time division lines and the top right of the display shows the time divisor (6.8-4). In the figure above, the time divisor is set to 200.0\u03bcs/ which means each time division line represents 200.0\u03bcs in the time domain. The are a total of 10 time divisions in the display. Lab Question 4: Find two peaks in the signal waveform then count the number of time divisions in each period of the sine wave. Afterward, calculate the frequency of the sine wave using: f = 1 / T where f is the frequency in [Hz] and T is the period in [s]. Does it agree with the output of the function generator? You can adjust the horizontal position of the sine wave with the horizontal position knob to help with counting if necessary. Change the output of the function generator to a different frequency such as 500Hz and another waveform such as square and triangle then see how it is displayed on the oscilloscope. Afterward, put the function generator back to a sine wave at 1kHz. Press the Measurement (Meas) button (6.3-8) on the oscilloscope. In the measurement menu that shows up, use the menu buttons (6.3-2) and menu selector knob (6.3-3) to clear all measurements with the Clear Meas option. Then, add Frequency (Freq) and peak-to-peak voltage (Pk-Pk) for measurement. Ensure the Source channel is set to 1 at the lower left corner of the menu. The two measurements should now show up in the measurement list on the right-hand side. If a mistake is made, press Clear Meas to remove a measurement. Lab Question 5: Does the frequency measurement agree with your calculation above? Turn the time division knob slowly so the waveform expands and compresses horizontally. Turn it from 10 periods to only a portion of the waveform shown. Lab Question 6: At what time divisor does the measurement starts to become invalid? How many periods of the waveform are shown when it becomes invalid? What comment can you make on how the oscilloscope calculates the freq measurement (in terms of the waveform required to be displayed on the screen)? The grey-white horizontal line (6.8-1) on the oscilloscope display is called a voltage division line and at the top left of the display shows the voltage divisor (6.8-3). In the figure above, 50.0mV/ means each line represents 50.0mV in the voltage range. The are a total of 8 voltage divisions in the display. Lab Question 7: Find the peak and the trough of the signal waveform. Count the number of voltage divisions from the peak to the trough of the sine wave then calculate the peak-to-peak voltage of the sine wave. Does it agree with the peak-to-peak voltage (Pk-Pk) value in the measurement list? Lab Question 8: Is this peak-to-peak voltage (Pk-Pk) value the same or different from the peak-to-peak voltage amplitude (Vpp) value you set at the function generator earlier? Describe how are they the same or different. Turn off the output of the function generator. Reminder: Press the Channel button then Output Off. Afterward, press the Output Load button (6.7-10) and change the setting to \"High-Z\". If you are using the 33220A, the High-Z setting is in Utility > Output Setting. Then change the amplitude of the Sine wave to 3 Vpp. Reminder: press \u201cParameters\u201d to access the settings. Keep the Offset and Phase at 0. Turn on the output of the function generator. You should now see a 3 V peak-to-peak signal on the oscilloscope. Adjust the voltage division knob (6.3-7) so the sine wave will fit into the screen again. Lab Question 9: What is the voltage divisor value used to achieve this? Then, count the number of voltage divisions or read from the measurement list to find the peak-to-peak voltage of the signal. How does your result compare to the result in the measurements list and to the output setting of the function generator? Read here for an explanation of why there's a difference in output value when using difference output mode. NOTE: Press the CH1 button (6.3-6) and ensure the \u201cCoupling\u201d setting on the oscilloscope at the lower left corner of the display is set as \u201cDC\u201d and the \u201cProbe\u201d setting at the lower right corner is selected as \u201c1X\u201d If not, correct them by pressing and selecting the respective settings and change them with the selector knob (6.3-3). The knob can be turned and pressed. Adjust the settings so that at least three but no more than ten periods are showing on the DSO display and at least four voltage divisions of peak-to-peak voltage. Change the output parameters of the function generator and repeat the scaling process so you are competent with manually scaling an oscilloscope. Lab Question 10: (During-Lab) Demostrate to the lab professor or instructor that you are competent in generating a wave signal from the function generator and manually scaling (non-using auto scale) the display of an oscilloscope to view such signal. Turn off the function generator and disconnect the alligator clips. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate you've completed the lab and written down all your observation. You might be asked to explain some of the concepts you've learned in this lab.","title":"Procedures"},{"location":"ses250/lab7/","text":"Lab 7 : Capacitor and RC Circuit Seneca College SES250 Electromagnatics Purposes To understand the relationship between the voltage and capacitance of a capacitor To understand the discharging and charging of a capacitor Objectives Assemble electronic components onto a breadboard Measure the capacitance of a capacitor using a digital multimeter (DMM) Measure the response of an RC circuit using a Digital Storage Oscilloscope (DSO) Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit. Description Capacitor A capacitor is an electronic device for storing electrical energy, consisting of two conductors in close proximity and insulated from each other. A simple example of such a storage device is the parallel-plate capacitor. If positive charges with total charge +Q are deposited on one of the conductors and an equal amount of negative charge \u2212Q is deposited on the second conductor, the capacitor is said to have a charge Q. Source: Britannica: capacitor The capacitance of a parallel plate capacitor can be calculated using: C = {{\\epsilon_0 A} \\over {s}} where \\epsilon_0 is the permittivity in vacuum and have a value of \\epsilon_0 = {8.854 \\times 10^{-12} {Nm^2 \\over C^2}} , A is the area of the plates, and s is the distance between the plates. Similar to resistors, capacitors use special markings to indicate their values. Since the amount of area for markings on a capacitor is limited, there is also a set of rules for specifying the capacitance value of a capacitor. Manufacturers often use two separate lines for their capacitor markings and these have the following meanings: First line: capacitance (in pF or \u03bcF) [and tolerance (J=5%, K=10%, M=20%)] Second line: rated DC voltage [and code for the dielectric material] For a ceramic capacitor, often only a three-digit code is given. The first two digits correspond to the first two digits of the value whilst the third digit is a multiplier which gives the number of zeros to be added to give the value in pF. For example, 104 means 10 x 104 pF = 100nF. Furthermore, some capacitors such as electrolytic capacitors are marked with symbols (\u201c+\u201d and \u201c-\u201d) to indicate the correct polarity. Failure to observe these markings when connecting a capacitor to a circuit can be catastrophic! Figure 7.1 Various Capacitor Markings Figure 7.2 Non-polarized vs Polarized Capacitor Figure 7.3 Polarized Capacitor Leads Source: Capacitor Markings Source: What Is Non-polarized Capacitor RC Circuit A resistor-capacitor circuit (RC circuit), RC filter or RC network, is an electric circuit composed of resistors and capacitors. It may be driven by a voltage or current source and these will produce different responses. A first-order RC circuit is composed of one resistor and one capacitor and is the simplest type of RC circuit. Figure 7.4 Series RC circuit A series RC circuit with a capacitor that is initially charged to V_0 = {Q_0 \\over C} and then allowed to discharge through a resistor R will exhibit the following relationship for the voltage across the capacitor over some time: V_C(t) = V_0 e^{(-{t \\over {RC}})} where V_0 is the capacitor voltage at t = 0 The time required for the voltage to fall to V_0 e^{-1} or about 37% (roughly 1/3 of V_0 ) is called the RC time constant and is given by: \\tau = RC where \\tau is measured in seconds, R in ohms and C in farads. The chart below shows a typical curve of the voltage across the capacitor during discharge in an RC circuit. Figure 7.5 Voltage curve of a capacitor during discharge in an RC circuit Source: Wikipedia: RC Circuit Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 1k\u03a9 Resistor (brown-black-red) (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 100nF Ceramic Capacitor (usually orange with 104 marking) (1x) 10\u03bcF Electrolytic Capacitor (usually blue or black with 10\u03bcF marking) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy observation tables 1, 2 and 3 of this lab into your notebook. Sketch a breadboard diagram of Figure 7.7 onto your notebook. Calculate the theoretical RC time constant (\u03c4) for each combination of R-C in Table 2. Calculate the voltage at \u03c4 if the initial voltage of an R-C circuit is 1V. Show all calculations. Derive the formula for the current through the resistor in an RC circuit. Procedures Part 1: Measuring Capacitance In this part of the lab, we will be exploring the capacitance of a capacitor. Turn on a DMM and set it to capacitance mode by pressing the SHIFT (1) + Freq (2) button (to access the -||- mode). Ensure the alligator clips are connected to the terminals labelled \u201cHI\u201d under \u201cInput V\u03a9\u25ba|\u201d (3) and \u201cLO\u201d under \u201cInput V\u03a9\u25ba|\u201d (4). Figure 7.6 Lab Question 1: Without connecting the cable to anything, record the capacitance with the alligator clip not connected to anything. This is the capacitance due to just the cable (open circuit capacitance). Table 1 Capacitor # Cable Capacitance (\u03bcF) Marked C (\u03bcF) Measured C with Cable (\u03bcF) Measured C (\u03bcF) 1 2 Acquire a 100nF Capacitor (usually small and orange with marking 104 for 10 x 10^4 pF) then connect the two leads of the capacitor to the DMM. Lab Question 2: Record the capacitance. Remember, this is the capacitance with the cable. Lab Question 3: Subtract the cable capacitance from the value to get the capacitor capacitance. Record this into the table 1. Acquire a 10\u03bcF Capacitor (usually round cylindrical with marking 10\u03bcF) then connect the two leads of the capacitor to the DMM per the polarity of the capacitor. The red clip is connected to the (+) lead and the black clip is connected to the (-) lead. INCORRECT CONNECTION AGAINST THE POLARIZATION OF THE CAPACITOR CAN BE CATASTROPHIC! Lab Question 4: Record the capacitance by repeating step 2 with the 10\u03bcF Capacitor. Disconnect the DMM and the capacitor. Part 2: RC Circuit In this part of the lab, we will be exploring the transient response (discharging and charging) of an RC circuit. A function generator set to square wave output will act as the closing and opening of the circuit. Figure 7.7 Obtain a 1k\u03a9 resistor, 10k\u03a9 resistors, a breadboard, and a few jumper wires. You should also have the capacitor you worked with earlier. Lab Question 5: Measure the resistance value of your resistor and record it in Table 2. Refer to Lab 2 if you don't remember how to measure resistance. Table 2 Resistor Capacitor Measured R (k\u03a9) Measured C (\u03bcF) RC Constant (\u03c4) (ms) 1k\u03a9 10\u03bcF 1k\u03a9 100nF 10k\u03a9 100nF Lab Question 6: Calculate the RC time constant \u03c4 = RC for each of the configuration above. Set up your circuit as per Figure 7.7 using a 1k\u03a9 resistor and a 10\u03bcF capacitor on a breadboard with CH1 of the DSO measuring the voltage across the capacitor. The transient current through can only be estimated using the voltage across the capacitor in this configuration. INCORRECT CONNECTION AGAINST THE POLARIZATION OF THE CAPACITOR CAN BE CATASTROPHIC! Turn on the function generator and set the output to a 1Vpp square wave at 10Hz with a 1V DC Offset at High-Z ouptut mode . Leave all other settings as default. Refer to Lab 6 if you don't remember how to use a function generator. Ensure the function generator is set to 1V DC offset Turn on the DSO and adjust the settings so you'll see a single period of the RC waveform similar to Figure 7.5. Remember, the function generator is simulating the closing and opening of the circuit at 10Hz. Refer to Lab 6 if you don't remember how to use a function generator. Lab Question 7: Using the grid line or the measurement tool, find the time it takes for the voltage to drop 67% from the maximum and record it as the measured RC time constant. Table 3 Resistor Capacitor Calculated \u03c4 (ms) Measured \u03c4 (ms) % Error 1k\u03a9 10\u03bcF 1k\u03a9 100nF 10k\u03a9 100nF Lab Question 8: Calculate the percentage error of the estimated and measured RC time constant. Repeat step 2 with the various values of resistors and capacitors. Lab Question 9: What do you observe regarding the RC time constant as the resistor and the capacitor value increase and decrease? Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 7 : Capacitor and RC Circuit"},{"location":"ses250/lab7/#lab-7-capacitor-and-rc-circuit","text":"Seneca College SES250 Electromagnatics","title":"Lab 7 : Capacitor and RC Circuit"},{"location":"ses250/lab7/#purposes","text":"To understand the relationship between the voltage and capacitance of a capacitor To understand the discharging and charging of a capacitor","title":"Purposes"},{"location":"ses250/lab7/#objectives","text":"Assemble electronic components onto a breadboard Measure the capacitance of a capacitor using a digital multimeter (DMM) Measure the response of an RC circuit using a Digital Storage Oscilloscope (DSO)","title":"Objectives"},{"location":"ses250/lab7/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab7/#description","text":"","title":"Description"},{"location":"ses250/lab7/#capacitor","text":"A capacitor is an electronic device for storing electrical energy, consisting of two conductors in close proximity and insulated from each other. A simple example of such a storage device is the parallel-plate capacitor. If positive charges with total charge +Q are deposited on one of the conductors and an equal amount of negative charge \u2212Q is deposited on the second conductor, the capacitor is said to have a charge Q. Source: Britannica: capacitor The capacitance of a parallel plate capacitor can be calculated using: C = {{\\epsilon_0 A} \\over {s}} where \\epsilon_0 is the permittivity in vacuum and have a value of \\epsilon_0 = {8.854 \\times 10^{-12} {Nm^2 \\over C^2}} , A is the area of the plates, and s is the distance between the plates. Similar to resistors, capacitors use special markings to indicate their values. Since the amount of area for markings on a capacitor is limited, there is also a set of rules for specifying the capacitance value of a capacitor. Manufacturers often use two separate lines for their capacitor markings and these have the following meanings: First line: capacitance (in pF or \u03bcF) [and tolerance (J=5%, K=10%, M=20%)] Second line: rated DC voltage [and code for the dielectric material] For a ceramic capacitor, often only a three-digit code is given. The first two digits correspond to the first two digits of the value whilst the third digit is a multiplier which gives the number of zeros to be added to give the value in pF. For example, 104 means 10 x 104 pF = 100nF. Furthermore, some capacitors such as electrolytic capacitors are marked with symbols (\u201c+\u201d and \u201c-\u201d) to indicate the correct polarity. Failure to observe these markings when connecting a capacitor to a circuit can be catastrophic! Figure 7.1 Various Capacitor Markings Figure 7.2 Non-polarized vs Polarized Capacitor Figure 7.3 Polarized Capacitor Leads Source: Capacitor Markings Source: What Is Non-polarized Capacitor","title":"Capacitor"},{"location":"ses250/lab7/#rc-circuit","text":"A resistor-capacitor circuit (RC circuit), RC filter or RC network, is an electric circuit composed of resistors and capacitors. It may be driven by a voltage or current source and these will produce different responses. A first-order RC circuit is composed of one resistor and one capacitor and is the simplest type of RC circuit. Figure 7.4 Series RC circuit A series RC circuit with a capacitor that is initially charged to V_0 = {Q_0 \\over C} and then allowed to discharge through a resistor R will exhibit the following relationship for the voltage across the capacitor over some time: V_C(t) = V_0 e^{(-{t \\over {RC}})} where V_0 is the capacitor voltage at t = 0 The time required for the voltage to fall to V_0 e^{-1} or about 37% (roughly 1/3 of V_0 ) is called the RC time constant and is given by: \\tau = RC where \\tau is measured in seconds, R in ohms and C in farads. The chart below shows a typical curve of the voltage across the capacitor during discharge in an RC circuit. Figure 7.5 Voltage curve of a capacitor during discharge in an RC circuit Source: Wikipedia: RC Circuit","title":"RC Circuit"},{"location":"ses250/lab7/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 1k\u03a9 Resistor (brown-black-red) (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 100nF Ceramic Capacitor (usually orange with 104 marking) (1x) 10\u03bcF Electrolytic Capacitor (usually blue or black with 10\u03bcF marking)","title":"Materials"},{"location":"ses250/lab7/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy observation tables 1, 2 and 3 of this lab into your notebook. Sketch a breadboard diagram of Figure 7.7 onto your notebook. Calculate the theoretical RC time constant (\u03c4) for each combination of R-C in Table 2. Calculate the voltage at \u03c4 if the initial voltage of an R-C circuit is 1V. Show all calculations. Derive the formula for the current through the resistor in an RC circuit.","title":"Preparation"},{"location":"ses250/lab7/#procedures","text":"","title":"Procedures"},{"location":"ses250/lab7/#part-1-measuring-capacitance","text":"In this part of the lab, we will be exploring the capacitance of a capacitor. Turn on a DMM and set it to capacitance mode by pressing the SHIFT (1) + Freq (2) button (to access the -||- mode). Ensure the alligator clips are connected to the terminals labelled \u201cHI\u201d under \u201cInput V\u03a9\u25ba|\u201d (3) and \u201cLO\u201d under \u201cInput V\u03a9\u25ba|\u201d (4). Figure 7.6 Lab Question 1: Without connecting the cable to anything, record the capacitance with the alligator clip not connected to anything. This is the capacitance due to just the cable (open circuit capacitance). Table 1 Capacitor # Cable Capacitance (\u03bcF) Marked C (\u03bcF) Measured C with Cable (\u03bcF) Measured C (\u03bcF) 1 2 Acquire a 100nF Capacitor (usually small and orange with marking 104 for 10 x 10^4 pF) then connect the two leads of the capacitor to the DMM. Lab Question 2: Record the capacitance. Remember, this is the capacitance with the cable. Lab Question 3: Subtract the cable capacitance from the value to get the capacitor capacitance. Record this into the table 1. Acquire a 10\u03bcF Capacitor (usually round cylindrical with marking 10\u03bcF) then connect the two leads of the capacitor to the DMM per the polarity of the capacitor. The red clip is connected to the (+) lead and the black clip is connected to the (-) lead. INCORRECT CONNECTION AGAINST THE POLARIZATION OF THE CAPACITOR CAN BE CATASTROPHIC! Lab Question 4: Record the capacitance by repeating step 2 with the 10\u03bcF Capacitor. Disconnect the DMM and the capacitor.","title":"Part 1: Measuring Capacitance"},{"location":"ses250/lab7/#part-2-rc-circuit","text":"In this part of the lab, we will be exploring the transient response (discharging and charging) of an RC circuit. A function generator set to square wave output will act as the closing and opening of the circuit. Figure 7.7 Obtain a 1k\u03a9 resistor, 10k\u03a9 resistors, a breadboard, and a few jumper wires. You should also have the capacitor you worked with earlier. Lab Question 5: Measure the resistance value of your resistor and record it in Table 2. Refer to Lab 2 if you don't remember how to measure resistance. Table 2 Resistor Capacitor Measured R (k\u03a9) Measured C (\u03bcF) RC Constant (\u03c4) (ms) 1k\u03a9 10\u03bcF 1k\u03a9 100nF 10k\u03a9 100nF Lab Question 6: Calculate the RC time constant \u03c4 = RC for each of the configuration above. Set up your circuit as per Figure 7.7 using a 1k\u03a9 resistor and a 10\u03bcF capacitor on a breadboard with CH1 of the DSO measuring the voltage across the capacitor. The transient current through can only be estimated using the voltage across the capacitor in this configuration. INCORRECT CONNECTION AGAINST THE POLARIZATION OF THE CAPACITOR CAN BE CATASTROPHIC! Turn on the function generator and set the output to a 1Vpp square wave at 10Hz with a 1V DC Offset at High-Z ouptut mode . Leave all other settings as default. Refer to Lab 6 if you don't remember how to use a function generator. Ensure the function generator is set to 1V DC offset Turn on the DSO and adjust the settings so you'll see a single period of the RC waveform similar to Figure 7.5. Remember, the function generator is simulating the closing and opening of the circuit at 10Hz. Refer to Lab 6 if you don't remember how to use a function generator. Lab Question 7: Using the grid line or the measurement tool, find the time it takes for the voltage to drop 67% from the maximum and record it as the measured RC time constant. Table 3 Resistor Capacitor Calculated \u03c4 (ms) Measured \u03c4 (ms) % Error 1k\u03a9 10\u03bcF 1k\u03a9 100nF 10k\u03a9 100nF Lab Question 8: Calculate the percentage error of the estimated and measured RC time constant. Repeat step 2 with the various values of resistors and capacitors. Lab Question 9: What do you observe regarding the RC time constant as the resistor and the capacitor value increase and decrease? Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Part 2: RC Circuit"},{"location":"ses250/lab8/","text":"Lab 8 : RL Circuit and Filters Seneca College SES250 Electromagnatics Purposes To understand the relationship between the voltage and inductance of an inductor To understand the de-energize and energize of an inductor Objectives Assemble electronic components onto a breadboard Measure the response of an RL circuit using a Digital Storage Oscilloscope (DSO) Estimate the inductance of an inductor using its RL transient response Important Rules for this Lab Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit. Description Inductor An inductor, also called a coil, choke, or reactor, is a passive two-terminal electrical component that stores energy in a magnetic field when electric current flows through it. An inductor typically consists of an insulated wire wound into a coil. When the current flowing through the coil changes, the time-varying magnetic field induces an electromotive force (emf) (voltage) in the conductor, described by Faraday's law of induction. According to Lenz's law, the induced voltage has a polarity (direction) which opposes the change in current that created it. As a result, inductors oppose any changes in current through them. Figure 8.1 Inductors Source: Wikipedia: Inductor The inductance of a coil-type inductor can be calculated using: L = {{\\mu_0 \\pi N^2 R^2} \\over {l}} where: \\mu_0 is the permeability in vacuum and have a value of \\mu_0 = {4 \\pi \\times 10^{-7} {H \\over m}} N is the number of loops in the coil R is the radius of the coil l is the length of the coil (not the length of the wire) Similar to capacitors, the vast majority of inductors use written markings to indicate values, working current, and tolerance. The most usual method of marking ferrite-cored inductors involves quoting the value (in mH or \u03bcH), the tolerance (often either 5% or 10%), and the maximum working current (where appropriate). The marking scheme follows a similar convention to that used with small capacitors: First line: Inductance (in mH or \u03bcH) and tolerance (J=5%, K=10%, M=20%). Second line: rated d.c. current (where specified). A three-digit code is often used to mark small inductors. The first two digits correspond to the first two digits of the value whilst the third digit is a multiplier which gives the number of zeros to be added to give the value in \u03bcH. Figure 8.2 Various Inductor Markings Source: Inductor Markings RL Circuit A resistor\u2013inductor circuit (RL circuit), RL filter or RL network, is an electric circuit composed of resistors and inductors driven by a voltage or current source. A first-order RL circuit is composed of one resistor and one inductor, either in series driven by a voltage source or in parallel driven by a current source. It is one of the simplest analogue infinite impulse response electronic filters. Figure 8.3 Series RL circuit A series RL circuit with an inductor that is initially energized to I_0 = {V_in \\over R} and then allowed to de-energized through a resistor R will exhibit the following relationship for the current through the inductor over some time: I_L(t) = I_0 e^{(-{R \\over L} t)} where I_0 is the inductor current at t = 0 The time required for the current to fall to I_0 e^{-1} or about 37% (roughly 1/3 of I_0 ) is called the RL time constant and is given by: \\tau = {L \\over R} where \\tau is measured in seconds, R in ohms and L in henry. Since the current through an inductor is often difficult to measure directly, voltage measurements are often used to study the transient response of an RL circuit by using the following relationship: V_in(t) = V_L(t) + V_R(t) where: V_L(t) = V_0 e^{(-{R \\over L} t)} V_R(t) = V_0 ( 1 - e^{(-{R \\over L} t)} ) The chart below shows a typical curve of the voltage across the inductor and resistor during energizing in an RL circuit. Figure 8.4 Voltage curve of an inductor during energizing in an RL circuit Figure 8.5 Voltage curve of a resistor during energizing in an RL circuit Source: Wikipedia: RL Circuit Low-pass Filters A low-pass filter is a circuit offering easy passage to low-frequency signals and difficult passage to high-frequency signals. There are two basic kinds of circuits capable of accomplishing this objective, and many variations of each one: The inductive low-pass filter in (Figure 8.6 Left) and the capacitive low-pass filter in (Figure 8.6 Right). Figure 8.6 (Left) Inductive Low-Pass Filter, (Right) Capacitive Low-Pass Filter In an inductive low-pass filter, the inductor\u2019s impedance increases with increasing frequency. This high impedance in series tends to block high-frequency signals from getting to the load. In a capacitive low-pass filter, the capacitor\u2019s impedance decreases with increasing frequency. This low impedance tends to short out high-frequency signals, dropping most of the voltage across series resistor R. All low-pass filters are rated at a certain cutoff frequency. That is the frequency above which the output voltage falls below 70.7% of the input voltage. The cutoff frequency [Hz] for an inductive low-pass filter is: f_c = {R \\over {2 \\pi L}} The cutoff frequency [Hz] for a capacitive low-pass filter is: f_c = {1 \\over {2 \\pi R C}} Source: All About Circuits: Low-pass Filters Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 100\u03a9 Resistor (brown-black-brown) (1x) 330\u03a9 Resistor (orange-orange-brown) (1x) 1k\u03a9 Resistor (brown-black-red) (1x) 4.7k\u03a9 resistor (yellow-violet-red) (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 47\u03bcH to 1000\u03bcH toroidal inductor (supplied by the instructor) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy observation tables 1, and 2 of this lab into your notebook. Sketch a breadboard diagram of Figure 8.7 onto your notebook. Derive a formula to find the inductance of an inductor from the RL response formula. If we need to reduce a 500kHz noise by at least 70.7% with an RL low-pass filter. Which resistor from our lab material should we if you are given a 50\u03bcH inductor? Procedures Part 1: RL Circuit In this part of the lab, we will be exploring the transient response (de-energizing and energizing) of an RL circuit. A function generator set to square wave output will act as the closing and opening of the circuit. Figure 8.7 Obtain a toroidal inductor that is between 47\u03bcH to 1000\u03bcH. The inductance of an inductor cannot be easily measured using the DMM we have in the lab. As a result, in addition to observing the RL response, you'll also be estimating the inductance of the inductor. Depending on the inductor, select a resistor value that will give you an RL time constant, \\tau = {L \\over R} , of about and smaller than 0.01ms. You'll also need a breadboard and a few jumper wires. Lab Question 1: Measure the resistance value of your resistor and record it in Table 1. Refer to Lab 2 if you don't remember how to measure resistance. Table 1 Value Measured Resistance (R) [\u03a9] Marked Inductance (L) [H] Theoretical RL Constant ( \\tau = {L \\over R} ) [ms] Measured \u03c4 [ms] Estimated Inductance [H] % Error Inductance Lab Question 2: Calculate the theoretical RL time constant using the measured resistance value and the marked inductance value. Set up your circuit as per Figure 8.7 with CH1 of the DSO measuring the voltage across the inductor. If the inductor doesn't go into the breadboard, use jumper wires and alligaor clips from the DSO to help with the connection. The transient current through the inductor can only be estimated using the voltage across. Turn on the function generator and set the output to a 1Vpp square wave at 10kHz with a 1V DC Offset at High-Z output mode . Leave all other settings as default. Refer to Lab 6 if you don't remember how to use a function generator. Turn on the DSO and adjust the settings so you'll see a single period of the RL waveform similar to Figure 8.4. Remember, the function generator is simulating the closing and opening of the circuit at 10kHz. You should see something similar to Figure 8.8 below if you setup your circuit properly. If not, verify your connection. Refer to Lab 6 if you don't remember how to use a function generator. Figure 8.8 Series RL Circuit Voltage Curve (Red) Sourse (Black) Inductor Voltage Lab Question 3: Using the grid line or the measurement tool, find the time it takes for the voltage to drop 67% from the maximum and record it as the measured RL time constant. Lab Question 4: Estimate the inductance of the inductor using the equation you derived during the pre-lab. What is the # error between your estimated inductance and the marked inductance by the manufacturer? Part 2: RL Low-pass Filters In this part of the lab, we'll explore a simple filter circuit using a resistor and an inductor called an inductive low-pass filter. You'll be exploring another simple filter circuit called the capacitive low-pass filter as part of the course project. A triangular (saw) wave from a signal generator will be used to simulate noise. Figure 8.9 Using the toroidal inductor from Part 1, calculate the cutoff frequency for an inductive low-pass filter for the various resistor values in Table 2. Lab Question 5: Calculate the cutoff frequency for an inductive low-pass filter for various resistor values and record it in Table 2. Table 2 Resistor Value Cutoff Frequency 100\u03a9 330\u03a9 1k\u03a9 4.7k\u03a9 10k\u03a9 Set up your circuit as per Figure 8.8 with CH1 of the DSO measuring the voltage between the inductor and the resistor (the output of the RL low-pass filter) and CH2 connected to the output of the function generator (raw signal). Start from the largest resistor. Turn on the function generator and set the output to a 1Vpp triangular (saw) wave or noise at 1MHz with a 1V DC Offset at High-Z output mode . Leave all other settings as default. Refer to Lab 6 if you don't remember how to use a function generator. This will simulate a signal at 1V with noise at 1MHz. Turn on the output of the function generator and observe the difference between the raw signal (1VDC signal plus 1MHz noise) and the filtered signal. You should see something (but not exactly) in Figure 8.10 with the centre at 1V instead of 0V. Figure 8.10 (Blue Line) Raw signal, (Orange Line) Filtered signal Take a photo or make a sketch of your observation then repeat for all the resistor values. Lab Question 6: At which resistor value do you start to see significant improvement in filtering out (smoothing off) the 1MHz noise? What is the cutoff frequency? Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 8 : RL Circuit and Filters"},{"location":"ses250/lab8/#lab-8-rl-circuit-and-filters","text":"Seneca College SES250 Electromagnatics","title":"Lab 8 : RL Circuit and Filters"},{"location":"ses250/lab8/#purposes","text":"To understand the relationship between the voltage and inductance of an inductor To understand the de-energize and energize of an inductor","title":"Purposes"},{"location":"ses250/lab8/#objectives","text":"Assemble electronic components onto a breadboard Measure the response of an RL circuit using a Digital Storage Oscilloscope (DSO) Estimate the inductance of an inductor using its RL transient response","title":"Objectives"},{"location":"ses250/lab8/#important-rules-for-this-lab","text":"Any signal (voltage, current) must be adjusted to the specified value (amplitude and/or frequency) before applying them to a circuit. An instrument must be set up for the required mode of operation before it is connected to a circuit. The power supply must be switched off before making any changes to the circuit.","title":"Important Rules for this Lab"},{"location":"ses250/lab8/#description","text":"","title":"Description"},{"location":"ses250/lab8/#inductor","text":"An inductor, also called a coil, choke, or reactor, is a passive two-terminal electrical component that stores energy in a magnetic field when electric current flows through it. An inductor typically consists of an insulated wire wound into a coil. When the current flowing through the coil changes, the time-varying magnetic field induces an electromotive force (emf) (voltage) in the conductor, described by Faraday's law of induction. According to Lenz's law, the induced voltage has a polarity (direction) which opposes the change in current that created it. As a result, inductors oppose any changes in current through them. Figure 8.1 Inductors Source: Wikipedia: Inductor The inductance of a coil-type inductor can be calculated using: L = {{\\mu_0 \\pi N^2 R^2} \\over {l}} where: \\mu_0 is the permeability in vacuum and have a value of \\mu_0 = {4 \\pi \\times 10^{-7} {H \\over m}} N is the number of loops in the coil R is the radius of the coil l is the length of the coil (not the length of the wire) Similar to capacitors, the vast majority of inductors use written markings to indicate values, working current, and tolerance. The most usual method of marking ferrite-cored inductors involves quoting the value (in mH or \u03bcH), the tolerance (often either 5% or 10%), and the maximum working current (where appropriate). The marking scheme follows a similar convention to that used with small capacitors: First line: Inductance (in mH or \u03bcH) and tolerance (J=5%, K=10%, M=20%). Second line: rated d.c. current (where specified). A three-digit code is often used to mark small inductors. The first two digits correspond to the first two digits of the value whilst the third digit is a multiplier which gives the number of zeros to be added to give the value in \u03bcH. Figure 8.2 Various Inductor Markings Source: Inductor Markings","title":"Inductor"},{"location":"ses250/lab8/#rl-circuit","text":"A resistor\u2013inductor circuit (RL circuit), RL filter or RL network, is an electric circuit composed of resistors and inductors driven by a voltage or current source. A first-order RL circuit is composed of one resistor and one inductor, either in series driven by a voltage source or in parallel driven by a current source. It is one of the simplest analogue infinite impulse response electronic filters. Figure 8.3 Series RL circuit A series RL circuit with an inductor that is initially energized to I_0 = {V_in \\over R} and then allowed to de-energized through a resistor R will exhibit the following relationship for the current through the inductor over some time: I_L(t) = I_0 e^{(-{R \\over L} t)} where I_0 is the inductor current at t = 0 The time required for the current to fall to I_0 e^{-1} or about 37% (roughly 1/3 of I_0 ) is called the RL time constant and is given by: \\tau = {L \\over R} where \\tau is measured in seconds, R in ohms and L in henry. Since the current through an inductor is often difficult to measure directly, voltage measurements are often used to study the transient response of an RL circuit by using the following relationship: V_in(t) = V_L(t) + V_R(t) where: V_L(t) = V_0 e^{(-{R \\over L} t)} V_R(t) = V_0 ( 1 - e^{(-{R \\over L} t)} ) The chart below shows a typical curve of the voltage across the inductor and resistor during energizing in an RL circuit. Figure 8.4 Voltage curve of an inductor during energizing in an RL circuit Figure 8.5 Voltage curve of a resistor during energizing in an RL circuit Source: Wikipedia: RL Circuit","title":"RL Circuit"},{"location":"ses250/lab8/#low-pass-filters","text":"A low-pass filter is a circuit offering easy passage to low-frequency signals and difficult passage to high-frequency signals. There are two basic kinds of circuits capable of accomplishing this objective, and many variations of each one: The inductive low-pass filter in (Figure 8.6 Left) and the capacitive low-pass filter in (Figure 8.6 Right). Figure 8.6 (Left) Inductive Low-Pass Filter, (Right) Capacitive Low-Pass Filter In an inductive low-pass filter, the inductor\u2019s impedance increases with increasing frequency. This high impedance in series tends to block high-frequency signals from getting to the load. In a capacitive low-pass filter, the capacitor\u2019s impedance decreases with increasing frequency. This low impedance tends to short out high-frequency signals, dropping most of the voltage across series resistor R. All low-pass filters are rated at a certain cutoff frequency. That is the frequency above which the output voltage falls below 70.7% of the input voltage. The cutoff frequency [Hz] for an inductive low-pass filter is: f_c = {R \\over {2 \\pi L}} The cutoff frequency [Hz] for a capacitive low-pass filter is: f_c = {1 \\over {2 \\pi R C}} Source: All About Circuits: Low-pass Filters","title":"Low-pass Filters"},{"location":"ses250/lab8/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 100\u03a9 Resistor (brown-black-brown) (1x) 330\u03a9 Resistor (orange-orange-brown) (1x) 1k\u03a9 Resistor (brown-black-red) (1x) 4.7k\u03a9 resistor (yellow-violet-red) (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 47\u03bcH to 1000\u03bcH toroidal inductor (supplied by the instructor)","title":"Materials"},{"location":"ses250/lab8/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy observation tables 1, and 2 of this lab into your notebook. Sketch a breadboard diagram of Figure 8.7 onto your notebook. Derive a formula to find the inductance of an inductor from the RL response formula. If we need to reduce a 500kHz noise by at least 70.7% with an RL low-pass filter. Which resistor from our lab material should we if you are given a 50\u03bcH inductor?","title":"Preparation"},{"location":"ses250/lab8/#procedures","text":"","title":"Procedures"},{"location":"ses250/lab8/#part-1-rl-circuit","text":"In this part of the lab, we will be exploring the transient response (de-energizing and energizing) of an RL circuit. A function generator set to square wave output will act as the closing and opening of the circuit. Figure 8.7 Obtain a toroidal inductor that is between 47\u03bcH to 1000\u03bcH. The inductance of an inductor cannot be easily measured using the DMM we have in the lab. As a result, in addition to observing the RL response, you'll also be estimating the inductance of the inductor. Depending on the inductor, select a resistor value that will give you an RL time constant, \\tau = {L \\over R} , of about and smaller than 0.01ms. You'll also need a breadboard and a few jumper wires. Lab Question 1: Measure the resistance value of your resistor and record it in Table 1. Refer to Lab 2 if you don't remember how to measure resistance. Table 1 Value Measured Resistance (R) [\u03a9] Marked Inductance (L) [H] Theoretical RL Constant ( \\tau = {L \\over R} ) [ms] Measured \u03c4 [ms] Estimated Inductance [H] % Error Inductance Lab Question 2: Calculate the theoretical RL time constant using the measured resistance value and the marked inductance value. Set up your circuit as per Figure 8.7 with CH1 of the DSO measuring the voltage across the inductor. If the inductor doesn't go into the breadboard, use jumper wires and alligaor clips from the DSO to help with the connection. The transient current through the inductor can only be estimated using the voltage across. Turn on the function generator and set the output to a 1Vpp square wave at 10kHz with a 1V DC Offset at High-Z output mode . Leave all other settings as default. Refer to Lab 6 if you don't remember how to use a function generator. Turn on the DSO and adjust the settings so you'll see a single period of the RL waveform similar to Figure 8.4. Remember, the function generator is simulating the closing and opening of the circuit at 10kHz. You should see something similar to Figure 8.8 below if you setup your circuit properly. If not, verify your connection. Refer to Lab 6 if you don't remember how to use a function generator. Figure 8.8 Series RL Circuit Voltage Curve (Red) Sourse (Black) Inductor Voltage Lab Question 3: Using the grid line or the measurement tool, find the time it takes for the voltage to drop 67% from the maximum and record it as the measured RL time constant. Lab Question 4: Estimate the inductance of the inductor using the equation you derived during the pre-lab. What is the # error between your estimated inductance and the marked inductance by the manufacturer?","title":"Part 1: RL Circuit"},{"location":"ses250/lab8/#part-2-rl-low-pass-filters","text":"In this part of the lab, we'll explore a simple filter circuit using a resistor and an inductor called an inductive low-pass filter. You'll be exploring another simple filter circuit called the capacitive low-pass filter as part of the course project. A triangular (saw) wave from a signal generator will be used to simulate noise. Figure 8.9 Using the toroidal inductor from Part 1, calculate the cutoff frequency for an inductive low-pass filter for the various resistor values in Table 2. Lab Question 5: Calculate the cutoff frequency for an inductive low-pass filter for various resistor values and record it in Table 2. Table 2 Resistor Value Cutoff Frequency 100\u03a9 330\u03a9 1k\u03a9 4.7k\u03a9 10k\u03a9 Set up your circuit as per Figure 8.8 with CH1 of the DSO measuring the voltage between the inductor and the resistor (the output of the RL low-pass filter) and CH2 connected to the output of the function generator (raw signal). Start from the largest resistor. Turn on the function generator and set the output to a 1Vpp triangular (saw) wave or noise at 1MHz with a 1V DC Offset at High-Z output mode . Leave all other settings as default. Refer to Lab 6 if you don't remember how to use a function generator. This will simulate a signal at 1V with noise at 1MHz. Turn on the output of the function generator and observe the difference between the raw signal (1VDC signal plus 1MHz noise) and the filtered signal. You should see something (but not exactly) in Figure 8.10 with the centre at 1V instead of 0V. Figure 8.10 (Blue Line) Raw signal, (Orange Line) Filtered signal Take a photo or make a sketch of your observation then repeat for all the resistor values. Lab Question 6: At which resistor value do you start to see significant improvement in filtering out (smoothing off) the 1MHz noise? What is the cutoff frequency? Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Part 2: RL Low-pass Filters"},{"location":"ses250/lab9/","text":"Lab 9 : RC and RL Circuit in AC Seneca College SES250 Electromagnatics Purposes To understand the concept of frequency and period of an alternating current To observe the phase shift of an RC and RL circuit in AC Objectives Assemble electronic components onto a breadboard Setup function generator to output AC sine wave Measure the frequency and the period of a periodic signal using a Digital Storage Oscilloscope (DSO) Measure the phase shift of an RC circuit using a DSO Description Alternating Current Alternating current (AC) is an electric current which periodically reverses direction and changes its magnitude continuously with time, in contrast to direct current (DC), which flows only in one direction. The usual waveform of alternating current in most electric power circuits is a sine wave, whose positive half-period corresponds with the positive direction of the current and vice versa (the full period is called a cycle). In certain applications, different waveforms are used, such as triangular waves or square waves. Figure 9.1 Various AC Waveforms. From Left to Right and Top to Bottom: Sine, Square, Sawtooth or Ramp, Triangular Source: Wikipedia: Alternating current Source: Circuit Digest: AC Circuit Theory (Part 2) Root Mean Square (RMS) For alternating electric current, RMS is equal to the value of the constant direct current that would produce the same power dissipation in a resistive load. Electrical engineers often need to know the power, P, dissipated by electrical resistance, R. It is easy to do the calculation when there is a constant current, I, through the resistance. However, if the current is a time-varying function, I(t), this formula must be extended to reflect the fact that the current (and thus the instantaneous power) is varying over time. If the function is periodic (such as household AC power), it is still meaningful to discuss the average power dissipated over time. When measuring AC using a DMM, oftentimes, you are not measuring the maximum amplitude of the current and voltage but 1 \\over \\sqrt{2} of the amplitude. This is the root-mean-square (rms) value of a sine waveform: V_{rms} and I_{rms} . V_{rms} = {V_0 \\over \\sqrt{2}} I_{rms} = {I_0 \\over \\sqrt{2}} Figure 9.2 AC Waveforms showing the difference between V_{rms} , V_{pk} = V_0 , and V_{pp} Source: Circuit Digest: RMS Voltage Note: Keep in mind that V_{rms} calculation uses V_{0} , not V_{pp} . RC Circuit Phase Shift A Capacitive Circuit that consists of R and C in series exhibits a timing difference between the peak amplitude of the current and voltage. This timing difference is called Phase Shift. As the Capacitor opposes a change in Voltage and stores energy from the Power Supply in the form of an Electric Field, the Capacitor Voltage V_{C} lags the Capacitor Current I_{C} by 90\u00b0 and lags the Power Supply Voltage V by a Phase Angle \\Phi . This phase shift between voltage and current can be calculated by: \\Phi = tan^{-1} {\\left({-1} \\over {2 \\pi fRC}\\right)} where f is AC frequency in Hz, R in Ohms and C in Farads. Figure 9.3 V-I Relationship of the Series RC Circuit RL Circuit Phase Shift An Inductive Circuit that consists of R and L in series. As the Inductor opposes a change in Current and stores energy from the Power Supply in the form of a Magnetic Field, the Inductor Voltage V_{L} leads the Inductor Current I_{L} by 90\u00b0 and leads the Power Supply Voltage V by a Phase Angle \\Phi . This phase shift between voltage and current can be calculated by: \\Phi = tan^{-1} {\\left({2 \\pi fL} \\over {R}\\right)} where f is AC frequency in Hz, R in Ohms and L in Henry. Figure 9.4 V-I Relationship of the Series RL Circuit Source: CMM: Phase Shift Reference Series RC Circuit Impedance Calculator Series RL Circuit Impedance Calculator Materials Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 100\u03a9 Resistor (brown-black-brown) (1x) 1k\u03a9 resistor (brown-black-red) (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 100nF Ceramic Capacitor (1x) 47\u03bcH to 1000\u03bcH toroidal inductor (supplied by the instructor) Preparation Lab Preparation Question: Read and summarize the lab as necessary. Copy observation Tables 1, and 2 of this lab into your notebook. Sketch a breadboard diagram of Figure 9.5 and Figure 9.7 onto your notebook. Calculate the V_{rms} for a 3 V_{pp} (Not V_{0} )sine signal. Calculate the phase difference between voltage and current of an RC circuit with 10k\u03a9, 1k\u03a9, and 100\u03a9 resistors, 100nF capacitor, and at 1kHz and 500Hz. Show all calculations. Calculate the phase difference between the voltage and current of an RL circuit with a 10k\u03a9, 1k\u03a9, and 100\u03a9 resistors, the inductor you used in Lab 9, and at 1MHz and 500kHz. Show all calculations. Procedures Part 1 : AC Waveform and RMS Voltage This part of the lab is to re-familiarize with generating a waveform using a function generator and AC measurement using an oscilloscope and a digital multimeter (DMM). Refer to Lab 6 if you don't remember how to use a function generator. Turn on the function generator, the DMM, and the oscilloscope. Ensure the function generator output is off. Set the function generator to High-Z output mode then set it to a 1kHz sine wave with 3Vpp as the amplitude. Leave DC offset and phase shift to zero (0). Connect the output of the function generator to CH1 of the oscilloscope. The red alligator clip of the function generator output should connect to the red alligator clip of the oscilloscope input and the same for the black alligator clip. Connect the DMM to the output of the function generator while keeping the oscilloscope connected. Adjust the DSO so that about two periods are showing on the display. Make note of the TIME/DIV and VOLT/DIV and verify if align with the setting you provided to the function generator. Set up the DMM to measure in AC voltage mode (VAC). Lab Question 1: Does the reading from the DMM agree with the setting from the function generator and the DSO? Lab Question 2: Your DMM should give you a reading that is not 3V, why do you think that is the case? Turn off the output from the function generator. Part 2 : RC Circuit in AC The next part of this lab is to observe the AC response of an RC Circuit and the relationship between the voltage V(t) and the current I(t) using an oscilloscope. Since we cannot measure I(t) directly using an oscilloscope, we'll be measuring the voltage across the resistor V_R(t) since the current and voltage are always in phase at the resistor. Figure 9.5 Set up the circuit in Figure 9.7 using a 10k\u03a9 resistor and a 100nF ceramic capacitor. DO NOT USE A POLARIZED CAPACITOR! Ensure that the function generator\u2019s output is off then set the output of the function generator to High-Z. Set the output waveform to be a sine wave then set the output amplitude to 6 Vpp and the frequency to 1.00 kHz. Leave offset voltage and phase at 0. Turn on the oscilloscope then connect CH1 and CH2 to the circuit per the circuit diagram. NOTE: The ground (black cable) for both CH1 and CH2 is connected to the negative (black) node of the function generator. Turn on the function generator output and observe the relationship between CH1 and CH2. Adjust the voltage and time division to see about two periods on the display. You should see two waveforms ressembling V and V_R in Figure 9.3. From the two signals that you see, find a peak from CH1 (measuring V(t) ) and the closest peak from CH2 (measuring V_R(t) = I(t) ). CH2 ( I(t) ) should be leading CH1 ( V(t) ). Lab Question 5: Which signal is leading? Does it agree with what you expect from a series RC circuit? Lab Question 6: Find the time difference between the two signals. You may use the horizontal position knob to move one of the signals to the centre for easier measurement. Afterward, convert this time difference you found to the phase angle difference by using the formula below. Does it agree with the phase angle difference you calculated in your pre-lab? Write your result in Table 2. \\Phi = 2 \\pi {\\Delta t \\over T} where \\Delta t is the time difference and T is the period. NOTE: I(t) leading means the time difference is a negative time. Also, the time difference might be in ms and the phase angle difference might be in RAD depending on your setting. Table 1: Freq R C Theoretical Phase Shift Time Diff Phase Shift 1 kHz 10 k\u03a9 100 nF 1 kHz 1 k\u03a9 100 nF 500 Hz 1 k\u03a9 100 nF 500 Hz 100 \u03a9 100 nF Figure 9.6 Repeat the measurement with various resistor values and frequencies to complete Table 1 to understand their relationships. Part 3 : RL Circuit in AC The next part of this lab is to observe the AC response of an RL Circuit and the relationship between the voltage V(t) and the current I(t) using an oscilloscope. Since we cannot measure I(t) directly using an oscilloscope, we'll be measuring the voltage across the resistor V_R(t) since the current and voltage are always in phase at the resistor. Figure 9.6 Set up the circuit in Figure 9.6 using a 10k\u03a9 resistor and 47\u03bcH (or the inductor you used in Lab 8). Ensure that the function generator\u2019s output is off then set the output of the function generator to High-Z. Set the output waveform to be a sine wave then set the output amplitude to 6 Vpp and the frequency to 1.00 kHz. Leave offset voltage and phase at 0. Turn on the oscilloscope then connect CH1 and CH2 to the circuit per the circuit diagram. NOTE: The ground (black cable) for both CH1 and CH2 is connected to the negative (black) node of the function generator. Turn on the function generator output and observe the relationship between CH1 and CH2. Adjust the voltage and time division to see about two periods on the display. You should see two waveforms ressembling V and V_R in Figure 9.4. From the two signals that you see, find a peak from CH1 (measuring V(t) ) and the closest peak from CH2 (measuring V_R(t) = I(t) ). CH2 ( I(t) ) should be lagging CH1 ( V(t) ). Lab Question 7: Which signal is leading? Does it agree with what you expect from a series RL circuit? Lab Question 8: Find the time difference between the two signals. You may use the horizontal position knob to move one of the signals to the centre for easier measurement. Afterward, convert this time difference you found to the phase angle difference by using the formula below. Does it agree with the phase angle difference you calculated in your pre-lab? Write your result in Table 2. \\Phi = 2 \\pi {\\Delta t \\over T} NOTE: I(t) lagging means the time difference is a positive time. Also, the time difference might be in ms and the phase angle difference might be in RAD depending on your setting. Table 2: Freq R L Theoretical Phase Shift Time Diff Phase Shift 1 MHz 10 k\u03a9 (From Lab 8) 1 MHz 1 k\u03a9 (From Lab 8) 500 kHz 1 k\u03a9 (From Lab 8) 500 kHz 100 \u03a9 (From Lab 8) Repeat the measurement with various resistor values and frequencies to complete Table 1 to understand their relationships. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Lab 9 : RC and RL Circuit in AC"},{"location":"ses250/lab9/#lab-9-rc-and-rl-circuit-in-ac","text":"Seneca College SES250 Electromagnatics","title":"Lab 9 : RC and RL Circuit in AC"},{"location":"ses250/lab9/#purposes","text":"To understand the concept of frequency and period of an alternating current To observe the phase shift of an RC and RL circuit in AC","title":"Purposes"},{"location":"ses250/lab9/#objectives","text":"Assemble electronic components onto a breadboard Setup function generator to output AC sine wave Measure the frequency and the period of a periodic signal using a Digital Storage Oscilloscope (DSO) Measure the phase shift of an RC circuit using a DSO","title":"Objectives"},{"location":"ses250/lab9/#description","text":"","title":"Description"},{"location":"ses250/lab9/#alternating-current","text":"Alternating current (AC) is an electric current which periodically reverses direction and changes its magnitude continuously with time, in contrast to direct current (DC), which flows only in one direction. The usual waveform of alternating current in most electric power circuits is a sine wave, whose positive half-period corresponds with the positive direction of the current and vice versa (the full period is called a cycle). In certain applications, different waveforms are used, such as triangular waves or square waves. Figure 9.1 Various AC Waveforms. From Left to Right and Top to Bottom: Sine, Square, Sawtooth or Ramp, Triangular Source: Wikipedia: Alternating current Source: Circuit Digest: AC Circuit Theory (Part 2)","title":"Alternating Current"},{"location":"ses250/lab9/#root-mean-square-rms","text":"For alternating electric current, RMS is equal to the value of the constant direct current that would produce the same power dissipation in a resistive load. Electrical engineers often need to know the power, P, dissipated by electrical resistance, R. It is easy to do the calculation when there is a constant current, I, through the resistance. However, if the current is a time-varying function, I(t), this formula must be extended to reflect the fact that the current (and thus the instantaneous power) is varying over time. If the function is periodic (such as household AC power), it is still meaningful to discuss the average power dissipated over time. When measuring AC using a DMM, oftentimes, you are not measuring the maximum amplitude of the current and voltage but 1 \\over \\sqrt{2} of the amplitude. This is the root-mean-square (rms) value of a sine waveform: V_{rms} and I_{rms} . V_{rms} = {V_0 \\over \\sqrt{2}} I_{rms} = {I_0 \\over \\sqrt{2}} Figure 9.2 AC Waveforms showing the difference between V_{rms} , V_{pk} = V_0 , and V_{pp} Source: Circuit Digest: RMS Voltage Note: Keep in mind that V_{rms} calculation uses V_{0} , not V_{pp} .","title":"Root Mean Square (RMS)"},{"location":"ses250/lab9/#rc-circuit-phase-shift","text":"A Capacitive Circuit that consists of R and C in series exhibits a timing difference between the peak amplitude of the current and voltage. This timing difference is called Phase Shift. As the Capacitor opposes a change in Voltage and stores energy from the Power Supply in the form of an Electric Field, the Capacitor Voltage V_{C} lags the Capacitor Current I_{C} by 90\u00b0 and lags the Power Supply Voltage V by a Phase Angle \\Phi . This phase shift between voltage and current can be calculated by: \\Phi = tan^{-1} {\\left({-1} \\over {2 \\pi fRC}\\right)} where f is AC frequency in Hz, R in Ohms and C in Farads. Figure 9.3 V-I Relationship of the Series RC Circuit","title":"RC Circuit Phase Shift"},{"location":"ses250/lab9/#rl-circuit-phase-shift","text":"An Inductive Circuit that consists of R and L in series. As the Inductor opposes a change in Current and stores energy from the Power Supply in the form of a Magnetic Field, the Inductor Voltage V_{L} leads the Inductor Current I_{L} by 90\u00b0 and leads the Power Supply Voltage V by a Phase Angle \\Phi . This phase shift between voltage and current can be calculated by: \\Phi = tan^{-1} {\\left({2 \\pi fL} \\over {R}\\right)} where f is AC frequency in Hz, R in Ohms and L in Henry. Figure 9.4 V-I Relationship of the Series RL Circuit Source: CMM: Phase Shift","title":"RL Circuit Phase Shift"},{"location":"ses250/lab9/#reference","text":"Series RC Circuit Impedance Calculator Series RL Circuit Impedance Calculator","title":"Reference"},{"location":"ses250/lab9/#materials","text":"Safety glasses (PPE) Lab Supplies Breadboard Jumper Wires (1x) 100\u03a9 Resistor (brown-black-brown) (1x) 1k\u03a9 resistor (brown-black-red) (1x) 10k\u03a9 resistor (brown-black-orange) (1x) 100nF Ceramic Capacitor (1x) 47\u03bcH to 1000\u03bcH toroidal inductor (supplied by the instructor)","title":"Materials"},{"location":"ses250/lab9/#preparation","text":"Lab Preparation Question: Read and summarize the lab as necessary. Copy observation Tables 1, and 2 of this lab into your notebook. Sketch a breadboard diagram of Figure 9.5 and Figure 9.7 onto your notebook. Calculate the V_{rms} for a 3 V_{pp} (Not V_{0} )sine signal. Calculate the phase difference between voltage and current of an RC circuit with 10k\u03a9, 1k\u03a9, and 100\u03a9 resistors, 100nF capacitor, and at 1kHz and 500Hz. Show all calculations. Calculate the phase difference between the voltage and current of an RL circuit with a 10k\u03a9, 1k\u03a9, and 100\u03a9 resistors, the inductor you used in Lab 9, and at 1MHz and 500kHz. Show all calculations.","title":"Preparation"},{"location":"ses250/lab9/#procedures","text":"","title":"Procedures"},{"location":"ses250/lab9/#part-1-ac-waveform-and-rms-voltage","text":"This part of the lab is to re-familiarize with generating a waveform using a function generator and AC measurement using an oscilloscope and a digital multimeter (DMM). Refer to Lab 6 if you don't remember how to use a function generator. Turn on the function generator, the DMM, and the oscilloscope. Ensure the function generator output is off. Set the function generator to High-Z output mode then set it to a 1kHz sine wave with 3Vpp as the amplitude. Leave DC offset and phase shift to zero (0). Connect the output of the function generator to CH1 of the oscilloscope. The red alligator clip of the function generator output should connect to the red alligator clip of the oscilloscope input and the same for the black alligator clip. Connect the DMM to the output of the function generator while keeping the oscilloscope connected. Adjust the DSO so that about two periods are showing on the display. Make note of the TIME/DIV and VOLT/DIV and verify if align with the setting you provided to the function generator. Set up the DMM to measure in AC voltage mode (VAC). Lab Question 1: Does the reading from the DMM agree with the setting from the function generator and the DSO? Lab Question 2: Your DMM should give you a reading that is not 3V, why do you think that is the case? Turn off the output from the function generator.","title":"Part 1 : AC Waveform and RMS Voltage"},{"location":"ses250/lab9/#part-2-rc-circuit-in-ac","text":"The next part of this lab is to observe the AC response of an RC Circuit and the relationship between the voltage V(t) and the current I(t) using an oscilloscope. Since we cannot measure I(t) directly using an oscilloscope, we'll be measuring the voltage across the resistor V_R(t) since the current and voltage are always in phase at the resistor. Figure 9.5 Set up the circuit in Figure 9.7 using a 10k\u03a9 resistor and a 100nF ceramic capacitor. DO NOT USE A POLARIZED CAPACITOR! Ensure that the function generator\u2019s output is off then set the output of the function generator to High-Z. Set the output waveform to be a sine wave then set the output amplitude to 6 Vpp and the frequency to 1.00 kHz. Leave offset voltage and phase at 0. Turn on the oscilloscope then connect CH1 and CH2 to the circuit per the circuit diagram. NOTE: The ground (black cable) for both CH1 and CH2 is connected to the negative (black) node of the function generator. Turn on the function generator output and observe the relationship between CH1 and CH2. Adjust the voltage and time division to see about two periods on the display. You should see two waveforms ressembling V and V_R in Figure 9.3. From the two signals that you see, find a peak from CH1 (measuring V(t) ) and the closest peak from CH2 (measuring V_R(t) = I(t) ). CH2 ( I(t) ) should be leading CH1 ( V(t) ). Lab Question 5: Which signal is leading? Does it agree with what you expect from a series RC circuit? Lab Question 6: Find the time difference between the two signals. You may use the horizontal position knob to move one of the signals to the centre for easier measurement. Afterward, convert this time difference you found to the phase angle difference by using the formula below. Does it agree with the phase angle difference you calculated in your pre-lab? Write your result in Table 2. \\Phi = 2 \\pi {\\Delta t \\over T} where \\Delta t is the time difference and T is the period. NOTE: I(t) leading means the time difference is a negative time. Also, the time difference might be in ms and the phase angle difference might be in RAD depending on your setting. Table 1: Freq R C Theoretical Phase Shift Time Diff Phase Shift 1 kHz 10 k\u03a9 100 nF 1 kHz 1 k\u03a9 100 nF 500 Hz 1 k\u03a9 100 nF 500 Hz 100 \u03a9 100 nF Figure 9.6 Repeat the measurement with various resistor values and frequencies to complete Table 1 to understand their relationships.","title":"Part 2 : RC Circuit in AC"},{"location":"ses250/lab9/#part-3-rl-circuit-in-ac","text":"The next part of this lab is to observe the AC response of an RL Circuit and the relationship between the voltage V(t) and the current I(t) using an oscilloscope. Since we cannot measure I(t) directly using an oscilloscope, we'll be measuring the voltage across the resistor V_R(t) since the current and voltage are always in phase at the resistor. Figure 9.6 Set up the circuit in Figure 9.6 using a 10k\u03a9 resistor and 47\u03bcH (or the inductor you used in Lab 8). Ensure that the function generator\u2019s output is off then set the output of the function generator to High-Z. Set the output waveform to be a sine wave then set the output amplitude to 6 Vpp and the frequency to 1.00 kHz. Leave offset voltage and phase at 0. Turn on the oscilloscope then connect CH1 and CH2 to the circuit per the circuit diagram. NOTE: The ground (black cable) for both CH1 and CH2 is connected to the negative (black) node of the function generator. Turn on the function generator output and observe the relationship between CH1 and CH2. Adjust the voltage and time division to see about two periods on the display. You should see two waveforms ressembling V and V_R in Figure 9.4. From the two signals that you see, find a peak from CH1 (measuring V(t) ) and the closest peak from CH2 (measuring V_R(t) = I(t) ). CH2 ( I(t) ) should be lagging CH1 ( V(t) ). Lab Question 7: Which signal is leading? Does it agree with what you expect from a series RL circuit? Lab Question 8: Find the time difference between the two signals. You may use the horizontal position knob to move one of the signals to the centre for easier measurement. Afterward, convert this time difference you found to the phase angle difference by using the formula below. Does it agree with the phase angle difference you calculated in your pre-lab? Write your result in Table 2. \\Phi = 2 \\pi {\\Delta t \\over T} NOTE: I(t) lagging means the time difference is a positive time. Also, the time difference might be in ms and the phase angle difference might be in RAD depending on your setting. Table 2: Freq R L Theoretical Phase Shift Time Diff Phase Shift 1 MHz 10 k\u03a9 (From Lab 8) 1 MHz 1 k\u03a9 (From Lab 8) 500 kHz 1 k\u03a9 (From Lab 8) 500 kHz 100 \u03a9 (From Lab 8) Repeat the measurement with various resistor values and frequencies to complete Table 1 to understand their relationships. Once you've completed all the above steps, ask the lab professor or instructor over and demostrate that you've completed the lab and written down all your observations. You might be asked to explain some of the concepts you've learned in this lab.","title":"Part 3 : RL Circuit in AC"},{"location":"ses250/safety/","text":"Lab Safety Seneca College SES250 Electromagnatics Objectives Review of Laboratory First Aid and Safety Procedures Emergency Contact In case of life threatening emergency: Call 911 for fire, medical, or police Then call campus security: 416-764-0911 for assistance Laboratory First Aid and Safety Procedures Lab Safety Presentation Slides Lab WHMIS Training The following online WHMIS training module are to be completed by each student with the completion certificate submitted on blackboard before the end of Lab 1. Online WHMIS Training Module Access Guide Online WHMIS Training Module Link Lab Agreement The following Lab agreement are to be signed by each student and submitted on blackboard before the end of Lab 1. Lab Agreement","title":"Lab Safety"},{"location":"ses250/safety/#lab-safety","text":"Seneca College SES250 Electromagnatics","title":"Lab Safety"},{"location":"ses250/safety/#objectives","text":"Review of Laboratory First Aid and Safety Procedures","title":"Objectives"},{"location":"ses250/safety/#emergency-contact","text":"In case of life threatening emergency: Call 911 for fire, medical, or police Then call campus security: 416-764-0911 for assistance","title":"Emergency Contact"},{"location":"ses250/safety/#laboratory-first-aid-and-safety-procedures","text":"Lab Safety Presentation Slides","title":"Laboratory First Aid and Safety Procedures"},{"location":"ses250/safety/#lab-whmis-training","text":"The following online WHMIS training module are to be completed by each student with the completion certificate submitted on blackboard before the end of Lab 1. Online WHMIS Training Module Access Guide Online WHMIS Training Module Link","title":"Lab WHMIS Training"},{"location":"ses250/safety/#lab-agreement","text":"The following Lab agreement are to be signed by each student and submitted on blackboard before the end of Lab 1. Lab Agreement","title":"Lab Agreement"},{"location":"ses250/supplies/","text":"Lab Supplies Seneca College SES250 Electromagnatics You are not required to purchase the lab items from the store/supplier suggested here. You may purchase them from anywhere of your choice as long as they meet the lab requirement. Mandatory Items for SE250 Labs Safety Glasses The safety glasses must have side shields and a top shield. ( CCOHS Reference ) Where to Buy: A similar version can be purchased from the Seneca Campus Store: Temp Lite Series Clear Safety Glasses . Bound Lab Notebook Bound Notebook Ring Notebook Where to Buy: A similar version can be purchased from the Seneca Campus Store: Lab Notes 200 Pages . SES250 Lab Kit The following lab components are mandatory for you to brign to the lab for this course. They are common in the field of Electronics / Electrical Engineering are some of them will be used in future classes. Also included on the list are some of the places you can purchase the items. They can also be purchased from other major online retailers but links will not be provided as their product listing is very dynamic. Item Canada Robotix Creatron Sayal (1x) Full-size Breadboard Breadboard Breadboard Breadboard Kit (20x) Jumper Wires Wire Kit Wire Kit Breadboard Kit (5x) 100\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 330\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 1k\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 4.7k\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 10k\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (2x) 100nF 50V 20% Ceramic Capacitor 5 pcs 2 pcs (2x) 10\u03bcF 50V 20% Electrolytic Capacitor 2 pcs 1 pc 2 pcs (2x) 100\u03bcF 50V 20% Electrolytic Capacitor 2 pcs 1 pc 2 pcs (1x) 100\u00b5H 1A 10% Drum Core Inductor 2 pcs (1x) Red 5mm LED 5pcs 10 pcs 5 pcs (1x) Potentiometer 10K with Knob 1 pc 1 pc Canada Robotix has bundled the above components into a single kit: SES250 Lab Kit Other Optional Components Item Canada Robotix Creatron Sayal Alligator Leads 10 pcs 10 pcs 10 pcs","title":"Lab Supplies"},{"location":"ses250/supplies/#lab-supplies","text":"Seneca College SES250 Electromagnatics You are not required to purchase the lab items from the store/supplier suggested here. You may purchase them from anywhere of your choice as long as they meet the lab requirement.","title":"Lab Supplies"},{"location":"ses250/supplies/#mandatory-items-for-se250-labs","text":"Safety Glasses The safety glasses must have side shields and a top shield. ( CCOHS Reference ) Where to Buy: A similar version can be purchased from the Seneca Campus Store: Temp Lite Series Clear Safety Glasses . Bound Lab Notebook Bound Notebook Ring Notebook Where to Buy: A similar version can be purchased from the Seneca Campus Store: Lab Notes 200 Pages .","title":"Mandatory Items for SE250 Labs"},{"location":"ses250/supplies/#ses250-lab-kit","text":"The following lab components are mandatory for you to brign to the lab for this course. They are common in the field of Electronics / Electrical Engineering are some of them will be used in future classes. Also included on the list are some of the places you can purchase the items. They can also be purchased from other major online retailers but links will not be provided as their product listing is very dynamic. Item Canada Robotix Creatron Sayal (1x) Full-size Breadboard Breadboard Breadboard Breadboard Kit (20x) Jumper Wires Wire Kit Wire Kit Breadboard Kit (5x) 100\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 330\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 1k\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 4.7k\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (5x) 10k\u03a9 1/4W 5% Resistor 5 pcs 10 pcs 10 pcs (2x) 100nF 50V 20% Ceramic Capacitor 5 pcs 2 pcs (2x) 10\u03bcF 50V 20% Electrolytic Capacitor 2 pcs 1 pc 2 pcs (2x) 100\u03bcF 50V 20% Electrolytic Capacitor 2 pcs 1 pc 2 pcs (1x) 100\u00b5H 1A 10% Drum Core Inductor 2 pcs (1x) Red 5mm LED 5pcs 10 pcs 5 pcs (1x) Potentiometer 10K with Knob 1 pc 1 pc Canada Robotix has bundled the above components into a single kit: SES250 Lab Kit","title":"SES250 Lab Kit"},{"location":"ses250/supplies/#other-optional-components","text":"Item Canada Robotix Creatron Sayal Alligator Leads 10 pcs 10 pcs 10 pcs","title":"Other Optional Components"}]}